{"version":3,"sources":["../src/infrastructure/database/repository/Coffee/CoffeeRepository.ts"],"sourcesContent":["import { inject } from 'inversify';\n\nimport { UpdateResult } from 'typeorm';\n\nimport { Repository } from 'infrastructure/database/repository/common/Repository';\nimport { Coffee as CoffeeEntity } from 'infrastructure/database/entities/Coffee';\nimport { ICoffeeRepository } from 'core/domainServices/Coffee/ICoffeeRepository';\nimport { CreateCoffeeRepositoryCommand } from 'core/domainServices/Coffee/requests/repository/command/CreateCoffeeRepositoryCommand';\nimport { DBMapper } from 'infrastructure/database/mappings/DBMapper';\nimport {\n  DATABASE_MAPPING_IDENTIFIERS,\n  INFRASTRUCTURE_IDENTIFIERS,\n} from 'infrastructure/InfrastructureModuleSymbols';\nimport { DOMAIN_MAPPING_IDENTIFIERS } from 'core/CoreModuleSymbols';\nimport { DeleteCoffeeRepositoryCommand } from 'core/domainServices/Coffee/requests/repository/command/DeleteCoffeeRepositoryCommand';\nimport { InfrastructureErrors } from 'infrastructure/common/errors/InfrastructureErrors';\nimport { BaseError } from 'core/common/errors/BaseError';\nimport { Coffee } from 'core/domain/Coffee/Coffee';\nimport { FindOneCoffeeRepositoryQuery } from 'core/domainServices/Coffee/requests/UnitOfWork/query/FindCoffeeRepositoryQuery';\nimport { UpdateCoffeeRepositoryCommand } from 'core/domainServices/Coffee/requests/repository/command/UpdateCoffeeRepositoryCommand';\n\nexport class CoffeeRepository\n  extends Repository<CoffeeEntity>\n  implements ICoffeeRepository\n{\n  constructor(\n    @inject(INFRASTRUCTURE_IDENTIFIERS.DB_MAPPER)\n    private readonly dbMapper: DBMapper\n  ) {\n    super(CoffeeEntity);\n  }\n\n  async findAllCoffees(): Promise<Coffee[]> {\n    const coffees = await this.custom()\n      .createQueryBuilder()\n      .leftJoinAndSelect('Coffee.reviews', 'Review')\n      .getMany();\n\n    return this.dbMapper.mapper.map<CoffeeEntity[], Coffee[]>(\n      {\n        destination: DOMAIN_MAPPING_IDENTIFIERS.COFFEE_DOMAIN,\n        source: DATABASE_MAPPING_IDENTIFIERS.COFFEE_ENTITY,\n      },\n      coffees\n    );\n  }\n\n  async findOneCoffee({ id }: FindOneCoffeeRepositoryQuery): Promise<Coffee> {\n    const coffee = await this.custom()\n      .createQueryBuilder()\n      .leftJoinAndSelect('Coffee.reviews', 'Review')\n      .where('Coffee.id = :id ', { id })\n      .getOne();\n\n    if (!coffee) {\n      throw new BaseError(\n        InfrastructureErrors[InfrastructureErrors.COFFEE_NOT_FOUND]\n      );\n    }\n\n    return this.dbMapper.mapper.map<CoffeeEntity, Coffee>(\n      {\n        destination: DOMAIN_MAPPING_IDENTIFIERS.COFFEE_DOMAIN,\n        source: DATABASE_MAPPING_IDENTIFIERS.COFFEE_ENTITY,\n      },\n      coffee\n    );\n  }\n\n  async createCoffee({\n    CoffeeStatus,\n    brand,\n    name,\n    type,\n    imgUrl,\n    description,\n    burntLvl,\n    reflink,\n  }: CreateCoffeeRepositoryCommand): Promise<Coffee> {\n    const coffee = new CoffeeEntity();\n    coffee.brand = brand;\n    coffee.name = name;\n    coffee.type = type;\n    coffee.imgUrl = imgUrl;\n    coffee.description = description;\n    coffee.burntLvl = burntLvl;\n    coffee.reflink = reflink;\n    coffee.CoffeeStatus = CoffeeStatus;\n    coffee.createdAt = new Date();\n    coffee.type = type;\n\n    coffee.reviews = [];\n    const savedCoffee = await this.save(coffee);\n\n    return this.dbMapper.mapper.map<CoffeeEntity, Coffee>(\n      {\n        destination: DOMAIN_MAPPING_IDENTIFIERS.COFFEE_DOMAIN,\n        source: DATABASE_MAPPING_IDENTIFIERS.COFFEE_ENTITY,\n      },\n      savedCoffee\n    );\n  }\n\n  async updateCoffee({\n    coffee,\n    coffeeId,\n  }: UpdateCoffeeRepositoryCommand): Promise<UpdateResult> {\n    const updatedCoffee = await this.custom()\n      .createQueryBuilder()\n      .update(CoffeeEntity)\n      .set({ ...coffee })\n      .where('id = :id', { id: coffeeId })\n      .execute();\n\n    return updatedCoffee;\n  }\n\n  // TODO: make it transational\n  async deleteCoffee({ id }: DeleteCoffeeRepositoryCommand): Promise<Coffee> {\n    const result = await this.custom()\n      .createQueryBuilder()\n      .leftJoinAndSelect('Coffee.reviews', 'Review')\n      .where('Coffee.id = :id ', { id })\n      .getOne();\n\n    if (!result) {\n      throw new BaseError(\n        InfrastructureErrors[InfrastructureErrors.COFFEE_NOT_FOUND]\n      );\n    }\n\n    this.remove(result);\n\n    return this.dbMapper.mapper.map<CoffeeEntity, Coffee>(\n      {\n        destination: DOMAIN_MAPPING_IDENTIFIERS.COFFEE_DOMAIN,\n        source: DATABASE_MAPPING_IDENTIFIERS.COFFEE_ENTITY,\n      },\n      result\n    );\n  }\n\n  // sortAndPaginate({\n  //   sortBy,\n  //   skip,\n  //   take,\n  // }: SearchRepositoryQuery): Promise<Coffee> {\n  //   // const result = await this.custom().createQueryBuilder().addOrderBy(sortB, skip, take))\n  // }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAS,cAAc;AAqBhB,IAAM,mBAAN,cACG,WAEV;AAAA,EACE,YAEmB,UACjB;AACA,UAAM,MAAY;AAFD;AAAA,EAGnB;AAAA,EAEA,MAAM,iBAAoC;AACxC,UAAM,UAAU,MAAM,KAAK,OAAO,EAC/B,mBAAmB,EACnB,kBAAkB,kBAAkB,QAAQ,EAC5C,QAAQ;AAEX,WAAO,KAAK,SAAS,OAAO;AAAA,MAC1B;AAAA,QACE,aAAa,2BAA2B;AAAA,QACxC,QAAQ,6BAA6B;AAAA,MACvC;AAAA,MACA;AAAA,IACF;AAAA,EACF;AAAA,EAEA,MAAM,cAAc,EAAE,GAAG,GAAkD;AACzE,UAAM,SAAS,MAAM,KAAK,OAAO,EAC9B,mBAAmB,EACnB,kBAAkB,kBAAkB,QAAQ,EAC5C,MAAM,oBAAoB,EAAE,GAAG,CAAC,EAChC,OAAO;AAEV,QAAI,CAAC,QAAQ;AACX,YAAM,IAAI;AAAA,QACR,6CAA0D;AAAA,MAC5D;AAAA,IACF;AAEA,WAAO,KAAK,SAAS,OAAO;AAAA,MAC1B;AAAA,QACE,aAAa,2BAA2B;AAAA,QACxC,QAAQ,6BAA6B;AAAA,MACvC;AAAA,MACA;AAAA,IACF;AAAA,EACF;AAAA,EAEA,MAAM,aAAa;AAAA,IACjB;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF,GAAmD;AACjD,UAAM,SAAS,IAAI,OAAa;AAChC,WAAO,QAAQ;AACf,WAAO,OAAO;AACd,WAAO,OAAO;AACd,WAAO,SAAS;AAChB,WAAO,cAAc;AACrB,WAAO,WAAW;AAClB,WAAO,UAAU;AACjB,WAAO,eAAe;AACtB,WAAO,YAAY,oBAAI,KAAK;AAC5B,WAAO,OAAO;AAEd,WAAO,UAAU,CAAC;AAClB,UAAM,cAAc,MAAM,KAAK,KAAK,MAAM;AAE1C,WAAO,KAAK,SAAS,OAAO;AAAA,MAC1B;AAAA,QACE,aAAa,2BAA2B;AAAA,QACxC,QAAQ,6BAA6B;AAAA,MACvC;AAAA,MACA;AAAA,IACF;AAAA,EACF;AAAA,EAEA,MAAM,aAAa;AAAA,IACjB;AAAA,IACA;AAAA,EACF,GAAyD;AACvD,UAAM,gBAAgB,MAAM,KAAK,OAAO,EACrC,mBAAmB,EACnB,OAAO,MAAY,EACnB,IAAI,EAAE,GAAG,OAAO,CAAC,EACjB,MAAM,YAAY,EAAE,IAAI,SAAS,CAAC,EAClC,QAAQ;AAEX,WAAO;AAAA,EACT;AAAA;AAAA,EAGA,MAAM,aAAa,EAAE,GAAG,GAAmD;AACzE,UAAM,SAAS,MAAM,KAAK,OAAO,EAC9B,mBAAmB,EACnB,kBAAkB,kBAAkB,QAAQ,EAC5C,MAAM,oBAAoB,EAAE,GAAG,CAAC,EAChC,OAAO;AAEV,QAAI,CAAC,QAAQ;AACX,YAAM,IAAI;AAAA,QACR,6CAA0D;AAAA,MAC5D;AAAA,IACF;AAEA,SAAK,OAAO,MAAM;AAElB,WAAO,KAAK,SAAS,OAAO;AAAA,MAC1B;AAAA,QACE,aAAa,2BAA2B;AAAA,QACxC,QAAQ,6BAA6B;AAAA,MACvC;AAAA,MACA;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASF;AAhIa;AAAA,mBAAN;AAAA,EAKH,mBAAC,OAAO,2BAA2B,SAAS;AAAA,GALnC;","names":[]}