{"version":3,"sources":["../src/ui/portal/Authentication/rest/v1/AuthenticationController.ts"],"sourcesContent":["import {\n  BaseHttpController,\n  controller,\n  httpPost,\n  requestBody,\n  results,\n} from 'inversify-express-utils';\n\nimport { OK } from 'http-status-codes';\n\nimport { inject } from 'inversify';\n\nimport { SignUpCommand } from 'core/applicationServices/Authentication/requests/repository/command/SignUpCommand';\nimport {\n  DOMAIN_APPLICATION_SERVICE_IDENTIFIERS,\n  DOMAIN_MAPPING_IDENTIFIERS,\n} from 'core/CoreModuleSymbols';\nimport { User } from 'core/domain/User/User';\nimport { IAuthenticationService } from 'core/applicationServices/Authentication/IAuthenticationService';\n\nimport { UIMapper } from 'ui/common/mappings/UIMapper';\nimport {\n  UI_APPLICATION_IDENTIFIERS,\n  UI_IDENTIFIERS,\n  UI_MAPPINGS_IDENTIFIERS,\n} from 'ui/UIModuleSymbols';\nimport { User as UserUI } from 'ui/common/models/User';\nimport { SignUpCommandBody } from 'ui/portal/Authentication/rest/v1/requests/command/SignUpCommandBody';\n\nimport { AuthenticationQueryBody } from 'ui/portal/Authentication/rest/v1/requests/query/AuthenticationQueryBody';\nimport { IAuthenticationHandler } from 'ui/common/config/application/common/auth/IAuthenticationHandler';\nimport { AuthenticationQuery } from 'core/applicationServices/Authentication/requests/handler/query/AuthenticationQuery';\n\n@controller('/v1/auth')\nexport class AuthenticationController extends BaseHttpController {\n  constructor(\n    @inject(DOMAIN_APPLICATION_SERVICE_IDENTIFIERS.AUTHENTICATION_SERVICE)\n    private readonly authenticationService: IAuthenticationService,\n    @inject(UI_APPLICATION_IDENTIFIERS.JWT_AUTHENTICATION_HANDLER)\n    private readonly authenticationHandler: IAuthenticationHandler,\n    @inject(UI_IDENTIFIERS.UI_MAPPER)\n    private readonly uiMapper: UIMapper\n  ) {\n    super();\n  }\n\n  @httpPost('/signup')\n  public async create(\n    @requestBody()\n    { nickname, email, password }: SignUpCommandBody\n  ): Promise<results.JsonResult> {\n    const user = await this.authenticationService.signUp(\n      new SignUpCommand(nickname, email, password)\n    );\n\n    const createdUser = this.uiMapper.mapper.map<User, UserUI>(\n      {\n        destination: UI_MAPPINGS_IDENTIFIERS.USER_UI,\n        source: DOMAIN_MAPPING_IDENTIFIERS.USER_DOMAIN,\n      },\n      user\n    );\n    return this.json(createdUser, OK);\n  }\n\n  @httpPost('/')\n  public async index(\n    @requestBody() { email, password }: AuthenticationQueryBody\n  ): Promise<results.JsonResult> {\n    const authentication = await this.authenticationHandler.authenticate(\n      new AuthenticationQuery(email, password)\n    );\n\n    return this.json(authentication, OK);\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;AAAA,EACE;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,OAEK;AAEP,SAAS,UAAU;AAEnB,SAAS,cAAc;AAwBhB,IAAM,2BAAN,cAAuC,mBAAmB;AAAA,EAC/D,YAEmB,uBAEA,uBAEA,UACjB;AACA,UAAM;AANW;AAEA;AAEA;AAAA,EAGnB;AAAA,EAGA,MAAa,OAEX,EAAE,UAAU,OAAO,SAAS,GACC;AAC7B,UAAM,OAAO,MAAM,KAAK,sBAAsB;AAAA,MAC5C,IAAI,cAAc,UAAU,OAAO,QAAQ;AAAA,IAC7C;AAEA,UAAM,cAAc,KAAK,SAAS,OAAO;AAAA,MACvC;AAAA,QACE,aAAa,wBAAwB;AAAA,QACrC,QAAQ,2BAA2B;AAAA,MACrC;AAAA,MACA;AAAA,IACF;AACA,WAAO,KAAK,KAAK,aAAa,EAAE;AAAA,EAClC;AAAA,EAGA,MAAa,MACI,EAAE,OAAO,SAAS,GACJ;AAC7B,UAAM,iBAAiB,MAAM,KAAK,sBAAsB;AAAA,MACtD,IAAI,oBAAoB,OAAO,QAAQ;AAAA,IACzC;AAEA,WAAO,KAAK,KAAK,gBAAgB,EAAE;AAAA,EACrC;AACF;AA5Be;AAAA,EADZ,SAAS,SAAS;AAAA,EAEjB,mBAAC,YAAY;AAAA,GAdJ,yBAaE;AAmBA;AAAA,EADZ,SAAS,GAAG;AAAA,EAEX,mBAAC,YAAY;AAAA,GAjCJ,yBAgCE;AAhCF,2BAAN;AAAA,EADN,WAAW,UAAU;AAAA,EAGlB,mBAAC,OAAO,uCAAuC,sBAAsB;AAAA,EAErE,mBAAC,OAAO,2BAA2B,0BAA0B;AAAA,EAE7D,mBAAC,OAAO,eAAe,SAAS;AAAA,GANvB;","names":[]}