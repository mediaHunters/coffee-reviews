{"version":3,"sources":["../src/ui/common/config/application/express/auth/middlewares/ApplicationAuthProvider.ts"],"sourcesContent":["import { inject, injectable } from 'inversify';\nimport { interfaces } from 'inversify-express-utils';\nimport { NextFunction, Request, Response } from 'express';\n\nimport { User } from 'ui/common/models/User';\nimport { JWTTokenUtil } from 'ui/common/config/application/common/auth/utils/JWTTokenUtil';\nimport { UI_APPLICATION_IDENTIFIERS } from 'ui/UIModuleSymbols';\nimport { TokenPayload } from 'ui/common/config/application/express/auth/types/TokenPayload';\n\nimport { DOMAIN_APPLICATION_SERVICE_IDENTIFIERS } from 'core/CoreModuleSymbols';\nimport { FetchUserQuery } from 'core/applicationServices/User/requests/query/FetchUserQuery';\nimport { UserService } from 'core/applicationServices/User/UserService';\nimport { Principal } from 'ui/common/config/application/express/auth/models/Principal';\n\n@injectable()\nexport class ApplicationAuthProvider implements interfaces.AuthProvider {\n  @inject(DOMAIN_APPLICATION_SERVICE_IDENTIFIERS.USER_SERVICE)\n  private readonly userService!: UserService;\n\n  @inject(UI_APPLICATION_IDENTIFIERS.JWT_TOKEN_UTIL)\n  private readonly jwtTokenUtil!: JWTTokenUtil;\n\n  public async getUser(\n    req: Request,\n    res: Response,\n    next: NextFunction\n  ): Promise<interfaces.Principal> {\n    const token = this.jwtTokenUtil.getTokenFromHeaders(req.headers);\n    if (!token) {\n      return new Principal(undefined);\n    }\n    const tokenData = await this.jwtTokenUtil.decodeToken<TokenPayload>(token);\n\n    if (!tokenData) {\n      return new Principal(undefined);\n    }\n\n    const { user } = tokenData;\n    try {\n      const existingUser = await this.userService.fetchUser(\n        new FetchUserQuery(user.id)\n      );\n\n      if (!existingUser) {\n        return new Principal(undefined);\n      }\n\n      return new Principal(\n        new User(user.id, user.nickname, user.email, user.role)\n      );\n    } catch (error) {\n      next(error);\n      return new Principal(undefined);\n    }\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA,SAAS,QAAQ,kBAAkB;AAe5B,IAAM,0BAAN,MAAiE;AAAA,EAOtE,MAAa,QACX,KACA,KACA,MAC+B;AAC/B,UAAM,QAAQ,KAAK,aAAa,oBAAoB,IAAI,OAAO;AAC/D,QAAI,CAAC,OAAO;AACV,aAAO,IAAI,UAAU,MAAS;AAAA,IAChC;AACA,UAAM,YAAY,MAAM,KAAK,aAAa,YAA0B,KAAK;AAEzE,QAAI,CAAC,WAAW;AACd,aAAO,IAAI,UAAU,MAAS;AAAA,IAChC;AAEA,UAAM,EAAE,KAAK,IAAI;AACjB,QAAI;AACF,YAAM,eAAe,MAAM,KAAK,YAAY;AAAA,QAC1C,IAAI,eAAe,KAAK,EAAE;AAAA,MAC5B;AAEA,UAAI,CAAC,cAAc;AACjB,eAAO,IAAI,UAAU,MAAS;AAAA,MAChC;AAEA,aAAO,IAAI;AAAA,QACT,IAAI,KAAK,KAAK,IAAI,KAAK,UAAU,KAAK,OAAO,KAAK,IAAI;AAAA,MACxD;AAAA,IACF,SAAS,OAAP;AACA,WAAK,KAAK;AACV,aAAO,IAAI,UAAU,MAAS;AAAA,IAChC;AAAA,EACF;AACF;AAxCa;AAEM;AAAA,EADhB,OAAO,uCAAuC,YAAY;AAAA,GADhD,wBAEM;AAGA;AAAA,EADhB,OAAO,2BAA2B,cAAc;AAAA,GAJtC,wBAKM;AALN,0BAAN;AAAA,EADN,WAAW;AAAA,GACC;","names":[]}