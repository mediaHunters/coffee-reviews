{"version":3,"sources":["../src/ui/common/config/application/express/auth/JWTAuthenticationHandler.ts"],"sourcesContent":["import { inject, injectable } from 'inversify';\n\nimport { NOT_FOUND } from 'http-status-codes';\n\nimport {\n  UI_APPLICATION_IDENTIFIERS,\n  UI_IDENTIFIERS,\n  UI_MAPPINGS_IDENTIFIERS,\n} from 'ui/UIModuleSymbols';\nimport { JWTTokenUtil } from 'ui/common/config/application/common/auth/utils/JWTTokenUtil';\nimport { IAuthenticationHandler } from 'ui/common/config/application/common/auth/IAuthenticationHandler';\nimport {\n  APP_TOKEN_LIFE,\n  APP_TOKEN_SECRET,\n} from 'ui/common/config/consts/variables';\nimport { UIMapper } from 'ui/common/mappings/UIMapper';\nimport { User as UserUI } from 'ui/common/models/User';\nimport { UserInterfaceError } from 'ui/common/config/errors/UserInterfaceError';\n\nimport { IAuthenticationService } from 'core/applicationServices/Authentication/IAuthenticationService';\n\nimport {\n  DOMAIN_APPLICATION_SERVICE_IDENTIFIERS,\n  DOMAIN_MAPPING_IDENTIFIERS,\n} from 'core/CoreModuleSymbols';\n\nimport { User } from 'core/domain/User/User';\nimport { AuthenticationQuery } from 'core/applicationServices/Authentication/requests/handler/query/AuthenticationQuery';\nimport { Authentication } from 'ui/common/config/application/common/auth/models/Authentication';\n\nconst PAYLOAD_KEY = 'user';\n\n@injectable()\nexport class JWTAuthenticationHandler implements IAuthenticationHandler {\n  constructor(\n    @inject(UI_APPLICATION_IDENTIFIERS.JWT_TOKEN_UTIL)\n    private readonly jwtTokenUtil: JWTTokenUtil,\n    @inject(DOMAIN_APPLICATION_SERVICE_IDENTIFIERS.AUTHENTICATION_SERVICE)\n    private readonly authenticationService: IAuthenticationService,\n    @inject(UI_IDENTIFIERS.UI_MAPPER)\n    private readonly uiMapper: UIMapper\n  ) {}\n\n  async authenticate(request: AuthenticationQuery) {\n    const user = await this.authenticationService.verifyCredentials(request);\n    if (!user) {\n      throw new UserInterfaceError(NOT_FOUND, 'USER_NOT_FOUND');\n    }\n\n    const userUi = this.uiMapper.mapper.map<User, UserUI>(\n      {\n        destination: UI_MAPPINGS_IDENTIFIERS.USER_UI,\n        source: DOMAIN_MAPPING_IDENTIFIERS.USER_DOMAIN,\n      },\n      user\n    );\n\n    return new Authentication(\n      this.jwtTokenUtil.generateToken(\n        userUi,\n        APP_TOKEN_SECRET,\n        APP_TOKEN_LIFE,\n        PAYLOAD_KEY\n      ),\n      user\n    );\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAS,QAAQ,kBAAkB;AAEnC,SAAS,iBAAiB;AA4B1B,IAAM,cAAc;AAGb,IAAM,2BAAN,MAAiE;AAAA,EACtE,YAEmB,cAEA,uBAEA,UACjB;AALiB;AAEA;AAEA;AAAA,EAChB;AAAA,EAEH,MAAM,aAAa,SAA8B;AAC/C,UAAM,OAAO,MAAM,KAAK,sBAAsB,kBAAkB,OAAO;AACvE,QAAI,CAAC,MAAM;AACT,YAAM,IAAI,mBAAmB,WAAW,gBAAgB;AAAA,IAC1D;AAEA,UAAM,SAAS,KAAK,SAAS,OAAO;AAAA,MAClC;AAAA,QACE,aAAa,wBAAwB;AAAA,QACrC,QAAQ,2BAA2B;AAAA,MACrC;AAAA,MACA;AAAA,IACF;AAEA,WAAO,IAAI;AAAA,MACT,KAAK,aAAa;AAAA,QAChB;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACF;AAAA,MACA;AAAA,IACF;AAAA,EACF;AACF;AAlCa;AAAA,2BAAN;AAAA,EADN,WAAW;AAAA,EAGR,mBAAC,OAAO,2BAA2B,cAAc;AAAA,EAEjD,mBAAC,OAAO,uCAAuC,sBAAsB;AAAA,EAErE,mBAAC,OAAO,eAAe,SAAS;AAAA,GANvB;","names":[]}