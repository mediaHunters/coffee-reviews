{"version":3,"sources":["../src/infrastructure/database/repository/Coffee/CoffeeUnitOfWork.ts"],"sourcesContent":["import { inject, injectable } from 'inversify';\n\nimport { DOMAIN_REPOSITORY_IDENTIFIERS } from 'core/CoreModuleSymbols';\nimport { Coffee } from 'core/domain/Coffee/Coffee';\nimport { ICoffeeUnitOfWork } from 'core/domainServices/Coffee/ICoffeeUnitOfWork';\nimport { CreateCoffeeUnitOfWorkRepositoryCommand } from 'core/domainServices/Coffee/requests/UnitOfWork/command/AddCoffeeUnitOfWorkRepositoryCommand';\nimport { ICoffeeRepository } from 'core/domainServices/Coffee/ICoffeeRepository';\nimport { DeleteCoffeeRepositoryCommand } from 'core/domainServices/Coffee/requests/repository/command/DeleteCoffeeRepositoryCommand';\nimport { IUserRepository } from 'core/domainServices/User/IUserRepository';\nimport { CreateCoffeeRepositoryCommand } from 'core/domainServices/Coffee/requests/repository/command/CreateCoffeeRepositoryCommand';\n\n@injectable()\nexport class CoffeeUnitOfWork implements ICoffeeUnitOfWork {\n  constructor(\n    @inject(DOMAIN_REPOSITORY_IDENTIFIERS.COFFEE_REPOSITORY)\n    private readonly coffeeRepository: ICoffeeRepository,\n    @inject(DOMAIN_REPOSITORY_IDENTIFIERS.USER_REPOSITORY)\n    private readonly userRepository: IUserRepository\n  ) {}\n\n  create({\n    brand,\n    name,\n    type,\n    imgUrl,\n    description,\n    burntLvl,\n    reflink,\n    CoffeeStatus,\n  }: CreateCoffeeUnitOfWorkRepositoryCommand): Promise<Coffee> {\n    return this.coffeeRepository.createCoffee(\n      new CreateCoffeeRepositoryCommand(\n        brand,\n        name,\n        type,\n        imgUrl,\n        description,\n        burntLvl,\n        reflink,\n        CoffeeStatus\n      )\n    );\n  }\n\n  delete({ id }: DeleteCoffeeRepositoryCommand): Promise<Coffee> {\n    return this.coffeeRepository.deleteCoffee(\n      new DeleteCoffeeRepositoryCommand(id)\n    );\n  }\n\n  // @Transactional({\n  //   connectionName: () => process.env.ORM_CONNECTION,\n  // })\n  // async addCoffeeReview({\n  //   userId,\n  //   coffeeId,\n  //   look,\n  //   smell,\n  //   taste,\n  // }: AddReviewRepositoryCommand): Promise<Coffee> {\n\n  //   return this.coffeeRepository.addCoffeeReview(\n  //     new AddReviewRepositoryCommand(userId, coffeeId, look, smell, taste)\n  //   );\n  // }\n}\n"],"mappings":";;;;;;;;;;;;;;;;AAAA,SAAS,QAAQ,kBAAkB;AAY5B,IAAM,mBAAN,MAAoD;AAAA,EACzD,YAEmB,kBAEA,gBACjB;AAHiB;AAEA;AAAA,EAChB;AAAA,EAEH,OAAO;AAAA,IACL;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF,GAA6D;AAC3D,WAAO,KAAK,iBAAiB;AAAA,MAC3B,IAAI;AAAA,QACF;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA,EAEA,OAAO,EAAE,GAAG,GAAmD;AAC7D,WAAO,KAAK,iBAAiB;AAAA,MAC3B,IAAI,8BAA8B,EAAE;AAAA,IACtC;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiBF;AArDa;AAAA,mBAAN;AAAA,EADN,WAAW;AAAA,EAGR,mBAAC,OAAO,8BAA8B,iBAAiB;AAAA,EAEvD,mBAAC,OAAO,8BAA8B,eAAe;AAAA,GAJ5C;","names":[]}