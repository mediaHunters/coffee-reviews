{"version":3,"sources":["../src/ui/common/config/application/common/auth/utils/JWTTokenUtil.ts"],"sourcesContent":["import { IncomingHttpHeaders } from 'http';\n\nimport jwt, { Secret } from 'jsonwebtoken';\nimport { injectable } from 'inversify';\n\nimport { APP_TOKEN_SECRET } from 'ui/common/config/consts/variables';\nimport { User } from 'ui/common/models/User';\n\n@injectable()\nexport class JWTTokenUtil {\n  private readonly AUTH_HEADER = 'authorization';\n\n  private readonly SCHEME = 'bearer';\n\n  private readonly MATCHER = /(\\S+)\\s+(\\S+)/;\n\n  generateToken(\n    payload: User,\n    secret: Secret,\n    expiresIn: string | number,\n    payloadKey?: string\n  ): string {\n    return jwt.sign(payloadKey ? { [payloadKey]: payload } : payload, secret, {\n      expiresIn,\n    });\n  }\n\n  decodeToken<R extends object | string | null>(token: string): R {\n    try {\n      return jwt.verify(token, APP_TOKEN_SECRET) as R;\n    } catch {\n      return null as R;\n    }\n  }\n\n  getTokenFromHeaders(headers: IncomingHttpHeaders): any {\n    const authHeader = headers[this.AUTH_HEADER];\n    if (!authHeader) {\n      return null;\n    }\n    const matches = authHeader.match(this.MATCHER);\n    return matches && matches[2];\n  }\n}\n"],"mappings":";;;;;;;;;AAEA,OAAO,SAAqB;AAC5B,SAAS,kBAAkB;AAMpB,IAAM,eAAN,MAAmB;AAAA,EAAnB;AACL,SAAiB,cAAc;AAE/B,SAAiB,SAAS;AAE1B,SAAiB,UAAU;AAAA;AAAA,EAE3B,cACE,SACA,QACA,WACA,YACQ;AACR,WAAO,IAAI,KAAK,aAAa,EAAE,CAAC,UAAU,GAAG,QAAQ,IAAI,SAAS,QAAQ;AAAA,MACxE;AAAA,IACF,CAAC;AAAA,EACH;AAAA,EAEA,YAA8C,OAAkB;AAC9D,QAAI;AACF,aAAO,IAAI,OAAO,OAAO,gBAAgB;AAAA,IAC3C,QAAE;AACA,aAAO;AAAA,IACT;AAAA,EACF;AAAA,EAEA,oBAAoB,SAAmC;AACrD,UAAM,aAAa,QAAQ,KAAK,WAAW;AAC3C,QAAI,CAAC,YAAY;AACf,aAAO;AAAA,IACT;AACA,UAAM,UAAU,WAAW,MAAM,KAAK,OAAO;AAC7C,WAAO,WAAW,QAAQ,CAAC;AAAA,EAC7B;AACF;AAlCa;AAAA,eAAN;AAAA,EADN,WAAW;AAAA,GACC;","names":[]}