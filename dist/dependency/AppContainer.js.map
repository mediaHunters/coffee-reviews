{"version":3,"sources":["../../node_modules/dotenv/lib/main.js","../../src/dependency/AppContainer.ts","../../src/dependency/BaseModule.ts","../../src/infrastructure/database/mappings/DBMapper.ts","../../src/core/domain/Role/Role.ts","../../src/core/CoreModuleSymbols.ts","../../src/infrastructure/InfrastructureModuleSymbols.ts","../../src/infrastructure/database/mappings/Role/RoleEntityToRoleDomain.ts","../../src/core/domain/User/User.ts","../../src/infrastructure/database/mappings/User/UserEntityToUserDomain.ts","../../src/core/domain/Coffee/Coffee.ts","../../src/infrastructure/database/mappings/Coffee/CoffeEntityToCoffeeDomain.ts","../../src/core/domain/Review/Review.ts","../../src/infrastructure/database/mappings/Review/ReviewEntityToReviewDomain.ts","../../src/infrastructure/database/orm/CROrm.ts","../../src/ui/common/mappings/UIMapper.ts","../../src/ui/UIModuleSymbols.ts","../../src/ui/common/mappings/User/UserDomainToUserUI.ts","../../src/dependency/common/CommonModule.ts","../../src/dependency/common/ApplicationModule.ts","../../src/ui/portal/User/rest/v1/UserController.ts","../../src/core/applicationServices/User/requests/command/RemoveUserCommand.ts","../../src/ui/common/config/application/express/auth/middlewares/isAuthenticated.ts","../../src/ui/common/config/application/express/auth/utils/getHttpContext.ts","../../src/core/common/errors/BaseError.ts","../../src/ui/common/config/errors/UserInterfaceError.ts","../../src/ui/portal/Authentication/rest/v1/AuthenticationController.ts","../../src/core/applicationServices/Authentication/requests/repository/command/SignUpCommand.ts","../../src/core/applicationServices/Authentication/requests/handler/query/AuthenticationQuery.ts","../../src/ui/portal/Coffee/rest/v1/CoffeeController.ts","../../src/core/applicationServices/Coffee/requests/command/DeleteCoffeeCommand.ts","../../src/core/domainServices/Coffee/requests/UnitOfWork/query/FindCoffeeRepositoryQuery.ts","../../src/core/applicationServices/Coffee/requests/command/AddCoffeeCommand.ts","../../src/core/applicationServices/Coffee/requests/command/UpdateCoffeeCommand.ts","../../src/core/applicationServices/Review/requests/query/GetUserReviewsQuery.ts","../../src/core/applicationServices/Review/requests/command/AddReviewCommand.ts","../../src/core/applicationServices/Review/requests/command/UpdateReviewCommand.ts","../../src/core/applicationServices/Review/requests/command/DeleteReviewCommand.ts","../../src/ui/common/config/application/express/ExpressApplication.ts","../../src/ui/common/config/application/common/BaseApplication.ts","../../src/ui/common/config/consts/variables.ts","../../src/ui/common/config/swagger.json","../../src/ui/common/config/logger/WinstonLogger.ts","../../src/ui/common/config/logger/BaseLogger.ts","../../src/ui/common/config/application/express/auth/JWTAuthenticationHandler.ts","../../src/ui/common/config/application/common/auth/models/Authentication.ts","../../src/ui/common/config/application/common/auth/utils/JWTTokenUtil.ts","../../src/dependency/BaseContainer.ts","../../src/ui/common/config/errors/handlers/errorHandler.ts","../../src/core/common/errors/CoreError.ts","../../src/ui/common/config/errors/models/ErrorResponse.ts","../../src/core/applicationServices/Authentication/AuthenticationService.ts","../../src/core/domainServices/User/request/UnitOfWorkRepository/command/AddUserUnitOfWorkRepositoryCommand.ts","../../src/core/domainServices/User/request/Repository/query/FindUserByEmailRepositoryQuery.ts","../../src/dependency/shared/Authentication/AuthenticationModule.ts","../../src/infrastructure/database/repository/User/UserRepository.ts","../../src/infrastructure/database/entities/User.ts","../../src/infrastructure/database/entities/Base.ts","../../src/infrastructure/database/repository/common/Repository.ts","../../src/infrastructure/database/entities/Role.ts","../../src/infrastructure/database/enum/UserRole.ts","../../src/infrastructure/common/errors/InfrastructureErrors.ts","../../src/core/applicationServices/User/UserService.ts","../../src/core/domainServices/User/request/Repository/query/GetUserRepositoryQuery.ts","../../src/core/domainServices/User/request/Repository/query/GetUsersRepositoryQuery.ts","../../src/core/domainServices/User/request/UnitOfWorkRepository/command/DeleteUserUnitOfWorkRepositoryCommand.ts","../../src/infrastructure/database/repository/User/UserUnitOfWork.ts","../../src/core/domainServices/Role/requests/repository/query/FindRoleByNameRepositoryQuery.ts","../../src/core/domainServices/User/request/Repository/command/AddUserRepositoryCommand.ts","../../src/core/domainServices/User/request/Repository/query/CheckIfUserAlreadyExistsRepositoryQuery.ts","../../src/dependency/shared/User/UserModule.ts","../../src/infrastructure/database/repository/role/RoleRepository.ts","../../src/dependency/Administration/RoleModule.ts","../../src/ui/common/config/application/express/auth/middlewares/ApplicationAuthProvider.ts","../../src/ui/common/models/User.ts","../../src/core/applicationServices/User/requests/query/FetchUserQuery.ts","../../src/ui/common/config/application/express/auth/models/Principal.ts","../../src/core/applicationServices/Coffee/CoffeeService.ts","../../src/core/domainServices/Coffee/requests/UnitOfWork/command/AddCoffeeUnitOfWorkRepositoryCommand.ts","../../src/core/domainServices/Coffee/requests/UnitOfWork/command/DeleteCoffeeUnitOfWorkRepositoryCommand.ts","../../src/infrastructure/database/repository/Coffee/CoffeeRepository.ts","../../src/infrastructure/database/entities/Coffee.ts","../../src/core/domain/Coffee/CoffeeType.ts","../../src/core/domain/Coffee/CoffeeBurnLvl.ts","../../src/infrastructure/database/enum/CoffeStatus.ts","../../src/infrastructure/database/repository/Coffee/CoffeeUnitOfWork.ts","../../src/core/domainServices/Coffee/requests/repository/command/DeleteCoffeeRepositoryCommand.ts","../../src/core/domainServices/Coffee/requests/repository/command/CreateCoffeeRepositoryCommand.ts","../../src/dependency/shared/Coffee/CoffeeModule.ts","../../src/infrastructure/database/repository/Review/ReviewRepository.ts","../../src/infrastructure/database/entities/Review.ts","../../src/core/applicationServices/Review/ReviewService.ts","../../src/core/domainServices/Review/requests/command/AddReviewRepositoryCommand.ts","../../src/core/domainServices/Review/requests/query/GetReviewsRepositoryQuery.ts","../../src/core/domainServices/Review/requests/command/UpdateReviewRepositoryCommand.ts","../../src/core/domainServices/Review/requests/command/DeleteReviewRepositoryCommand.ts","../../src/dependency/shared/Review/ReviewModule.ts"],"sourcesContent":["/* @flow */\n/*::\n\ntype DotenvParseOptions = {\n  debug?: boolean\n}\n\n// keys and values from src\ntype DotenvParseOutput = { [string]: string }\n\ntype DotenvConfigOptions = {\n  path?: string, // path to .env file\n  encoding?: string, // encoding of .env file\n  debug?: string // turn on logging for debugging purposes\n}\n\ntype DotenvConfigOutput = {\n  parsed?: DotenvParseOutput,\n  error?: Error\n}\n\n*/\n\nconst fs = require('fs')\nconst path = require('path')\n\nfunction log (message /*: string */) {\n  console.log(`[dotenv][DEBUG] ${message}`)\n}\n\nconst NEWLINE = '\\n'\nconst RE_INI_KEY_VAL = /^\\s*([\\w.-]+)\\s*=\\s*(.*)?\\s*$/\nconst RE_NEWLINES = /\\\\n/g\nconst NEWLINES_MATCH = /\\n|\\r|\\r\\n/\n\n// Parses src into an Object\nfunction parse (src /*: string | Buffer */, options /*: ?DotenvParseOptions */) /*: DotenvParseOutput */ {\n  const debug = Boolean(options && options.debug)\n  const obj = {}\n\n  // convert Buffers before splitting into lines and processing\n  src.toString().split(NEWLINES_MATCH).forEach(function (line, idx) {\n    // matching \"KEY' and 'VAL' in 'KEY=VAL'\n    const keyValueArr = line.match(RE_INI_KEY_VAL)\n    // matched?\n    if (keyValueArr != null) {\n      const key = keyValueArr[1]\n      // default undefined or missing values to empty string\n      let val = (keyValueArr[2] || '')\n      const end = val.length - 1\n      const isDoubleQuoted = val[0] === '\"' && val[end] === '\"'\n      const isSingleQuoted = val[0] === \"'\" && val[end] === \"'\"\n\n      // if single or double quoted, remove quotes\n      if (isSingleQuoted || isDoubleQuoted) {\n        val = val.substring(1, end)\n\n        // if double quoted, expand newlines\n        if (isDoubleQuoted) {\n          val = val.replace(RE_NEWLINES, NEWLINE)\n        }\n      } else {\n        // remove surrounding whitespace\n        val = val.trim()\n      }\n\n      obj[key] = val\n    } else if (debug) {\n      log(`did not match key and value when parsing line ${idx + 1}: ${line}`)\n    }\n  })\n\n  return obj\n}\n\n// Populates process.env from .env file\nfunction config (options /*: ?DotenvConfigOptions */) /*: DotenvConfigOutput */ {\n  let dotenvPath = path.resolve(process.cwd(), '.env')\n  let encoding /*: string */ = 'utf8'\n  let debug = false\n\n  if (options) {\n    if (options.path != null) {\n      dotenvPath = options.path\n    }\n    if (options.encoding != null) {\n      encoding = options.encoding\n    }\n    if (options.debug != null) {\n      debug = true\n    }\n  }\n\n  try {\n    // specifying an encoding returns a string instead of a buffer\n    const parsed = parse(fs.readFileSync(dotenvPath, { encoding }), { debug })\n\n    Object.keys(parsed).forEach(function (key) {\n      if (!Object.prototype.hasOwnProperty.call(process.env, key)) {\n        process.env[key] = parsed[key]\n      } else if (debug) {\n        log(`\"${key}\" is already defined in \\`process.env\\` and will not be overwritten`)\n      }\n    })\n\n    return { parsed }\n  } catch (e) {\n    return { error: e }\n  }\n}\n\nmodule.exports.config = config\nmodule.exports.parse = parse\n","import express from 'express';\n\nimport { InversifyExpressServer } from 'inversify-express-utils';\n\nimport { CommonModule } from 'dependency/common/CommonModule';\nimport { ApplicationModule } from 'dependency/common/ApplicationModule';\nimport { BaseContainer } from 'dependency/BaseContainer';\n\nimport { ExpressApplication } from 'ui/common/config/application/express/ExpressApplication';\nimport { errorHandler } from 'ui/common/config/errors/handlers/errorHandler';\nimport { UI_APPLICATION_IDENTIFIERS } from 'ui/UIModuleSymbols';\n\nimport { AuthenticationModule } from 'dependency/shared/Authentication/AuthenticationModule';\nimport { UserModule } from 'dependency/shared/User/UserModule';\nimport { RoleModule } from 'dependency/Administration/RoleModule';\nimport { ApplicationAuthProvider } from 'ui/common/config/application/express/auth/middlewares/ApplicationAuthProvider';\nimport { CoffeeModule } from 'dependency/shared/Coffee/CoffeeModule';\nimport { ReviewModule } from 'dependency/shared/Review/ReviewModule';\n\nexport class AppContainer extends BaseContainer {\n  constructor() {\n    super({\n      defaultScope: 'Singleton',\n      skipBaseClassChecks: true,\n    });\n  }\n\n  public init(): void {\n    this.provideCommonModule();\n\n    this.provideApplicationModule();\n    this.provideInversifyExpressApplication();\n    this.initializeSharedNamespace();\n\n    this.provideUserModule();\n    this.provideRoleModule();\n    this.provideCoffeModule();\n    this.provideReviewModule();\n  }\n\n  private initializeSharedNamespace(): void {\n    this.provideAuthenticationModule();\n  }\n\n  private provideCommonModule(): void {\n    this.load(new CommonModule());\n  }\n\n  private provideApplicationModule(): void {\n    this.load(new ApplicationModule());\n  }\n\n  private provideAuthenticationModule(): void {\n    this.load(new AuthenticationModule());\n  }\n\n  private provideUserModule(): void {\n    this.load(new UserModule());\n  }\n\n  private provideReviewModule(): void {\n    this.load(new ReviewModule());\n  }\n\n  private provideCoffeModule(): void {\n    this.load(new CoffeeModule());\n  }\n\n  private provideRoleModule(): void {\n    this.load(new RoleModule());\n  }\n\n  private provideInversifyExpressApplication(): void {\n    this.bind<InversifyExpressServer>(\n      UI_APPLICATION_IDENTIFIERS.INVERSIFY_APPLICATION\n    ).toConstantValue(\n      new InversifyExpressServer(\n        this,\n        this.get<express.Router>(UI_APPLICATION_IDENTIFIERS.EXPRESS_ROUTER),\n        { rootPath: '/' },\n        this.get<ExpressApplication>(\n          UI_APPLICATION_IDENTIFIERS.EXPRESS_APPLICATION\n        ).getApplication(),\n        ApplicationAuthProvider\n      ).setErrorConfig(errorHandler)\n    );\n  }\n}\n","import { ContainerModule, interfaces } from 'inversify';\n\nexport abstract class BaseModule extends ContainerModule {\n  public abstract init(bind: interfaces.Bind): void;\n}\n","import { Mapper } from '@wufe/mapper';\nimport { IMapperConfiguration } from '@wufe/mapper/types/conf/mapper.configuration';\n\nimport { injectable } from 'inversify';\n\nimport { RoleEntityToRoleDomain } from 'infrastructure/database/mappings/Role/RoleEntityToRoleDomain';\nimport { UserEntityToUserDomain } from 'infrastructure/database/mappings/User/UserEntityToUserDomain';\nimport { CoffeeEntityToCoffeeDomain } from 'infrastructure/database/mappings/Coffee/CoffeEntityToCoffeeDomain';\nimport { ReviewEntityToReviewDomain } from 'infrastructure/database/mappings/Review/ReviewEntityToReviewDomain';\n\n@injectable()\nexport class DBMapper {\n  public readonly mapper: Mapper;\n\n  constructor() {\n    this.mapper = new Mapper().withConfiguration(\n      (configuration: IMapperConfiguration) =>\n        configuration\n          .shouldIgnoreSourcePropertiesIfNotInDestination(true)\n          .shouldAutomaticallyMapArrays(true)\n    );\n\n    this.initialize();\n  }\n\n  private initialize(): void {\n    UserEntityToUserDomain().configureMapping(this.mapper);\n    RoleEntityToRoleDomain().configureMapping(this.mapper);\n    CoffeeEntityToCoffeeDomain().configureMapping(this.mapper);\n    ReviewEntityToReviewDomain().configureMapping(this.mapper);\n  }\n}\n","export class Role {\n  constructor(public readonly id: string, public readonly name: string) {}\n}\n","export const DOMAIN_APPLICATION_SERVICE_IDENTIFIERS = {\n  USER_SERVICE: Symbol.for('UserService'),\n  AUTHENTICATION_SERVICE: Symbol.for('AuthenticationService'),\n  COFFEE_SERVICE: Symbol.for('CoffeeService'),\n  REVIEW_SERVICE: Symbol.for('ReviewService'),\n};\n\nexport const DOMAIN_MAPPING_IDENTIFIERS = {\n  USER_DOMAIN: Symbol.for('UserDomain'),\n  ROLE_DOMAIN: Symbol.for('RoleDomain'),\n  COFFEE_DOMAIN: Symbol.for('CoffeeDomain'),\n  REVIEW_DOMAIN: Symbol.for('ReviewDomain'),\n};\n\nexport const DOMAIN_REPOSITORY_IDENTIFIERS = {\n  ROLE_REPOSITORY: Symbol.for('RoleRepository'),\n  USER_REPOSITORY: Symbol.for('UserRepository'),\n  COFFEE_REPOSITORY: Symbol.for('CoffeeRepository'),\n  REVIEW_REPOSITORY: Symbol.for('ReviewRepository'),\n};\n\nexport const DOMAIN_UNIT_OF_WORK_IDENTIFIERS = {\n  USER_UNIT_OF_WORK: Symbol.for('UserUnitOfWork'),\n  COFFEE_UNIT_OF_WORK: Symbol.for('CoffeeUnitOfWork'),\n};\n","export const DATABASE_IDENTIFIERS = {\n  ORM: Symbol.for('Orm'),\n};\n\nexport const INFRASTRUCTURE_IDENTIFIERS = {\n  DB_MAPPER: Symbol.for('DBMapper'),\n};\n\nexport const DATABASE_MAPPING_IDENTIFIERS = {\n  USER_ENTITY: Symbol.for('UserEntity'),\n  ROLE_ENTITY: Symbol.for('RoleEntity'),\n  COFFEE_ENTITY: Symbol.for('CoffeeEntity'),\n  REVIEW_ENTITY: Symbol.for('ReviewEntity'),\n};\n","import { Mapper } from '@wufe/mapper';\n\nimport { IMapping } from 'core/common/mapper/IMapping';\nimport { Role } from 'core/domain/Role/Role';\nimport { DOMAIN_MAPPING_IDENTIFIERS } from 'core/CoreModuleSymbols';\nimport { DATABASE_MAPPING_IDENTIFIERS } from 'infrastructure/InfrastructureModuleSymbols';\nimport { Role as RoleEntity } from 'infrastructure/database/entities/Role';\n\nexport const RoleEntityToRoleDomain = (): IMapping => ({\n  configureMapping(mapper: Mapper): void {\n    mapper.createMap<RoleEntity, Role>(\n      {\n        destination: DOMAIN_MAPPING_IDENTIFIERS.ROLE_DOMAIN,\n        source: DATABASE_MAPPING_IDENTIFIERS.ROLE_ENTITY,\n      },\n      Role\n    );\n  },\n});\n","export class User {\n  constructor(\n    public readonly id: string,\n    public readonly nickname: string,\n    public readonly email: string,\n    public readonly role: string,\n    public readonly password: string,\n    public readonly lastName?: string,\n    public readonly firstName?: string\n  ) {}\n}\n","import { Mapper } from '@wufe/mapper';\n\nimport { IMapping } from 'core/common/mapper/IMapping';\n\nimport { DOMAIN_MAPPING_IDENTIFIERS } from 'core/CoreModuleSymbols';\n\nimport { User } from 'core/domain/User/User';\nimport { User as UserEntity } from 'infrastructure/database/entities/User';\n\nimport { DATABASE_MAPPING_IDENTIFIERS } from 'infrastructure/InfrastructureModuleSymbols';\n\nexport const UserEntityToUserDomain = (): IMapping => ({\n  configureMapping(mapper: Mapper): void {\n    mapper\n      .createMap<UserEntity, User>(\n        {\n          destination: DOMAIN_MAPPING_IDENTIFIERS.USER_DOMAIN,\n          source: DATABASE_MAPPING_IDENTIFIERS.USER_ENTITY,\n        },\n        User\n      )\n      .forMember('role', (opt) => opt.mapFrom((src) => src.role.name));\n  },\n});\n","export class Coffee {\n  constructor(\n    public readonly id: string,\n    public readonly brand: string,\n    public readonly name: string,\n    public readonly type: string,\n    public readonly imgUrl: string,\n    public readonly description: string,\n    public readonly burntLvl: string,\n    public readonly createdAt: Date,\n    public readonly reviews: number,\n    public readonly reflink: string\n  ) {}\n}\n","import { Mapper } from '@wufe/mapper';\n\nimport { IMapping } from 'core/common/mapper/IMapping';\n\nimport { DOMAIN_MAPPING_IDENTIFIERS } from 'core/CoreModuleSymbols';\nimport { Coffee } from 'core/domain/Coffee/Coffee';\n\nimport { Coffee as CoffeeEntity } from 'infrastructure/database/entities/Coffee';\nimport { DATABASE_MAPPING_IDENTIFIERS } from 'infrastructure/InfrastructureModuleSymbols';\n\nexport const CoffeeEntityToCoffeeDomain = (): IMapping => ({\n  configureMapping(mapper: Mapper): void {\n    mapper.createMap<CoffeeEntity, Coffee>(\n      {\n        destination: DOMAIN_MAPPING_IDENTIFIERS.COFFEE_DOMAIN,\n        source: DATABASE_MAPPING_IDENTIFIERS.COFFEE_ENTITY,\n      },\n      Coffee\n    );\n  },\n});\n","export class Review {\n  constructor(\n    public readonly id: string,\n    public readonly look: number,\n    public readonly smell: number,\n    public readonly taste: number,\n    public readonly rating: number,\n    public readonly coffeeId: string,\n    public readonly userId: string\n  ) {}\n}\n","import { Mapper } from '@wufe/mapper';\n\nimport { IMapping } from 'core/common/mapper/IMapping';\nimport { DOMAIN_MAPPING_IDENTIFIERS } from 'core/CoreModuleSymbols';\nimport { Review } from 'core/domain/Review/Review';\nimport { Review as ReviewEntity } from 'infrastructure/database/entities/Review';\nimport { DATABASE_MAPPING_IDENTIFIERS } from 'infrastructure/InfrastructureModuleSymbols';\n\nexport const ReviewEntityToReviewDomain = (): IMapping => ({\n  configureMapping(mapper: Mapper): void {\n    mapper.createMap<ReviewEntity, Review>(\n      {\n        destination: DOMAIN_MAPPING_IDENTIFIERS.REVIEW_DOMAIN,\n        source: DATABASE_MAPPING_IDENTIFIERS.REVIEW_ENTITY,\n      },\n      Review\n    );\n  },\n});\n","import { injectable } from 'inversify';\nimport { createConnection } from 'typeorm';\n\nimport {\n  initializeTransactionalContext,\n  patchTypeORMRepositoryWithBaseRepository,\n} from 'typeorm-transactional-cls-hooked';\n\nimport { IOrm } from 'infrastructure/database/orm/IOrm';\n\n@injectable()\nexport class CROrm implements IOrm {\n  public async initialize(): Promise<void> {\n    await createConnection(process.env.ORM_CONNECTION || '');\n\n    initializeTransactionalContext();\n    patchTypeORMRepositoryWithBaseRepository();\n  }\n}\n","import { injectable } from 'inversify';\nimport { Mapper } from '@wufe/mapper';\n\nimport { UserDomainToUserUI } from 'ui/common/mappings/User/UserDomainToUserUI';\n\n@injectable()\nexport class UIMapper {\n  public readonly mapper: Mapper;\n\n  constructor() {\n    this.mapper = new Mapper().withConfiguration((configuration) =>\n      configuration\n        .shouldIgnoreSourcePropertiesIfNotInDestination(true)\n        .shouldAutomaticallyMapArrays(true)\n    );\n\n    this.initialize();\n  }\n\n  private initialize(): void {\n    UserDomainToUserUI().configureMapping(this.mapper);\n  }\n}\n","export const UI_IDENTIFIERS = {\n  UI_MAPPER: Symbol.for('UIMapper'),\n};\n\nexport const UI_APPLICATION_IDENTIFIERS = {\n  EXPRESS: Symbol.for('Express'),\n  EXPRESS_ROUTER: Symbol.for('ExpressRouter'),\n\n  EXPRESS_APPLICATION: Symbol.for('ExpressApplication'),\n  INVERSIFY_APPLICATION: Symbol.for('InversifyExpressApplication'),\n  JWT_TOKEN_UTIL: Symbol.for('JWTTokenUtil'),\n  JWT_AUTHENTICATION_HANDLER: Symbol.for('JWTAuthenticationHandler'),\n\n  LOGGER: Symbol.for('Logger'),\n  LOGGER_FORMAT: Symbol.for('WinstonFormat'),\n  LOGGER_WINSTON: Symbol.for('WinstonLogger'),\n};\n\nexport const UI_MAPPINGS_IDENTIFIERS = {\n  USER_UI: Symbol.for('UserUI'),\n};\n","import { Mapper } from '@wufe/mapper';\n\nimport { IMapping } from 'core/common/mapper/IMapping';\n\nimport { User } from 'core/domain/User/User';\nimport { DOMAIN_MAPPING_IDENTIFIERS } from 'core/CoreModuleSymbols';\n\nimport { User as UserUI } from 'ui/common/models/User';\nimport { UI_MAPPINGS_IDENTIFIERS } from 'ui/UIModuleSymbols';\n\nexport const UserDomainToUserUI = (): IMapping => ({\n  configureMapping(mapper: Mapper): void {\n    mapper.createMap<User, UserUI>(\n      {\n        destination: UI_MAPPINGS_IDENTIFIERS.USER_UI,\n        source: DOMAIN_MAPPING_IDENTIFIERS.USER_DOMAIN,\n      },\n      User\n    );\n  },\n});\n","import { interfaces } from 'inversify';\n\nimport { BaseModule } from 'dependency/BaseModule';\n\nimport { DBMapper } from 'infrastructure/database/mappings/DBMapper';\nimport { CROrm } from 'infrastructure/database/orm/CROrm';\nimport { IOrm } from 'infrastructure/database/orm/IOrm';\n\nimport {\n  DATABASE_IDENTIFIERS,\n  INFRASTRUCTURE_IDENTIFIERS,\n} from 'infrastructure/InfrastructureModuleSymbols';\n\nimport { UIMapper } from 'ui/common/mappings/UIMapper';\nimport { UI_IDENTIFIERS } from 'ui/UIModuleSymbols';\n\nexport class CommonModule extends BaseModule {\n  constructor() {\n    super((bind: interfaces.Bind) => {\n      this.init(bind);\n    });\n  }\n\n  public init(bind: interfaces.Bind): void {\n    this.provideOrm(bind);\n\n    this.provideDBMapper(bind);\n    this.provideUIMapper(bind);\n  }\n\n  private provideUIMapper(bind: interfaces.Bind): void {\n    bind<UIMapper>(UI_IDENTIFIERS.UI_MAPPER).to(UIMapper);\n  }\n\n  private provideDBMapper(bind: interfaces.Bind): void {\n    bind<DBMapper>(INFRASTRUCTURE_IDENTIFIERS.DB_MAPPER).to(DBMapper);\n  }\n\n  private provideOrm(bind: interfaces.Bind): void {\n    bind<IOrm>(DATABASE_IDENTIFIERS.ORM).to(CROrm);\n  }\n}\n","import { Format } from 'logform';\nimport { createLogger, format, Logger } from 'winston';\nimport express from 'express';\nimport { interfaces } from 'inversify';\nimport 'ui/index';\n\nimport { BaseModule } from 'dependency/BaseModule';\n\nimport { IApplication } from 'ui/common/config/application/common/IApplication';\nimport { ExpressApplication } from 'ui/common/config/application/express/ExpressApplication';\nimport { ILogger } from 'ui/common/config/logger/ILogger';\nimport { WinstonLogger } from 'ui/common/config/logger/WinstonLogger';\nimport { UI_APPLICATION_IDENTIFIERS } from 'ui/UIModuleSymbols';\nimport { LOG_LEVEL } from 'ui/common/config/consts/variables';\nimport { IAuthenticationHandler } from 'ui/common/config/application/common/auth/IAuthenticationHandler';\nimport { JWTAuthenticationHandler } from 'ui/common/config/application/express/auth/JWTAuthenticationHandler';\nimport { JWTTokenUtil } from 'ui/common/config/application/common/auth/utils/JWTTokenUtil';\n\nexport class ApplicationModule extends BaseModule {\n  constructor() {\n    super((bind: interfaces.Bind): void => {\n      this.init(bind);\n    });\n  }\n\n  public init(bind: interfaces.Bind): void {\n    this.provideExpress(bind);\n    this.provideExpressRouter(bind);\n    this.provideExpressApplication(bind);\n\n    this.provideWinstonLogger(bind);\n    this.provideLoggerFormat(bind);\n    this.provideLogger(bind);\n\n    this.provideJWTAuthenticationHandler(bind);\n    this.provideJWTTokenUtil(bind);\n  }\n\n  private provideExpress(bind: interfaces.Bind): void {\n    bind<express.Application>(\n      UI_APPLICATION_IDENTIFIERS.EXPRESS\n    ).toConstantValue(express());\n  }\n\n  private provideExpressRouter(bind: interfaces.Bind): void {\n    bind<express.Router>(\n      UI_APPLICATION_IDENTIFIERS.EXPRESS_ROUTER\n    ).toConstantValue(\n      express.Router({\n        caseSensitive: false,\n        mergeParams: false,\n        strict: false,\n      })\n    );\n  }\n\n  private provideExpressApplication(bind: interfaces.Bind): void {\n    bind<IApplication>(UI_APPLICATION_IDENTIFIERS.EXPRESS_APPLICATION).to(\n      ExpressApplication\n    );\n  }\n\n  private provideWinstonLogger(bind: interfaces.Bind): void {\n    bind<ILogger>(UI_APPLICATION_IDENTIFIERS.LOGGER_WINSTON).to(WinstonLogger);\n  }\n\n  private provideLoggerFormat(bind: interfaces.Bind): void {\n    bind<Format>(UI_APPLICATION_IDENTIFIERS.LOGGER_FORMAT).toConstantValue(\n      format.combine(\n        format.colorize({\n          all: true,\n        }),\n        format.label({\n          label: '[LOGGER]',\n        }),\n        format.timestamp({\n          format: 'YY-MM-DD HH:MM:SS',\n        }),\n        format.printf(\n          (info) =>\n            `${info.label} ${info.timestamp} [${info.level}] : ${info.message} `\n        )\n      )\n    );\n  }\n\n  private provideLogger(bind: interfaces.Bind): void {\n    bind<Logger>(UI_APPLICATION_IDENTIFIERS.LOGGER).toConstantValue(\n      createLogger({\n        exitOnError: false,\n        level: LOG_LEVEL,\n      })\n    );\n  }\n\n  private provideJWTTokenUtil(bind: interfaces.Bind): void {\n    bind<JWTTokenUtil>(UI_APPLICATION_IDENTIFIERS.JWT_TOKEN_UTIL).to(\n      JWTTokenUtil\n    );\n  }\n\n  private provideJWTAuthenticationHandler(bind: interfaces.Bind): void {\n    bind<IAuthenticationHandler>(\n      UI_APPLICATION_IDENTIFIERS.JWT_AUTHENTICATION_HANDLER\n    ).to(JWTAuthenticationHandler);\n  }\n}\n","import { OK } from 'http-status-codes';\n\nimport { inject } from 'inversify';\n\nimport {\n  BaseHttpController,\n  controller,\n  httpGet,\n  httpPost,\n  requestBody,\n} from 'inversify-express-utils';\n\nimport { Request } from 'express';\n\nimport { IUserService } from 'core/applicationServices/User/IUserService';\nimport { RemoveUserCommand } from 'core/applicationServices/User/requests/command/RemoveUserCommand';\nimport { DOMAIN_APPLICATION_SERVICE_IDENTIFIERS } from 'core/CoreModuleSymbols';\n\nimport { RemoveUserCommandBody } from 'ui/portal/User/rest/v1/requests/command/RemoveUserCommandBody';\nimport { isAuthenticated } from 'ui/common/config/application/express/auth/middlewares/isAuthenticated';\nimport { USER_ROLE } from 'core/domain/User/UserRole';\nimport { getCurrentUser } from 'ui/common/config/application/express/auth/utils/getHttpContext';\n\n@controller('/v1/user')\nexport class UserController extends BaseHttpController {\n  constructor(\n    @inject(DOMAIN_APPLICATION_SERVICE_IDENTIFIERS.USER_SERVICE)\n    private readonly UserService: IUserService\n  ) {\n    super();\n  }\n\n  @httpGet('/')\n  public async get() {\n    return this.json(OK);\n  }\n\n  @httpGet('/currentUser')\n  public async getCurrentUser(req: Request) {\n    const user = getCurrentUser(req);\n\n    return this.json(user);\n  }\n\n  @httpPost('/removeUser', isAuthenticated({ role: USER_ROLE.MEMBER }))\n  public async Remove(@requestBody() { id }: RemoveUserCommandBody) {\n    return this.UserService.removeUser(new RemoveUserCommand(id));\n  }\n}\n","export class RemoveUserCommand {\n  constructor(public readonly id: string) {}\n}\n","import * as express from 'express';\n\nimport { FORBIDDEN, getStatusText, UNAUTHORIZED } from 'http-status-codes';\n\nimport { getCurrentUser } from 'ui/common/config/application/express/auth/utils/getHttpContext';\nimport { UserInterfaceError } from 'ui/common/config/errors/UserInterfaceError';\n\nexport const isAuthenticated =\n  (config?: { role: string }) =>\n  async (\n    req: express.Request,\n    _res: express.Response,\n    next: express.NextFunction\n  ): Promise<void> => {\n    const user = getCurrentUser(req);\n    // eslint-disable-next-line no-console\n    if (!user) {\n      next(\n        new UserInterfaceError(\n          UNAUTHORIZED,\n          getStatusText(UNAUTHORIZED).toUpperCase()\n        )\n      );\n      return;\n    }\n\n    const isAuthenticatedUser = await user.isAuthenticated();\n\n    if (!isAuthenticatedUser) {\n      next(\n        new UserInterfaceError(\n          UNAUTHORIZED,\n          getStatusText(UNAUTHORIZED).toUpperCase()\n        )\n      );\n      return;\n    }\n\n    if (config) {\n      const isInRole = await user.isInRole(config.role);\n      if (!isInRole) {\n        next(\n          new UserInterfaceError(\n            FORBIDDEN,\n            getStatusText(FORBIDDEN).toUpperCase()\n          )\n        );\n        return;\n      }\n    }\n    next();\n  };\n","import { interfaces } from 'inversify-express-utils';\nimport { Request } from 'express';\n\nimport { Principal } from 'ui/common/config/application/express/auth/models/Principal';\n\nexport const getCurrentUser = (request: Request): Principal => {\n  const httpContext: interfaces.HttpContext = Reflect.getMetadata(\n    'inversify-express-utils:httpcontext',\n    request\n  );\n  // eslint-disable-next-line no-console\n  return httpContext.user;\n};\n","export class BaseError implements Error {\n  constructor(\n    public readonly code?: string,\n    public readonly message: string = '',\n    public readonly name: string = ''\n  ) {}\n}\n","import { BaseError } from 'core/common/errors/BaseError';\n\nexport class UserInterfaceError extends BaseError {\n  constructor(\n    public readonly status: number,\n    public readonly code?: string,\n    public readonly message: string = '',\n    public readonly name: string = ''\n  ) {\n    super(code, message, name);\n  }\n}\n","import {\n  BaseHttpController,\n  controller,\n  httpPost,\n  requestBody,\n  results,\n} from 'inversify-express-utils';\n\nimport { OK } from 'http-status-codes';\n\nimport { inject } from 'inversify';\n\nimport { SignUpCommand } from 'core/applicationServices/Authentication/requests/repository/command/SignUpCommand';\nimport {\n  DOMAIN_APPLICATION_SERVICE_IDENTIFIERS,\n  DOMAIN_MAPPING_IDENTIFIERS,\n} from 'core/CoreModuleSymbols';\nimport { User } from 'core/domain/User/User';\nimport { IAuthenticationService } from 'core/applicationServices/Authentication/IAuthenticationService';\n\nimport { UIMapper } from 'ui/common/mappings/UIMapper';\nimport {\n  UI_APPLICATION_IDENTIFIERS,\n  UI_IDENTIFIERS,\n  UI_MAPPINGS_IDENTIFIERS,\n} from 'ui/UIModuleSymbols';\nimport { User as UserUI } from 'ui/common/models/User';\nimport { SignUpCommandBody } from 'ui/portal/Authentication/rest/v1/requests/command/SignUpCommandBody';\n\nimport { AuthenticationQueryBody } from 'ui/portal/Authentication/rest/v1/requests/query/AuthenticationQueryBody';\nimport { IAuthenticationHandler } from 'ui/common/config/application/common/auth/IAuthenticationHandler';\nimport { AuthenticationQuery } from 'core/applicationServices/Authentication/requests/handler/query/AuthenticationQuery';\n\n@controller('/v1/auth')\nexport class AuthenticationController extends BaseHttpController {\n  constructor(\n    @inject(DOMAIN_APPLICATION_SERVICE_IDENTIFIERS.AUTHENTICATION_SERVICE)\n    private readonly authenticationService: IAuthenticationService,\n    @inject(UI_APPLICATION_IDENTIFIERS.JWT_AUTHENTICATION_HANDLER)\n    private readonly authenticationHandler: IAuthenticationHandler,\n    @inject(UI_IDENTIFIERS.UI_MAPPER)\n    private readonly uiMapper: UIMapper\n  ) {\n    super();\n  }\n\n  @httpPost('/signup')\n  public async create(\n    @requestBody()\n    { nickname, email, password }: SignUpCommandBody\n  ): Promise<results.JsonResult> {\n    const user = await this.authenticationService.signUp(\n      new SignUpCommand(nickname, email, password)\n    );\n\n    const createdUser = this.uiMapper.mapper.map<User, UserUI>(\n      {\n        destination: UI_MAPPINGS_IDENTIFIERS.USER_UI,\n        source: DOMAIN_MAPPING_IDENTIFIERS.USER_DOMAIN,\n      },\n      user\n    );\n    return this.json(createdUser, OK);\n  }\n\n  @httpPost('/')\n  public async index(\n    @requestBody() { email, password }: AuthenticationQueryBody\n  ): Promise<results.JsonResult> {\n    const authentication = await this.authenticationHandler.authenticate(\n      new AuthenticationQuery(email, password)\n    );\n\n    return this.json(authentication, OK);\n  }\n}\n","export class SignUpCommand {\n  constructor(\n    public readonly nickname: string,\n    public readonly email: string,\n    public readonly password: string\n  ) {}\n}\n","export class AuthenticationQuery {\n  constructor(\n    public readonly email: string,\n    public readonly password: string\n  ) {}\n}\n","import { inject } from 'inversify';\nimport {\n  BaseHttpController,\n  controller,\n  httpDelete,\n  httpGet,\n  httpPost,\n  httpPut,\n  requestBody,\n  requestParam,\n  results,\n} from 'inversify-express-utils';\nimport { OK } from 'http-status-codes';\n\nimport { DOMAIN_APPLICATION_SERVICE_IDENTIFIERS } from 'core/CoreModuleSymbols';\nimport { ICoffeeService } from 'core/applicationServices/Coffee/ICoffeeService';\nimport { isAuthenticated } from 'ui/common/config/application/express/auth/middlewares/isAuthenticated';\nimport { USER_ROLE } from 'core/domain/User/UserRole';\nimport { CreateCoffeeCommandBody } from 'ui/portal/Coffee/requests/command/CreateCoffeeCommandBody';\nimport { DeleteCoffeeCommand } from 'core/applicationServices/Coffee/requests/command/DeleteCoffeeCommand';\nimport { DeleteCoffeeCommandBody } from 'ui/portal/Coffee/requests/command/DeleteCoffeeCommandBody';\nimport { AddReviewCommandBody } from 'ui/portal/Coffee/requests/command/AddReviewCommandBody';\nimport { FindOneCoffeeRepositoryQuery } from 'core/domainServices/Coffee/requests/UnitOfWork/query/FindCoffeeRepositoryQuery';\nimport { CreateCoffeeCommand } from 'core/applicationServices/Coffee/requests/command/AddCoffeeCommand';\nimport { UpdateCoffeeCommand } from 'core/applicationServices/Coffee/requests/command/UpdateCoffeeCommand';\nimport { FindOneCoffeeRepositoryQueryBody } from 'ui/portal/Coffee/requests/query/FindOneCoffeeRepositoryQueryBody';\nimport { UpdateCoffeeCommandBody } from 'ui/portal/Coffee/requests/command/UpdateCoffeeCommandBody';\nimport { GetUserReviewsQueryBody } from 'ui/portal/Coffee/requests/query/GetUserReviewsQueryBody';\nimport { IReviewService } from 'core/applicationServices/Review/IReviewService';\nimport { GetUserReviewsQuery } from 'core/applicationServices/Review/requests/query/GetUserReviewsQuery';\nimport { AddReviewCommand } from 'core/applicationServices/Review/requests/command/AddReviewCommand';\nimport { UpdateReviewCommand } from 'core/applicationServices/Review/requests/command/UpdateReviewCommand';\nimport { UpdateReviewCommandBody } from 'ui/portal/Coffee/requests/command/UpdateReviewCommandBody';\nimport { DeleteReviewCommandBody } from 'ui/portal/Coffee/requests/command/DeleteReviewCommandBody';\nimport { DeleteReviewCommand } from 'core/applicationServices/Review/requests/command/DeleteReviewCommand';\n\n@controller('/v1/coffee')\nexport class CoffeeController extends BaseHttpController {\n  constructor(\n    @inject(DOMAIN_APPLICATION_SERVICE_IDENTIFIERS.COFFEE_SERVICE)\n    private readonly coffeeService: ICoffeeService,\n    @inject(DOMAIN_APPLICATION_SERVICE_IDENTIFIERS.REVIEW_SERVICE)\n    private readonly reviewService: IReviewService\n  ) {\n    super();\n  }\n\n  @httpGet('/')\n  async GetAll(): Promise<results.JsonResult> {\n    const result = await this.coffeeService.findAll();\n\n    return this.json(result, OK);\n  }\n\n  @httpGet('/:id')\n  async get(\n    @requestParam('id') { coffeeId }: FindOneCoffeeRepositoryQueryBody\n  ): Promise<results.JsonResult> {\n    const result = await this.coffeeService.findOne(\n      new FindOneCoffeeRepositoryQuery(coffeeId)\n    );\n    return this.json(result, OK);\n  }\n\n  @httpPost('/create', isAuthenticated({ role: USER_ROLE.MEMBER }))\n  async add(\n    @requestBody()\n    {\n      brand,\n      name,\n      type,\n      imgUrl,\n      description,\n      burntLvl,\n      reflink,\n      CoffeeStatus,\n    }: CreateCoffeeCommandBody\n  ): Promise<results.JsonResult> {\n    const coffeeCommand = new CreateCoffeeCommand(\n      brand,\n      name,\n      type,\n      imgUrl,\n      description,\n      burntLvl,\n      reflink || '',\n      CoffeeStatus\n    );\n\n    const result = await this.coffeeService.create(coffeeCommand);\n    return this.json(result, OK);\n  }\n\n  @httpPut('/:id/update', isAuthenticated({ role: USER_ROLE.MEMBER }))\n  async update(\n    @requestParam('id') coffeeId: string,\n    @requestBody() { coffee }: UpdateCoffeeCommandBody\n  ) {\n    const result = await this.coffeeService.update(\n      new UpdateCoffeeCommand(coffee, coffeeId)\n    );\n\n    return this.json(result, OK);\n  }\n\n  @httpDelete('/:id', isAuthenticated({ role: USER_ROLE.MEMBER }))\n  async delete(\n    @requestParam() { id }: DeleteCoffeeCommandBody\n  ): Promise<results.JsonResult> {\n    const result = await this.coffeeService.delete(new DeleteCoffeeCommand(id));\n\n    return this.json(result, OK);\n  }\n\n  @httpGet('/:userId/reviews/', isAuthenticated({ role: USER_ROLE.MEMBER }))\n  async GetUserReviews(@requestParam() { userId }: GetUserReviewsQueryBody) {\n    const result = await this.reviewService.getAll(\n      new GetUserReviewsQuery(userId)\n    );\n    return this.json(result, OK);\n  }\n\n  @httpPost(\n    '/:coffeeId/reviews/add',\n    isAuthenticated({ role: USER_ROLE.MEMBER })\n  )\n  async addReview(\n    @requestParam('coffeeId') coffeeId: string,\n    @requestBody()\n    { rating, look, smell, taste, userId }: AddReviewCommandBody\n  ): Promise<results.JsonResult> {\n    const result = await this.reviewService.add(\n      new AddReviewCommand(userId, coffeeId, rating, look, smell, taste)\n    );\n    return this.json(result, OK);\n  }\n\n  @httpPut(\n    '/:coffeeId/reviews/:reviewId/update',\n    isAuthenticated({ role: USER_ROLE.MEMBER })\n  )\n  async updateReview(\n    @requestParam('reviewId') reviewId: string,\n    @requestBody() { review }: UpdateReviewCommandBody\n  ) {\n    const result = this.reviewService.update(\n      new UpdateReviewCommand(review, reviewId)\n    );\n\n    return this.json(result, OK);\n  }\n\n  @httpDelete(\n    '/:id/reviews/delete',\n    isAuthenticated({ role: USER_ROLE.MEMBER })\n  )\n  async deleteReview(\n    @requestParam('reviewId') { reviewId }: DeleteReviewCommandBody\n  ) {\n    const result = this.reviewService.delete(new DeleteReviewCommand(reviewId));\n\n    return this.json(result, OK);\n  }\n\n  // @httpPost('/search')\n  // async search(@requestParam() { sortBy, skip, take }: SearchQueryBody) {\n  //   const _result = await this.CoffeeService.sortAndPaginate(\n  //     new SearchQuery(sortBy, skip, take)\n  //   );\n  // }\n}\n","export class DeleteCoffeeCommand {\n  constructor(public readonly id: string) {}\n}\n","export class FindOneCoffeeRepositoryQuery {\n  constructor(public readonly id: string) {}\n}\n","export class CreateCoffeeCommand {\n  constructor(\n    public readonly brand: string,\n    public readonly name: string,\n    public readonly type: string,\n    public readonly imgUrl: string,\n    public readonly description: string,\n    public readonly burntLvl: string,\n    public readonly CoffeeStatus: string,\n    public readonly reflink?: string\n  ) {}\n}\n","import { Coffee } from 'core/domain/Coffee/Coffee';\n\nexport class UpdateCoffeeCommand {\n  constructor(\n    public readonly coffee: Partial<Coffee>,\n    public readonly coffeeId: string\n  ) {}\n}\n","export class GetUserReviewsQuery {\n  constructor(public readonly userId: string) {}\n}\n","export class AddReviewCommand {\n  constructor(\n    public readonly userId: string,\n    public readonly coffeeId: string,\n    public readonly rating: number,\n    public readonly look: number,\n    public readonly smell: number,\n    public readonly taste: number\n  ) {}\n}\n","import { Review } from 'core/domain/Review/Review';\n\nexport class UpdateReviewCommand {\n  constructor(\n    public readonly review: Partial<Review>,\n    public readonly reviewId: string\n  ) {}\n}\n","export class DeleteReviewCommand {\n  constructor(public readonly reviewId: string) {}\n}\n","import express from 'express';\nimport morgan from 'morgan';\nimport methodOverride from 'method-override';\nimport helmet from 'helmet';\nimport cors from 'cors';\nimport swaggerUi from 'swagger-ui-express';\nimport { inject, injectable } from 'inversify';\n\nimport { IApplication } from 'ui/common/config/application/common/IApplication';\nimport { BaseApplication } from 'ui/common/config/application/common/BaseApplication';\nimport { ILogger } from 'ui/common/config/logger/ILogger';\nimport {\n  SWAGGER_BASE_PATH,\n  SWAGGER_HOST,\n} from 'ui/common/config/consts/variables';\nimport { UI_APPLICATION_IDENTIFIERS } from 'ui/UIModuleSymbols';\n\nimport swaggerDocument from 'ui/common/config/swagger.json';\n\n@injectable()\nexport class ExpressApplication\n  extends BaseApplication<express.Application>\n  implements IApplication\n{\n  private readonly logger: ILogger;\n\n  private readonly router: express.Router;\n\n  constructor(\n    @inject(UI_APPLICATION_IDENTIFIERS.LOGGER_WINSTON) logger: ILogger,\n    @inject(UI_APPLICATION_IDENTIFIERS.EXPRESS) app: express.Application,\n    @inject(UI_APPLICATION_IDENTIFIERS.EXPRESS_ROUTER) router: express.Router\n  ) {\n    super(app);\n    this.logger = logger;\n    this.router = router;\n  }\n\n  public initialize(): void {\n    this.initializeSecurity();\n    this.initializeBodyParsers();\n    if (process.env.NODE_ENV !== 'test') {\n      this.initializeLogging();\n    }\n    this.initializeHandlers();\n    this.initializePlugins();\n    this.initializeExtensions();\n  }\n\n  public initializeSecurity(): void {\n    this.app.use(express.urlencoded({ extended: false }));\n  }\n\n  public initializeBodyParsers(): void {\n    this.app.use(express.json());\n  }\n\n  public initializeLogging(): void {\n    this.logger.initialize();\n    morgan.token(\n      'body',\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (req): string => `\\nREQUEST BODY: ${JSON.stringify((req as any).body)}`\n    );\n    /**\n     * @description you may consider what you want to log on production\n     * keep in mind to obfuscate sensitive data if you want to log request or response bodies\n     * format can be moved to some other place for easier configuration\n     */\n    this.app.use(\n      morgan(\n        ':method :url HTTP/:http-version :status :response-time ms :referrer :user-agent - :body',\n        { stream: this.logger }\n      )\n    );\n  }\n\n  public initializeHandlers(): void {\n    Error('NOT IMPLEMENTED');\n  }\n\n  public initializePlugins(): void {\n    this.app.use(methodOverride());\n    this.app.use(helmet());\n    this.app.use(cors());\n  }\n\n  public initializeExtensions(): void {\n    if (SWAGGER_HOST) {\n      swaggerDocument.host = SWAGGER_HOST;\n      this.app.use(\n        SWAGGER_BASE_PATH,\n        swaggerUi.serve,\n        swaggerUi.setup(swaggerDocument)\n      );\n    }\n  }\n}\n","export abstract class BaseApplication<T> {\n  protected readonly app: T;\n\n  protected constructor(app: T) {\n    this.app = app;\n  }\n\n  public abstract initialize(): void;\n\n  public getApplication(): T {\n    return this.app;\n  }\n}\n","import * as dotenv from 'dotenv';\n\ndotenv.config();\n\nexport const APP_TOKEN_SECRET = process.env.APP_TOKEN_SECRET || '';\nexport const APP_TOKEN_LIFE = process.env.APP_TOKEN_LIFE || '24h';\nexport const PORT = process.env.PORT || '3000';\nexport const LOG_LEVEL = process.env.LOG_LEVEL || 'debug';\nexport const SWAGGER_BASE_PATH = process.env.SWAGGER_BASE_PATH || '';\nexport const { SWAGGER_HOST } = process.env;\nexport const IS_DEVELOPMENT = process.env.NODE_ENV === 'development';\n","{\r\n  \"swagger\": \"2.0\",\r\n  \"info\": {\r\n    \"version\": \"1.0.0\",\r\n    \"title\": \"CR API\",\r\n    \"description\": \"Api documentation for CR project \\n\",\r\n    \"contact\": {\r\n      \"name\": \"MediaHunters\"\r\n    },\r\n    \"license\": {\r\n      \"name\": \"[PUT LICENSE NAME HERE]\"\r\n    }\r\n  },\r\n  \"host\": \"localhost:3000\",\r\n  \"basePath\": \"/v1\",\r\n  \"tags\": [\r\n    {\r\n      \"name\": \"auth\",\r\n      \"description\": \"Api endpoints related to authentication\"\r\n    }\r\n  ],\r\n  \"securityDefinitions\": {\r\n    \"bearer\": {\r\n      \"type\": \"apiKey\",\r\n      \"name\": \"Authorization\",\r\n      \"in\": \"header\"\r\n    }\r\n  },\r\n  \"schemes\": [\"http\", \"https\"],\r\n  \"consumes\": [\"application/json\"],\r\n  \"produces\": [\"application/json\"],\r\n  \"paths\": {\r\n    \"/user\": {\r\n      \"delete\": {\r\n        \"security\": [\r\n          {\r\n            \"bearer\": []\r\n          }\r\n        ],\r\n        \"tags\": [\"user\"],\r\n        \"description\": \"User endpoint\",\r\n        \"consumes\": [\"application/json\"],\r\n        \"produces\": [\"application/json\"],\r\n        \"parameters\": [\r\n          {\r\n            \"in\": \"body\",\r\n            \"name\": \"body\",\r\n            \"required\": true,\r\n            \"schema\": {\r\n              \"$ref\": \"#/definitions/UserDeleteRequest\"\r\n            }\r\n          }\r\n        ],\r\n        \"responses\": {\r\n          \"200\": {\r\n            \"description\": \"Returns authentication token\"\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { format as winstonFormat, Logger, transports } from 'winston';\nimport { Format } from 'logform';\nimport DailyRotateFile from 'winston-daily-rotate-file';\n\nimport { inject, injectable } from 'inversify';\n\nimport { BaseLogger } from 'ui/common/config/logger/BaseLogger';\nimport { ILogger } from 'ui/common/config/logger/ILogger';\n\nimport { UI_APPLICATION_IDENTIFIERS } from 'ui/UIModuleSymbols';\nimport { IS_DEVELOPMENT } from 'ui/common/config/consts/variables';\n\n@injectable()\nexport class WinstonLogger extends BaseLogger<Logger> implements ILogger {\n  private readonly format: Format;\n\n  constructor(\n    @inject(UI_APPLICATION_IDENTIFIERS.LOGGER_FORMAT) format: Format,\n    @inject(UI_APPLICATION_IDENTIFIERS.LOGGER) logger: Logger\n  ) {\n    super(logger);\n    this.format = format;\n  }\n\n  public initialize(): void {\n    const loggerConfig = {\n      datePattern: 'YYYY-MM-DD',\n      dirname: './logs',\n      format: this.format,\n      maxFiles: '14d',\n      maxSize: '20m',\n      zippedArchive: true,\n    };\n\n    this.logger.add(\n      new DailyRotateFile({\n        filename: 'cr-%DATE%.info.log',\n        level: 'info',\n        ...loggerConfig,\n      })\n    );\n\n    if (IS_DEVELOPMENT) {\n      this.logger.add(\n        new transports.Console({\n          format: winstonFormat.combine(winstonFormat.colorize(), this.format),\n          handleExceptions: true,\n          level: 'debug',\n        })\n      );\n    }\n  }\n\n  write(message: string): void {\n    this.logger.info(message);\n  }\n}\n","export abstract class BaseLogger<T> {\n  protected readonly logger: T;\n\n  constructor(logger: T) {\n    this.logger = logger;\n  }\n\n  public getLogger(): T {\n    return this.logger;\n  }\n}\n","import { inject, injectable } from 'inversify';\n\nimport { NOT_FOUND } from 'http-status-codes';\n\nimport {\n  UI_APPLICATION_IDENTIFIERS,\n  UI_IDENTIFIERS,\n  UI_MAPPINGS_IDENTIFIERS,\n} from 'ui/UIModuleSymbols';\nimport { JWTTokenUtil } from 'ui/common/config/application/common/auth/utils/JWTTokenUtil';\nimport { IAuthenticationHandler } from 'ui/common/config/application/common/auth/IAuthenticationHandler';\nimport {\n  APP_TOKEN_LIFE,\n  APP_TOKEN_SECRET,\n} from 'ui/common/config/consts/variables';\nimport { UIMapper } from 'ui/common/mappings/UIMapper';\nimport { User as UserUI } from 'ui/common/models/User';\nimport { UserInterfaceError } from 'ui/common/config/errors/UserInterfaceError';\n\nimport { IAuthenticationService } from 'core/applicationServices/Authentication/IAuthenticationService';\n\nimport {\n  DOMAIN_APPLICATION_SERVICE_IDENTIFIERS,\n  DOMAIN_MAPPING_IDENTIFIERS,\n} from 'core/CoreModuleSymbols';\n\nimport { User } from 'core/domain/User/User';\nimport { AuthenticationQuery } from 'core/applicationServices/Authentication/requests/handler/query/AuthenticationQuery';\nimport { Authentication } from 'ui/common/config/application/common/auth/models/Authentication';\n\nconst PAYLOAD_KEY = 'user';\n\n@injectable()\nexport class JWTAuthenticationHandler implements IAuthenticationHandler {\n  constructor(\n    @inject(UI_APPLICATION_IDENTIFIERS.JWT_TOKEN_UTIL)\n    private readonly jwtTokenUtil: JWTTokenUtil,\n    @inject(DOMAIN_APPLICATION_SERVICE_IDENTIFIERS.AUTHENTICATION_SERVICE)\n    private readonly authenticationService: IAuthenticationService,\n    @inject(UI_IDENTIFIERS.UI_MAPPER)\n    private readonly uiMapper: UIMapper\n  ) {}\n\n  async authenticate(request: AuthenticationQuery) {\n    const user = await this.authenticationService.verifyCredentials(request);\n    if (!user) {\n      throw new UserInterfaceError(NOT_FOUND, 'USER_NOT_FOUND');\n    }\n\n    const userUi = this.uiMapper.mapper.map<User, UserUI>(\n      {\n        destination: UI_MAPPINGS_IDENTIFIERS.USER_UI,\n        source: DOMAIN_MAPPING_IDENTIFIERS.USER_DOMAIN,\n      },\n      user\n    );\n\n    return new Authentication(\n      this.jwtTokenUtil.generateToken(\n        userUi,\n        APP_TOKEN_SECRET,\n        APP_TOKEN_LIFE,\n        PAYLOAD_KEY\n      ),\n      user\n    );\n  }\n}\n","import { User } from 'core/domain/User/User';\n\nexport class Authentication {\n  constructor(public readonly token: string, public readonly user: User) {}\n}\n","import { IncomingHttpHeaders } from 'http';\n\nimport jwt, { Secret } from 'jsonwebtoken';\nimport { injectable } from 'inversify';\n\nimport { APP_TOKEN_SECRET } from 'ui/common/config/consts/variables';\nimport { User } from 'ui/common/models/User';\n\n@injectable()\nexport class JWTTokenUtil {\n  private readonly AUTH_HEADER = 'authorization';\n\n  private readonly SCHEME = 'bearer';\n\n  private readonly MATCHER = /(\\S+)\\s+(\\S+)/;\n\n  generateToken(\n    payload: User,\n    secret: Secret,\n    expiresIn: string | number,\n    payloadKey?: string\n  ): string {\n    return jwt.sign(payloadKey ? { [payloadKey]: payload } : payload, secret, {\n      expiresIn,\n    });\n  }\n\n  decodeToken<R extends object | string | null>(token: string): R {\n    try {\n      return jwt.verify(token, APP_TOKEN_SECRET) as R;\n    } catch {\n      return null as R;\n    }\n  }\n\n  getTokenFromHeaders(headers: IncomingHttpHeaders): any {\n    const authHeader = headers[this.AUTH_HEADER];\n    if (!authHeader) {\n      return null;\n    }\n    const matches = authHeader.match(this.MATCHER);\n    return matches && matches[2];\n  }\n}\n","import { Container } from 'inversify';\n\nexport abstract class BaseContainer extends Container {\n  public abstract init(): void;\n}\n","import { Application, NextFunction, Request, Response } from 'express';\n\nimport {\n  INTERNAL_SERVER_ERROR,\n  NOT_FOUND,\n  UNPROCESSABLE_ENTITY,\n} from 'http-status-codes';\n\nimport { BaseError } from 'core/common/errors/BaseError';\nimport { CoreError } from 'core/common/errors/CoreError';\nimport { UserInterfaceError } from 'ui/common/config/errors/UserInterfaceError';\nimport { ErrorResponse } from 'ui/common/config/errors/models/ErrorResponse';\n\nexport const errorHandler = (app: Application) =>\n  app.use(\n    (error: BaseError, req: Request, res: Response, next: NextFunction) => {\n      next();\n      switch (error.constructor) {\n        case UserInterfaceError:\n          return res\n            .status((error as UserInterfaceError).status)\n            .json(new ErrorResponse(error.code, error.message));\n        case CoreError:\n          return res\n            .status(UNPROCESSABLE_ENTITY)\n            .json(new ErrorResponse(error.code, error.message));\n        case BaseError:\n          return res\n            .status(NOT_FOUND)\n            .json(new ErrorResponse(error.code, error.message));\n        default:\n          return res\n            .status(INTERNAL_SERVER_ERROR)\n            .json(\n              new ErrorResponse(INTERNAL_SERVER_ERROR.toString(), error.message)\n            );\n      }\n    }\n  );\n","import { BaseError } from 'core/common/errors/BaseError';\n\nexport class CoreError extends BaseError {}\n","export class ErrorResponse {\n  constructor(\n    public readonly code?: string,\n    public readonly message?: string\n  ) {}\n}\n","import { inject, injectable } from 'inversify';\n\nimport { compare } from 'bcrypt';\n\nimport {\n  DOMAIN_REPOSITORY_IDENTIFIERS,\n  DOMAIN_UNIT_OF_WORK_IDENTIFIERS,\n} from 'core/CoreModuleSymbols';\n\nimport { IAuthenticationService } from 'core/applicationServices/Authentication/IAuthenticationService';\nimport { IUserUnitOfWork } from 'core/domainServices/User/IUserUnitOfWork';\nimport { User } from 'core/domain/User/User';\nimport { AddUserUnitOfWorkRepositoryCommand } from 'core/domainServices/User/request/UnitOfWorkRepository/command/AddUserUnitOfWorkRepositoryCommand';\nimport { SignUpCommand } from 'core/applicationServices/Authentication/requests/repository/command/SignUpCommand';\n\nimport { AuthenticationQuery } from 'core/applicationServices/Authentication/requests/handler/query/AuthenticationQuery';\nimport { IUserRepository } from 'core/domainServices/User/IUserRepository';\nimport { FindUserByEmailRepositoryQuery } from 'core/domainServices/User/request/Repository/query/FindUserByEmailRepositoryQuery';\n\n@injectable()\nexport class AuthenticationService implements IAuthenticationService {\n  constructor(\n    @inject(DOMAIN_UNIT_OF_WORK_IDENTIFIERS.USER_UNIT_OF_WORK)\n    private readonly userUnitOfWork: IUserUnitOfWork,\n    @inject(DOMAIN_REPOSITORY_IDENTIFIERS.USER_REPOSITORY)\n    private readonly userRepository: IUserRepository\n  ) {}\n\n  signUp({ nickname, email, password }: SignUpCommand): Promise<User> {\n    return this.userUnitOfWork.addUser(\n      new AddUserUnitOfWorkRepositoryCommand(email, password, nickname)\n    );\n  }\n\n  async verifyCredentials({\n    email,\n    password,\n  }: AuthenticationQuery): Promise<User | undefined> {\n    const user = await this.userRepository.findUserByEmail(\n      new FindUserByEmailRepositoryQuery(email)\n    );\n\n    if (!user || !(await compare(password, user?.password || ''))) {\n      return undefined;\n    }\n\n    return user;\n  }\n}\n","export class AddUserUnitOfWorkRepositoryCommand {\n  constructor(\n    public readonly email: string,\n    public readonly password: string,\n    public readonly nickname: string\n  ) {}\n}\n","export class FindUserByEmailRepositoryQuery {\n  constructor(public readonly email: string) {}\n}\n","import { interfaces } from 'inversify';\n\nimport { BaseModule } from 'dependency/BaseModule';\n\nimport { IAuthenticationService } from 'core/applicationServices/Authentication/IAuthenticationService';\nimport { AuthenticationService } from 'core/applicationServices/Authentication/AuthenticationService';\n\nimport { DOMAIN_APPLICATION_SERVICE_IDENTIFIERS } from 'core/CoreModuleSymbols';\n\nexport class AuthenticationModule extends BaseModule {\n  constructor() {\n    super((bind: interfaces.Bind): void => {\n      this.init(bind);\n    });\n  }\n\n  public init(bind: interfaces.Bind): void {\n    this.provideAuthenticationService(bind);\n  }\n\n  private provideAuthenticationService(bind: interfaces.Bind): void {\n    bind<IAuthenticationService>(\n      DOMAIN_APPLICATION_SERVICE_IDENTIFIERS.AUTHENTICATION_SERVICE\n    ).to(AuthenticationService);\n  }\n}\n","import { inject } from 'inversify';\n\nimport { hashSync } from 'bcrypt';\n\nimport { DOMAIN_MAPPING_IDENTIFIERS } from 'core/CoreModuleSymbols';\nimport { IUserRepository } from 'core/domainServices/User/IUserRepository';\nimport {\n  INFRASTRUCTURE_IDENTIFIERS,\n  DATABASE_MAPPING_IDENTIFIERS,\n} from 'infrastructure/InfrastructureModuleSymbols';\nimport { DBMapper } from 'infrastructure/database/mappings/DBMapper';\nimport { User } from 'core/domain/User/User';\nimport { User as UserEntity } from 'infrastructure/database/entities/User';\nimport { AddUserRepositoryCommand } from 'core/domainServices/User/request/Repository/command/AddUserRepositoryCommand';\nimport { Repository } from 'infrastructure/database/repository/common/Repository';\nimport { Role } from 'infrastructure/database/entities/Role';\nimport { FindUserByEmailRepositoryQuery } from 'core/domainServices/User/request/Repository/query/FindUserByEmailRepositoryQuery';\nimport { GetUserRepositoryQuery } from 'core/domainServices/User/request/Repository/query/GetUserRepositoryQuery';\nimport { DeleteUserUnitOfWorkRepositoryCommand } from 'core/domainServices/User/request/UnitOfWorkRepository/command/DeleteUserUnitOfWorkRepositoryCommand';\nimport { InfrastructureErrors } from 'infrastructure/common/errors/InfrastructureErrors';\nimport { BaseError } from 'core/common/errors/BaseError';\nimport { CheckIfUserAlreadyExistsRepositoryQuery } from 'core/domainServices/User/request/Repository/query/CheckIfUserAlreadyExistsRepositoryQuery';\n\nexport class UserRepository\n  extends Repository<UserEntity>\n  implements IUserRepository\n{\n  constructor(\n    @inject(INFRASTRUCTURE_IDENTIFIERS.DB_MAPPER)\n    private readonly dbMapper: DBMapper\n  ) {\n    super(UserEntity);\n  }\n\n  async addUser({\n    nickname,\n    email,\n    password,\n    roleId,\n  }: AddUserRepositoryCommand): Promise<User> {\n    const user = new UserEntity();\n\n    user.nickname = nickname;\n    user.email = email;\n    user.password = hashSync(password, 10);\n\n    const memberRole = new Role();\n    memberRole.id = roleId;\n    user.role = memberRole;\n\n    const savedUser = await this.save(user);\n\n    return this.dbMapper.mapper.map<UserEntity, User>(\n      {\n        destination: DOMAIN_MAPPING_IDENTIFIERS.USER_DOMAIN,\n        source: DATABASE_MAPPING_IDENTIFIERS.USER_ENTITY,\n      },\n      savedUser\n    );\n  }\n\n  async removeUser({\n    id,\n  }: DeleteUserUnitOfWorkRepositoryCommand): Promise<User> {\n    const result = await this.custom()\n      .createQueryBuilder()\n      .leftJoinAndSelect('User.role', 'Role')\n      .where('User.id = :id ', { id })\n      .getOne();\n\n    if (!result) {\n      throw new BaseError(\n        InfrastructureErrors[InfrastructureErrors.USER_NOT_FOUND]\n      );\n    }\n\n    await this.remove(result);\n\n    return this.dbMapper.mapper.map<UserEntity, User>(\n      {\n        destination: DOMAIN_MAPPING_IDENTIFIERS.USER_DOMAIN,\n        source: DATABASE_MAPPING_IDENTIFIERS.USER_ENTITY,\n      },\n      result\n    );\n  }\n\n  async findUserByEmail({\n    email,\n  }: FindUserByEmailRepositoryQuery): Promise<User> {\n    const result = await this.custom()\n      .createQueryBuilder()\n      .leftJoinAndSelect('User.role', 'role')\n      .where('User.email = :email', { email })\n      .getMany();\n\n    return this.dbMapper.mapper.map<UserEntity, User>(\n      {\n        destination: DOMAIN_MAPPING_IDENTIFIERS.USER_DOMAIN,\n        source: DATABASE_MAPPING_IDENTIFIERS.USER_ENTITY,\n      },\n      result[0]!\n    );\n  }\n\n  async getUser({ id }: GetUserRepositoryQuery): Promise<User> {\n    const result = await this.custom()\n      .createQueryBuilder()\n      .leftJoinAndSelect('User.role', 'Role')\n      .where('User.id = :id ', { id })\n      .getOne();\n\n    if (!result) {\n      throw new BaseError(\n        InfrastructureErrors[InfrastructureErrors.USER_NOT_FOUND]\n      );\n    }\n\n    return this.dbMapper.mapper.map<UserEntity, User>(\n      {\n        destination: DOMAIN_MAPPING_IDENTIFIERS.USER_DOMAIN,\n        source: DATABASE_MAPPING_IDENTIFIERS.USER_ENTITY,\n      },\n      result\n    );\n  }\n\n  async getUsers(): Promise<User[]> {\n    const users = await this.custom()\n      .createQueryBuilder()\n      .leftJoinAndSelect('User.role', 'role')\n      .getMany();\n\n    return this.dbMapper.mapper.map<UserEntity[], User[]>(\n      {\n        destination: DOMAIN_MAPPING_IDENTIFIERS.USER_DOMAIN,\n        source: DATABASE_MAPPING_IDENTIFIERS.USER_ENTITY,\n      },\n      users\n    );\n  }\n\n  async checkIfUserAlreadyExists({\n    nickname,\n    email,\n  }: CheckIfUserAlreadyExistsRepositoryQuery): Promise<User[]> {\n    const result = await this.custom()\n      .createQueryBuilder()\n      .leftJoinAndSelect('User.role', 'role')\n      .where('User.nickname = :nickname OR User.email = :email', {\n        nickname,\n        email,\n      })\n      .getMany();\n\n    return this.dbMapper.mapper.map<UserEntity[], User[]>(\n      {\n        destination: DOMAIN_MAPPING_IDENTIFIERS.USER_DOMAIN,\n        source: DATABASE_MAPPING_IDENTIFIERS.USER_ENTITY,\n      },\n      result\n    );\n  }\n}\n","import { Entity, Column, ManyToOne, OneToMany } from 'typeorm';\n\nimport type { Role } from 'infrastructure/database/entities/Role';\nimport type { Review } from 'infrastructure/database/entities/Review';\nimport Model from 'infrastructure/database/entities/Base';\n\n@Entity()\nexport class User extends Model {\n  @Column('text', {\n    nullable: true,\n  })\n  firstName?: string;\n\n  @Column('text', {\n    nullable: true,\n  })\n  lastName?: string;\n\n  @Column('text', { unique: true })\n  nickname!: string;\n\n  @Column('text')\n  email!: string;\n\n  @Column('text')\n  password!: string;\n\n  @ManyToOne('Role', (role: Role) => role.user)\n  role!: Role;\n\n  @OneToMany('Review', (review: Review) => review.user)\n  reviews!: Review[];\n\n  toJson(): any {\n    return {\n      ...this,\n      password: undefined,\n    };\n  }\n}\n","import {\n  CreateDateColumn,\n  UpdateDateColumn,\n  PrimaryGeneratedColumn,\n  BaseEntity,\n} from 'typeorm';\n\nexport default abstract class Model extends BaseEntity {\n  @PrimaryGeneratedColumn('uuid')\n  id!: string;\n\n  @CreateDateColumn()\n  createdAt!: Date;\n\n  @UpdateDateColumn()\n  updatedAt!: Date;\n}\n","import { AbstractRepository, getRepository, ObjectLiteral } from 'typeorm';\nimport { injectable } from 'inversify';\n\nimport { ObjectType } from 'typeorm/common/ObjectType';\n\nimport { Repository as ORMRepository } from 'typeorm/repository/Repository';\n\nimport { IRepository } from 'infrastructure/database/repository/common/IRepository';\nimport { Query } from 'infrastructure/database/repository/common/Query';\nimport { UpdateQueryData } from 'infrastructure/database/repository/common/UpdateQueryData';\n\n@injectable()\nexport abstract class Repository<E extends ObjectLiteral>\n  extends AbstractRepository<E>\n  implements IRepository<E, ORMRepository<E>>\n{\n  constructor(protected readonly entity: ObjectType<E>) {\n    super();\n  }\n\n  public async find(id: string | number): Promise<E | undefined> {\n    return this.getDBRepository().findOne(id);\n  }\n\n  public findBy(condition: Query<E>): Promise<E[]> {\n    return this.getDBRepository().find(condition);\n  }\n\n  public async findMany(ids: string[] | number[]): Promise<E[]> {\n    return this.getDBRepository().findByIds(ids);\n  }\n\n  public async findAll(): Promise<E[]> {\n    return this.getDBRepository().find();\n  }\n\n  public async query(query: string, parameters?: any[]): Promise<E[]> {\n    return this.getDBRepository().query(query, parameters);\n  }\n\n  public async update(\n    condition: string | number,\n    data: UpdateQueryData<E>\n  ): Promise<boolean> {\n    return !!(await this.getDBRepository().update(condition, data));\n  }\n\n  public async updateAll(\n    condition: string[] | number[],\n    data: E\n  ): Promise<boolean> {\n    return !!(await this.getDBRepository().update(condition, data));\n  }\n\n  public async delete(condition: string | number): Promise<boolean> {\n    return !!(await this.getDBRepository().delete(condition));\n  }\n\n  public async deleteAll(condition: string[] | number[]): Promise<boolean> {\n    return !!(await this.getDBRepository().delete(condition));\n  }\n\n  public async remove(entity: E): Promise<E> {\n    return this.getDBRepository().remove(entity);\n  }\n\n  public async removeAll(entities: E[]): Promise<E[]> {\n    return this.getDBRepository().remove(entities);\n  }\n\n  public async save(entity: E): Promise<E> {\n    return this.getDBRepository().save(entity as any);\n  }\n\n  public async saveAll(entities: E[]): Promise<E[]> {\n    return this.getDBRepository().save(entities as any);\n  }\n\n  public custom(): ORMRepository<E> {\n    return this.getDBRepository();\n  }\n\n  protected getConnectionName(): string | undefined {\n    return process.env.ORM_CONNECTION;\n  }\n\n  private getDBRepository(): ORMRepository<E> {\n    return getRepository<E>(this.entity, this.getConnectionName());\n  }\n}\n","import { Column, Entity, OneToMany } from 'typeorm';\n\nimport { USER_ROLE } from 'infrastructure/database/enum/UserRole';\nimport type { User } from 'infrastructure/database/entities/User';\nimport Model from 'infrastructure/database/entities/Base';\n\n@Entity()\nexport class Role extends Model {\n  @Column({\n    default: USER_ROLE.MEMBER,\n    enum: USER_ROLE,\n    nullable: false,\n    type: 'enum',\n  })\n  name!: string;\n\n  @OneToMany('User', (user: User) => user.role)\n  user!: User;\n}\n","export enum USER_ROLE {\n  ADMIN = 'ADMIN',\n  MEMBER = 'MEMBER',\n}\n","export enum InfrastructureErrors {\n  USER_NOT_FOUND,\n  USER_ALREADY_EXIST,\n  ROLE_NOT_FOUND,\n  COFFEE_NOT_FOUND,\n  REVIEW_NOT_FOUND,\n}\n","import { inject, injectable } from 'inversify';\n\nimport { GetUserRepositoryQuery } from 'core/domainServices/User/request/Repository/query/GetUserRepositoryQuery';\nimport { IUserService } from 'core/applicationServices/User/IUserService';\nimport { FetchUserQuery } from 'core/applicationServices/User/requests/query/FetchUserQuery';\nimport { User } from 'core/domain/User/User';\nimport { IUserRepository } from 'core/domainServices/User/IUserRepository';\n\nimport { GetUsersRepositoryQuery } from 'core/domainServices/User/request/Repository/query/GetUsersRepositoryQuery';\nimport {\n  DOMAIN_REPOSITORY_IDENTIFIERS,\n  DOMAIN_UNIT_OF_WORK_IDENTIFIERS,\n} from 'core/CoreModuleSymbols';\nimport { RemoveUserCommand } from 'core/applicationServices/User/requests/command/RemoveUserCommand';\nimport { IUserUnitOfWork } from 'core/domainServices/User/IUserUnitOfWork';\nimport { DeleteUserUnitOfWorkRepositoryCommand } from 'core/domainServices/User/request/UnitOfWorkRepository/command/DeleteUserUnitOfWorkRepositoryCommand';\n\n@injectable()\nexport class UserService implements IUserService {\n  constructor(\n    @inject(DOMAIN_REPOSITORY_IDENTIFIERS.USER_REPOSITORY)\n    private readonly userRepository: IUserRepository,\n    @inject(DOMAIN_UNIT_OF_WORK_IDENTIFIERS.USER_UNIT_OF_WORK)\n    private readonly userUnitOfWork: IUserUnitOfWork\n  ) {}\n\n  removeUser({ id }: RemoveUserCommand): Promise<User> {\n    return this.userUnitOfWork.deleteUser(\n      new DeleteUserUnitOfWorkRepositoryCommand(id)\n    );\n  }\n\n  fetchUser({ id }: FetchUserQuery): Promise<User> {\n    return this.userRepository.getUser(new GetUserRepositoryQuery(id));\n  }\n\n  fetchUsers(): Promise<User[]> {\n    return this.userRepository.getUsers(new GetUsersRepositoryQuery());\n  }\n}\n","export class GetUserRepositoryQuery {\n  constructor(public readonly id: string) {}\n}\n","export class GetUsersRepositoryQuery {}\n","export class DeleteUserUnitOfWorkRepositoryCommand {\n  constructor(public readonly id: string) {}\n}\n","import { inject, injectable } from 'inversify';\n\nimport { DOMAIN_REPOSITORY_IDENTIFIERS } from 'core/CoreModuleSymbols';\nimport { User } from 'core/domain/User/User';\nimport { IUserRepository } from 'core/domainServices/User/IUserRepository';\nimport { IUserUnitOfWork } from 'core/domainServices/User/IUserUnitOfWork';\nimport { AddUserUnitOfWorkRepositoryCommand } from 'core/domainServices/User/request/UnitOfWorkRepository/command/AddUserUnitOfWorkRepositoryCommand';\nimport { DeleteUserUnitOfWorkRepositoryCommand } from 'core/domainServices/User/request/UnitOfWorkRepository/command/DeleteUserUnitOfWorkRepositoryCommand';\nimport { FindRoleByNameRepositoryQuery } from 'core/domainServices/Role/requests/repository/query/FindRoleByNameRepositoryQuery';\nimport { AddUserRepositoryCommand } from 'core/domainServices/User/request/Repository/command/AddUserRepositoryCommand';\nimport { IRoleRepository } from 'core/domainServices/Role/IRoleRepository';\n\nimport { USER_ROLE } from 'infrastructure/database/enum/UserRole';\nimport { CheckIfUserAlreadyExistsRepositoryQuery } from 'core/domainServices/User/request/Repository/query/CheckIfUserAlreadyExistsRepositoryQuery';\nimport { BaseError } from 'core/common/errors/BaseError';\nimport { InfrastructureErrors } from 'infrastructure/common/errors/InfrastructureErrors';\n\n@injectable()\nexport class UserUnitOfWork implements IUserUnitOfWork {\n  constructor(\n    @inject(DOMAIN_REPOSITORY_IDENTIFIERS.USER_REPOSITORY)\n    private readonly userRepository: IUserRepository,\n    @inject(DOMAIN_REPOSITORY_IDENTIFIERS.ROLE_REPOSITORY)\n    private readonly roleRepository: IRoleRepository\n  ) {}\n\n  async addUser({\n    email,\n    password,\n    nickname,\n  }: AddUserUnitOfWorkRepositoryCommand): Promise<User> {\n    const checkIfUserExist = await this.userRepository.checkIfUserAlreadyExists(\n      new CheckIfUserAlreadyExistsRepositoryQuery(nickname, email)\n    );\n\n    if (checkIfUserExist.length > 0) {\n      throw new BaseError(\n        InfrastructureErrors[InfrastructureErrors.USER_ALREADY_EXIST]\n      );\n    }\n    const { id } = await this.roleRepository.findRoleByName(\n      new FindRoleByNameRepositoryQuery(USER_ROLE.ADMIN)\n    );\n    return this.userRepository.addUser(\n      new AddUserRepositoryCommand(nickname, email, password, id)\n    );\n  }\n\n  deleteUser(command: DeleteUserUnitOfWorkRepositoryCommand): Promise<User> {\n    return this.userRepository.removeUser(command);\n  }\n}\n","export class FindRoleByNameRepositoryQuery {\n  constructor(public readonly name: string) {}\n}\n","export class AddUserRepositoryCommand {\n  constructor(\n    public readonly nickname: string,\n    public readonly email: string,\n    public readonly password: string,\n    public readonly roleId: string\n  ) {}\n}\n","export class CheckIfUserAlreadyExistsRepositoryQuery {\n  constructor(\n    public readonly nickname: string,\n    public readonly email: string\n  ) {}\n}\n","import { interfaces } from 'inversify';\n\nimport { BaseModule } from 'dependency/BaseModule';\nimport { IUserService } from 'core/applicationServices/User/IUserService';\n\nimport { IUserRepository } from 'core/domainServices/User/IUserRepository';\n\nimport {\n  DOMAIN_APPLICATION_SERVICE_IDENTIFIERS,\n  DOMAIN_REPOSITORY_IDENTIFIERS,\n  DOMAIN_UNIT_OF_WORK_IDENTIFIERS,\n} from 'core/CoreModuleSymbols';\n\nimport { UserRepository } from 'infrastructure/database/repository/User/UserRepository';\nimport { IUserUnitOfWork } from 'core/domainServices/User/IUserUnitOfWork';\nimport { UserService } from 'core/applicationServices/User/UserService';\nimport { UserUnitOfWork } from 'infrastructure/database/repository/User/UserUnitOfWork';\n\nexport class UserModule extends BaseModule {\n  constructor() {\n    super((bind: interfaces.Bind): void => {\n      this.init(bind);\n    });\n  }\n\n  public init(bind: interfaces.Bind): void {\n    this.provideUserRepository(bind);\n    this.provideUserUnitOfWork(bind);\n\n    this.provideUserService(bind);\n  }\n\n  private provideUserRepository(bind: interfaces.Bind): void {\n    bind<IUserRepository>(DOMAIN_REPOSITORY_IDENTIFIERS.USER_REPOSITORY).to(\n      UserRepository\n    );\n  }\n\n  private provideUserUnitOfWork(bind: interfaces.Bind): void {\n    bind<IUserUnitOfWork>(DOMAIN_UNIT_OF_WORK_IDENTIFIERS.USER_UNIT_OF_WORK).to(\n      UserUnitOfWork\n    );\n  }\n\n  private provideUserService(bind: interfaces.Bind): void {\n    bind<IUserService>(DOMAIN_APPLICATION_SERVICE_IDENTIFIERS.USER_SERVICE).to(\n      UserService\n    );\n  }\n}\n","import { inject, injectable } from 'inversify';\n\nimport { EntityRepository } from 'typeorm';\n\nimport { FindRoleRepositoryQuery } from 'core/domainServices/Role/requests/repository/query/FindRoleRepositoryQuery';\nimport { IRoleRepository } from 'core/domainServices/Role/IRoleRepository';\n\nimport { Role } from 'core/domain/Role/Role';\nimport { DOMAIN_MAPPING_IDENTIFIERS } from 'core/CoreModuleSymbols';\nimport { BaseError } from 'core/common/errors/BaseError';\n\nimport { Role as RoleEntity } from 'infrastructure/database/entities/Role';\nimport {\n  DATABASE_MAPPING_IDENTIFIERS,\n  INFRASTRUCTURE_IDENTIFIERS,\n} from 'infrastructure/InfrastructureModuleSymbols';\nimport { Repository } from 'infrastructure/database/repository/common/Repository';\nimport { InfrastructureErrors } from 'infrastructure/common/errors/InfrastructureErrors';\nimport { FindRoleByNameRepositoryQuery } from 'core/domainServices/Role/requests/repository/query/FindRoleByNameRepositoryQuery';\nimport { DBMapper } from 'infrastructure/database/mappings/DBMapper';\n\n@injectable()\n@EntityRepository(RoleEntity)\nexport class RoleRepository\n  extends Repository<RoleEntity>\n  implements IRoleRepository\n{\n  constructor(\n    @inject(INFRASTRUCTURE_IDENTIFIERS.DB_MAPPER)\n    private readonly dbMapper: DBMapper\n  ) {\n    super(RoleEntity);\n  }\n\n  async findRole({ id }: FindRoleRepositoryQuery): Promise<Role> {\n    const role = await this.find(id);\n\n    if (!role) {\n      throw new BaseError(\n        InfrastructureErrors[InfrastructureErrors.ROLE_NOT_FOUND]\n      );\n    }\n\n    return this.dbMapper.mapper.map<RoleEntity, Role>(\n      {\n        destination: DOMAIN_MAPPING_IDENTIFIERS.ROLE_DOMAIN,\n        source: DATABASE_MAPPING_IDENTIFIERS.ROLE_ENTITY,\n      },\n      role\n    );\n  }\n\n  async findRoleByName({ name }: FindRoleByNameRepositoryQuery): Promise<Role> {\n    const role = await this.custom()\n      .createQueryBuilder()\n      .where('\"Role\".\"name\" = :name', {\n        name,\n      })\n      .getOne();\n\n    if (!role) {\n      throw new BaseError(\n        InfrastructureErrors[InfrastructureErrors.ROLE_NOT_FOUND]\n      );\n    }\n\n    return this.dbMapper.mapper.map<RoleEntity, Role>(\n      {\n        destination: DOMAIN_MAPPING_IDENTIFIERS.ROLE_DOMAIN,\n        source: DATABASE_MAPPING_IDENTIFIERS.ROLE_ENTITY,\n      },\n      role\n    );\n  }\n}\n","import { interfaces } from 'inversify';\n\nimport { DOMAIN_REPOSITORY_IDENTIFIERS } from 'core/CoreModuleSymbols';\nimport { IRoleRepository } from 'core/domainServices/Role/IRoleRepository';\nimport { BaseModule } from 'dependency/BaseModule';\nimport { RoleRepository } from 'infrastructure/database/repository/role/RoleRepository';\n\nexport class RoleModule extends BaseModule {\n  constructor() {\n    super((bind: interfaces.Bind): void => {\n      this.init(bind);\n    });\n  }\n\n  public init(bind: interfaces.Bind): void {\n    this.provideRoleRepository(bind);\n  }\n\n  public provideRoleRepository(bind: interfaces.Bind): void {\n    bind<IRoleRepository>(DOMAIN_REPOSITORY_IDENTIFIERS.ROLE_REPOSITORY).to(\n      RoleRepository\n    );\n  }\n}\n","import { inject, injectable } from 'inversify';\nimport { interfaces } from 'inversify-express-utils';\nimport { NextFunction, Request, Response } from 'express';\n\nimport { User } from 'ui/common/models/User';\nimport { JWTTokenUtil } from 'ui/common/config/application/common/auth/utils/JWTTokenUtil';\nimport { UI_APPLICATION_IDENTIFIERS } from 'ui/UIModuleSymbols';\nimport { TokenPayload } from 'ui/common/config/application/express/auth/types/TokenPayload';\n\nimport { DOMAIN_APPLICATION_SERVICE_IDENTIFIERS } from 'core/CoreModuleSymbols';\nimport { FetchUserQuery } from 'core/applicationServices/User/requests/query/FetchUserQuery';\nimport { UserService } from 'core/applicationServices/User/UserService';\nimport { Principal } from 'ui/common/config/application/express/auth/models/Principal';\n\n@injectable()\nexport class ApplicationAuthProvider implements interfaces.AuthProvider {\n  @inject(DOMAIN_APPLICATION_SERVICE_IDENTIFIERS.USER_SERVICE)\n  private readonly userService!: UserService;\n\n  @inject(UI_APPLICATION_IDENTIFIERS.JWT_TOKEN_UTIL)\n  private readonly jwtTokenUtil!: JWTTokenUtil;\n\n  public async getUser(\n    req: Request,\n    res: Response,\n    next: NextFunction\n  ): Promise<interfaces.Principal> {\n    const token = this.jwtTokenUtil.getTokenFromHeaders(req.headers);\n    if (!token) {\n      return new Principal(undefined);\n    }\n    const tokenData = await this.jwtTokenUtil.decodeToken<TokenPayload>(token);\n\n    if (!tokenData) {\n      return new Principal(undefined);\n    }\n\n    const { user } = tokenData;\n    try {\n      const existingUser = await this.userService.fetchUser(\n        new FetchUserQuery(user.id)\n      );\n\n      if (!existingUser) {\n        return new Principal(undefined);\n      }\n\n      return new Principal(\n        new User(user.id, user.nickname, user.email, user.role)\n      );\n    } catch (error) {\n      next(error);\n      return new Principal(undefined);\n    }\n  }\n}\n","export class User {\n  constructor(\n    public readonly id: string,\n    public readonly nickname: string,\n    public readonly email: string,\n    public readonly role: string\n  ) {}\n}\n","export class FetchUserQuery {\n  constructor(public readonly id: string) {}\n}\n","import { interfaces } from 'inversify-express-utils';\n\nimport { User } from 'ui/common/models/User';\n\nexport class Principal implements interfaces.Principal {\n  public details: User | undefined;\n\n  public constructor(details: User | undefined) {\n    this.details = details;\n  }\n\n  public isAuthenticated(): Promise<boolean> {\n    return Promise.resolve(!!this.details);\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  public isResourceOwner(resourceId: any): Promise<boolean> {\n    return Promise.resolve(resourceId === true);\n  }\n\n  public isInRole(role: string): Promise<boolean> {\n    return Promise.resolve(role === this.details?.role);\n  }\n}\n","import { inject, injectable } from 'inversify';\n\nimport { UpdateResult } from 'typeorm';\n\nimport { ICoffeeService } from 'core/applicationServices/Coffee/ICoffeeService';\nimport {\n  DOMAIN_REPOSITORY_IDENTIFIERS,\n  DOMAIN_UNIT_OF_WORK_IDENTIFIERS,\n} from 'core/CoreModuleSymbols';\nimport { Coffee } from 'core/domain/Coffee/Coffee';\nimport { ICoffeeUnitOfWork } from 'core/domainServices/Coffee/ICoffeeUnitOfWork';\nimport { CreateCoffeeUnitOfWorkRepositoryCommand } from 'core/domainServices/Coffee/requests/UnitOfWork/command/AddCoffeeUnitOfWorkRepositoryCommand';\nimport { DeleteCoffeeCommand } from 'core/applicationServices/Coffee/requests/command/DeleteCoffeeCommand';\nimport { DeleteCoffeeUnitOfWorkRepositoryCommand } from 'core/domainServices/Coffee/requests/UnitOfWork/command/DeleteCoffeeUnitOfWorkRepositoryCommand';\nimport { ICoffeeRepository } from 'core/domainServices/Coffee/ICoffeeRepository';\nimport { FindOneCoffeeRepositoryQuery } from 'core/domainServices/Coffee/requests/UnitOfWork/query/FindCoffeeRepositoryQuery';\nimport { CreateCoffeeCommand } from 'core/applicationServices/Coffee/requests/command/AddCoffeeCommand';\nimport { UpdateCoffeeCommand } from 'core/applicationServices/Coffee/requests/command/UpdateCoffeeCommand';\n\n@injectable()\nexport class CoffeeService implements ICoffeeService {\n  constructor(\n    @inject(DOMAIN_UNIT_OF_WORK_IDENTIFIERS.COFFEE_UNIT_OF_WORK)\n    private readonly coffeUnitOfWork: ICoffeeUnitOfWork,\n    @inject(DOMAIN_REPOSITORY_IDENTIFIERS.COFFEE_REPOSITORY)\n    private readonly coffeRepository: ICoffeeRepository\n  ) {}\n\n  findAll(): Promise<Coffee[]> {\n    return this.coffeRepository.findAllCoffees();\n  }\n\n  findOne({ id }: FindOneCoffeeRepositoryQuery): Promise<Coffee> {\n    return this.coffeRepository.findOneCoffee(\n      new FindOneCoffeeRepositoryQuery(id)\n    );\n  }\n\n  create({\n    brand,\n    name,\n    type,\n    imgUrl,\n    description,\n    burntLvl,\n    reflink,\n    CoffeeStatus,\n  }: CreateCoffeeCommand): Promise<Coffee> {\n    return this.coffeRepository.createCoffee(\n      new CreateCoffeeUnitOfWorkRepositoryCommand(\n        brand,\n        name,\n        type,\n        imgUrl,\n        description,\n        burntLvl,\n        CoffeeStatus,\n        reflink || ''\n      )\n    );\n  }\n\n  update({ coffee, coffeeId }: UpdateCoffeeCommand): Promise<UpdateResult> {\n    return this.coffeRepository.updateCoffee({ coffee, coffeeId });\n  }\n\n  delete(command: DeleteCoffeeCommand): Promise<Coffee> {\n    return this.coffeUnitOfWork.delete(\n      new DeleteCoffeeUnitOfWorkRepositoryCommand(command.id)\n    );\n  }\n\n  // addReview({\n  //   userId,\n  //   coffeeId,\n  //   look,\n  //   smell,\n  //   taste,\n  // }: AddCoffeeReviewCommand): Promise<Coffee> {\n  //   return this.CoffeUnitOfWork.addCoffeeReview(\n  //     new AddCoffeeReviewUnitOfWorkRepositoryCommand(\n  //       userId,\n  //       coffeeId,\n  //       look,\n  //       smell,\n  //       taste\n  //     )\n  //   );\n  // }\n\n  // sortAndPaginate({ sortBy, skip, take }: SearchQuery): Promise<Coffee> {\n  //   return this.CoffeRepository.sortAndPaginate(\n  //     new SearchRepositoryQuery(sortBy, skip, take)\n  //   );\n  // }\n}\n","export class CreateCoffeeUnitOfWorkRepositoryCommand {\n  constructor(\n    public readonly brand: string,\n    public readonly name: string,\n    public readonly type: string,\n    public readonly imgUrl: string,\n    public readonly description: string,\n    public readonly burntLvl: string,\n    public readonly reflink: string,\n    public readonly CoffeeStatus: string\n  ) {}\n}\n","export class DeleteCoffeeUnitOfWorkRepositoryCommand {\n  constructor(public readonly id: string) {}\n}\n","import { inject } from 'inversify';\n\nimport { UpdateResult } from 'typeorm';\n\nimport { Repository } from 'infrastructure/database/repository/common/Repository';\nimport { Coffee as CoffeeEntity } from 'infrastructure/database/entities/Coffee';\nimport { ICoffeeRepository } from 'core/domainServices/Coffee/ICoffeeRepository';\nimport { CreateCoffeeRepositoryCommand } from 'core/domainServices/Coffee/requests/repository/command/CreateCoffeeRepositoryCommand';\nimport { DBMapper } from 'infrastructure/database/mappings/DBMapper';\nimport {\n  DATABASE_MAPPING_IDENTIFIERS,\n  INFRASTRUCTURE_IDENTIFIERS,\n} from 'infrastructure/InfrastructureModuleSymbols';\nimport { DOMAIN_MAPPING_IDENTIFIERS } from 'core/CoreModuleSymbols';\nimport { DeleteCoffeeRepositoryCommand } from 'core/domainServices/Coffee/requests/repository/command/DeleteCoffeeRepositoryCommand';\nimport { InfrastructureErrors } from 'infrastructure/common/errors/InfrastructureErrors';\nimport { BaseError } from 'core/common/errors/BaseError';\nimport { Coffee } from 'core/domain/Coffee/Coffee';\nimport { FindOneCoffeeRepositoryQuery } from 'core/domainServices/Coffee/requests/UnitOfWork/query/FindCoffeeRepositoryQuery';\nimport { UpdateCoffeeRepositoryCommand } from 'core/domainServices/Coffee/requests/repository/command/UpdateCoffeeRepositoryCommand';\n\nexport class CoffeeRepository\n  extends Repository<CoffeeEntity>\n  implements ICoffeeRepository\n{\n  constructor(\n    @inject(INFRASTRUCTURE_IDENTIFIERS.DB_MAPPER)\n    private readonly dbMapper: DBMapper\n  ) {\n    super(CoffeeEntity);\n  }\n\n  async findAllCoffees(): Promise<Coffee[]> {\n    const coffees = await this.custom()\n      .createQueryBuilder()\n      .leftJoinAndSelect('Coffee.reviews', 'Review')\n      .getMany();\n\n    return this.dbMapper.mapper.map<CoffeeEntity[], Coffee[]>(\n      {\n        destination: DOMAIN_MAPPING_IDENTIFIERS.COFFEE_DOMAIN,\n        source: DATABASE_MAPPING_IDENTIFIERS.COFFEE_ENTITY,\n      },\n      coffees\n    );\n  }\n\n  async findOneCoffee({ id }: FindOneCoffeeRepositoryQuery): Promise<Coffee> {\n    const coffee = await this.custom()\n      .createQueryBuilder()\n      .leftJoinAndSelect('Coffee.reviews', 'Review')\n      .where('Coffee.id = :id ', { id })\n      .getOne();\n\n    if (!coffee) {\n      throw new BaseError(\n        InfrastructureErrors[InfrastructureErrors.COFFEE_NOT_FOUND]\n      );\n    }\n\n    return this.dbMapper.mapper.map<CoffeeEntity, Coffee>(\n      {\n        destination: DOMAIN_MAPPING_IDENTIFIERS.COFFEE_DOMAIN,\n        source: DATABASE_MAPPING_IDENTIFIERS.COFFEE_ENTITY,\n      },\n      coffee\n    );\n  }\n\n  async createCoffee({\n    CoffeeStatus,\n    brand,\n    name,\n    type,\n    imgUrl,\n    description,\n    burntLvl,\n    reflink,\n  }: CreateCoffeeRepositoryCommand): Promise<Coffee> {\n    const coffee = new CoffeeEntity();\n    coffee.brand = brand;\n    coffee.name = name;\n    coffee.type = type;\n    coffee.imgUrl = imgUrl;\n    coffee.description = description;\n    coffee.burntLvl = burntLvl;\n    coffee.reflink = reflink;\n    coffee.CoffeeStatus = CoffeeStatus;\n    coffee.createdAt = new Date();\n    coffee.type = type;\n\n    coffee.reviews = [];\n    const savedCoffee = await this.save(coffee);\n\n    return this.dbMapper.mapper.map<CoffeeEntity, Coffee>(\n      {\n        destination: DOMAIN_MAPPING_IDENTIFIERS.COFFEE_DOMAIN,\n        source: DATABASE_MAPPING_IDENTIFIERS.COFFEE_ENTITY,\n      },\n      savedCoffee\n    );\n  }\n\n  async updateCoffee({\n    coffee,\n    coffeeId,\n  }: UpdateCoffeeRepositoryCommand): Promise<UpdateResult> {\n    const updatedCoffee = await this.custom()\n      .createQueryBuilder()\n      .update(CoffeeEntity)\n      .set({ ...coffee })\n      .where('id = :id', { id: coffeeId })\n      .execute();\n\n    return updatedCoffee;\n  }\n\n  // TODO: make it transational\n  async deleteCoffee({ id }: DeleteCoffeeRepositoryCommand): Promise<Coffee> {\n    const result = await this.custom()\n      .createQueryBuilder()\n      .leftJoinAndSelect('Coffee.reviews', 'Review')\n      .where('Coffee.id = :id ', { id })\n      .getOne();\n\n    if (!result) {\n      throw new BaseError(\n        InfrastructureErrors[InfrastructureErrors.COFFEE_NOT_FOUND]\n      );\n    }\n\n    this.remove(result);\n\n    return this.dbMapper.mapper.map<CoffeeEntity, Coffee>(\n      {\n        destination: DOMAIN_MAPPING_IDENTIFIERS.COFFEE_DOMAIN,\n        source: DATABASE_MAPPING_IDENTIFIERS.COFFEE_ENTITY,\n      },\n      result\n    );\n  }\n\n  // sortAndPaginate({\n  //   sortBy,\n  //   skip,\n  //   take,\n  // }: SearchRepositoryQuery): Promise<Coffee> {\n  //   // const result = await this.custom().createQueryBuilder().addOrderBy(sortB, skip, take))\n  // }\n}\n","import { Column, Entity, OneToMany } from 'typeorm';\n\nimport { COFFEE_TYPE } from 'core/domain/Coffee/CoffeeType';\nimport { COFFEE_BURNT_LVL } from 'core/domain/Coffee/CoffeeBurnLvl';\nimport type { Review } from 'infrastructure/database/entities/Review';\nimport { COFFEE_STATUS } from 'infrastructure/database/enum/CoffeStatus';\nimport Model from 'infrastructure/database/entities/Base';\n\n@Entity()\nexport class Coffee extends Model {\n  @Column('text')\n  brand!: string;\n\n  @Column('text')\n  name!: string;\n\n  @Column({\n    enum: COFFEE_TYPE,\n    nullable: false,\n    type: 'enum',\n  })\n  type!: string;\n\n  @Column('text')\n  imgUrl!: string;\n\n  @Column('text')\n  description!: string;\n\n  @Column({\n    enum: COFFEE_BURNT_LVL,\n    nullable: false,\n    type: 'enum',\n  })\n  burntLvl!: string;\n\n  @Column('text')\n  reflink!: string;\n\n  @Column({\n    enum: COFFEE_STATUS,\n    nullable: false,\n    type: 'enum',\n    default: COFFEE_STATUS.WAITING_QUEUE,\n  })\n  CoffeeStatus!: string;\n\n  @OneToMany('Review', (Review: Review) => Review.coffee, {\n    cascade: true,\n  })\n  reviews!: Review[];\n}\n","export enum COFFEE_TYPE {\n  BEANS = 'BEANS',\n  POWDER = 'POWDER',\n}\n","export enum COFFEE_BURNT_LVL {\n  LIGHT_ROAST = 'LIGHT_ROAST',\n  MEDUIM_ROAST = 'MEDIUM_ROAST',\n  DARK_ROAST = 'DARK_ROAST',\n}\n","export enum COFFEE_STATUS {\n  WAITING_QUEUE = 'WAITING_QUEUE',\n  VERIFIED = 'VERIFIED',\n  BLOCKED = 'BLOCKED',\n}\n","import { inject, injectable } from 'inversify';\n\nimport { DOMAIN_REPOSITORY_IDENTIFIERS } from 'core/CoreModuleSymbols';\nimport { Coffee } from 'core/domain/Coffee/Coffee';\nimport { ICoffeeUnitOfWork } from 'core/domainServices/Coffee/ICoffeeUnitOfWork';\nimport { CreateCoffeeUnitOfWorkRepositoryCommand } from 'core/domainServices/Coffee/requests/UnitOfWork/command/AddCoffeeUnitOfWorkRepositoryCommand';\nimport { ICoffeeRepository } from 'core/domainServices/Coffee/ICoffeeRepository';\nimport { DeleteCoffeeRepositoryCommand } from 'core/domainServices/Coffee/requests/repository/command/DeleteCoffeeRepositoryCommand';\nimport { IUserRepository } from 'core/domainServices/User/IUserRepository';\nimport { CreateCoffeeRepositoryCommand } from 'core/domainServices/Coffee/requests/repository/command/CreateCoffeeRepositoryCommand';\n\n@injectable()\nexport class CoffeeUnitOfWork implements ICoffeeUnitOfWork {\n  constructor(\n    @inject(DOMAIN_REPOSITORY_IDENTIFIERS.COFFEE_REPOSITORY)\n    private readonly coffeeRepository: ICoffeeRepository,\n    @inject(DOMAIN_REPOSITORY_IDENTIFIERS.USER_REPOSITORY)\n    private readonly userRepository: IUserRepository\n  ) {}\n\n  create({\n    brand,\n    name,\n    type,\n    imgUrl,\n    description,\n    burntLvl,\n    reflink,\n    CoffeeStatus,\n  }: CreateCoffeeUnitOfWorkRepositoryCommand): Promise<Coffee> {\n    return this.coffeeRepository.createCoffee(\n      new CreateCoffeeRepositoryCommand(\n        brand,\n        name,\n        type,\n        imgUrl,\n        description,\n        burntLvl,\n        reflink,\n        CoffeeStatus\n      )\n    );\n  }\n\n  delete({ id }: DeleteCoffeeRepositoryCommand): Promise<Coffee> {\n    return this.coffeeRepository.deleteCoffee(\n      new DeleteCoffeeRepositoryCommand(id)\n    );\n  }\n\n  // @Transactional({\n  //   connectionName: () => process.env.ORM_CONNECTION,\n  // })\n  // async addCoffeeReview({\n  //   userId,\n  //   coffeeId,\n  //   look,\n  //   smell,\n  //   taste,\n  // }: AddReviewRepositoryCommand): Promise<Coffee> {\n\n  //   return this.coffeeRepository.addCoffeeReview(\n  //     new AddReviewRepositoryCommand(userId, coffeeId, look, smell, taste)\n  //   );\n  // }\n}\n","export class DeleteCoffeeRepositoryCommand {\n  constructor(public readonly id: string) {}\n}\n","export class CreateCoffeeRepositoryCommand {\n  constructor(\n    public readonly brand: string,\n    public readonly name: string,\n    public readonly type: string,\n    public readonly imgUrl: string,\n    public readonly description: string,\n    public readonly burntLvl: string,\n    public readonly reflink: string,\n    public readonly CoffeeStatus: string\n  ) {}\n}\n","import { interfaces } from 'inversify';\n\nimport {\n  DOMAIN_APPLICATION_SERVICE_IDENTIFIERS,\n  DOMAIN_REPOSITORY_IDENTIFIERS,\n  DOMAIN_UNIT_OF_WORK_IDENTIFIERS,\n} from 'core/CoreModuleSymbols';\nimport { BaseModule } from 'dependency/BaseModule';\nimport { ICoffeeService } from 'core/applicationServices/Coffee/ICoffeeService';\nimport { CoffeeService } from 'core/applicationServices/Coffee/CoffeeService';\nimport { ICoffeeRepository } from 'core/domainServices/Coffee/ICoffeeRepository';\nimport { CoffeeRepository } from 'infrastructure/database/repository/Coffee/CoffeeRepository';\nimport { ICoffeeUnitOfWork } from 'core/domainServices/Coffee/ICoffeeUnitOfWork';\nimport { CoffeeUnitOfWork } from 'infrastructure/database/repository/Coffee/CoffeeUnitOfWork';\n\nexport class CoffeeModule extends BaseModule {\n  constructor() {\n    super((bind: interfaces.Bind): void => {\n      this.init(bind);\n    });\n  }\n\n  public init(bind: interfaces.Bind): void {\n    this.provideCoffeeService(bind);\n    this.provideCoffeeRepository(bind);\n    this.provideCoffeeUnitOfWork(bind);\n  }\n\n  private provideCoffeeService(bind: interfaces.Bind) {\n    bind<ICoffeeService>(\n      DOMAIN_APPLICATION_SERVICE_IDENTIFIERS.COFFEE_SERVICE\n    ).to(CoffeeService);\n  }\n\n  private provideCoffeeRepository(bind: interfaces.Bind) {\n    bind<ICoffeeRepository>(DOMAIN_REPOSITORY_IDENTIFIERS.COFFEE_REPOSITORY).to(\n      CoffeeRepository\n    );\n  }\n\n  private provideCoffeeUnitOfWork(bind: interfaces.Bind) {\n    bind<ICoffeeUnitOfWork>(\n      DOMAIN_UNIT_OF_WORK_IDENTIFIERS.COFFEE_UNIT_OF_WORK\n    ).to(CoffeeUnitOfWork);\n  }\n}\n","import { inject } from 'inversify';\n\nimport { UpdateResult } from 'typeorm';\n\nimport { DOMAIN_MAPPING_IDENTIFIERS } from 'core/CoreModuleSymbols';\nimport { Review } from 'core/domain/Review/Review';\nimport { IReviewRepository } from 'core/domainServices/Review/IReviewRepository';\nimport { AddReviewRepositoryCommand } from 'core/domainServices/Review/requests/command/AddReviewRepositoryCommand';\nimport { Review as ReviewEntity } from 'infrastructure/database/entities/Review';\nimport { DBMapper } from 'infrastructure/database/mappings/DBMapper';\nimport { Repository } from 'infrastructure/database/repository/common/Repository';\nimport {\n  INFRASTRUCTURE_IDENTIFIERS,\n  DATABASE_MAPPING_IDENTIFIERS,\n} from 'infrastructure/InfrastructureModuleSymbols';\nimport { GetReviewsRepositoryQuery } from 'core/domainServices/Review/requests/query/GetReviewsRepositoryQuery';\nimport { UpdateReviewRepositoryCommand } from 'core/domainServices/Review/requests/command/UpdateReviewRepositoryCommand';\nimport { DeleteReviewRepositoryCommand } from 'core/domainServices/Review/requests/command/DeleteReviewRepositoryCommand';\nimport { InfrastructureErrors } from 'infrastructure/common/errors/InfrastructureErrors';\nimport { BaseError } from 'core/common/errors/BaseError';\n\nexport class ReviewRepository\n  extends Repository<ReviewEntity>\n  implements IReviewRepository\n{\n  constructor(\n    @inject(INFRASTRUCTURE_IDENTIFIERS.DB_MAPPER)\n    private readonly dbMapper: DBMapper\n  ) {\n    super(ReviewEntity);\n  }\n\n  async getReviews({ userId }: GetReviewsRepositoryQuery): Promise<Review[]> {\n    const reviews = await this.custom()\n      .createQueryBuilder()\n      .where('Review.userId = :userId ', { userId })\n      .getMany();\n\n    return this.dbMapper.mapper.map<ReviewEntity[], Review[]>(\n      {\n        destination: DOMAIN_MAPPING_IDENTIFIERS.REVIEW_DOMAIN,\n        source: DATABASE_MAPPING_IDENTIFIERS.REVIEW_ENTITY,\n      },\n      reviews\n    );\n  }\n\n  async addReview({\n    rating,\n    look,\n    smell,\n    taste,\n    userId,\n    coffeeId,\n  }: AddReviewRepositoryCommand): Promise<Review> {\n    const review = new ReviewEntity();\n\n    review.userId = userId;\n    review.coffeeId = coffeeId;\n    review.look = look;\n    review.smell = smell;\n    review.taste = taste;\n    review.rating = rating;\n\n    const savedReview = await review.save();\n\n    return this.dbMapper.mapper.map<ReviewEntity, Review>(\n      {\n        destination: DOMAIN_MAPPING_IDENTIFIERS.REVIEW_DOMAIN,\n        source: DATABASE_MAPPING_IDENTIFIERS.REVIEW_ENTITY,\n      },\n      savedReview\n    );\n  }\n\n  async updateReview({\n    review,\n    reviewId,\n  }: UpdateReviewRepositoryCommand): Promise<UpdateResult> {\n    const updatedReview = await this.custom()\n      .createQueryBuilder()\n      .update(ReviewEntity)\n      .set({ ...review })\n      .where('id = :reviewId', { reviewId })\n      .execute();\n\n    return updatedReview;\n  }\n\n  async deleteReview({\n    reviewId,\n  }: DeleteReviewRepositoryCommand): Promise<Review> {\n    const result = await this.custom()\n      .createQueryBuilder()\n      .where('Review.id = :reviewsId ', { reviewId })\n      .getOne();\n\n    if (!result) {\n      throw new BaseError(\n        InfrastructureErrors[InfrastructureErrors.REVIEW_NOT_FOUND]\n      );\n    }\n\n    this.remove(result);\n\n    return this.dbMapper.mapper.map<ReviewEntity, Review>(\n      {\n        destination: DOMAIN_MAPPING_IDENTIFIERS.REVIEW_DOMAIN,\n        source: DATABASE_MAPPING_IDENTIFIERS.REVIEW_ENTITY,\n      },\n      result\n    );\n  }\n}\n","import { Column, Entity, JoinColumn, ManyToOne } from 'typeorm';\n\nimport type { Coffee } from 'infrastructure/database/entities/Coffee';\nimport type { User } from 'infrastructure/database/entities/User';\nimport Model from 'infrastructure/database/entities/Base';\n\n@Entity()\nexport class Review extends Model {\n  @Column('decimal')\n  rating!: number;\n\n  @Column('decimal')\n  look!: number;\n\n  @Column('decimal')\n  smell!: number;\n\n  @Column('decimal')\n  taste!: number;\n\n  @Column('text')\n  coffeeId!: string;\n\n  @ManyToOne('Coffee', (Coffee: Coffee) => Coffee.reviews, {\n    onDelete: 'CASCADE',\n  })\n  @JoinColumn({ name: 'coffee', referencedColumnName: 'id' })\n  coffee!: Coffee;\n\n  @Column('text', { nullable: true })\n  userId!: string;\n\n  @ManyToOne('User', (user: User) => user.reviews)\n  @JoinColumn({ name: 'user', referencedColumnName: 'id' })\n  user!: User;\n}\n","import { inject, injectable } from 'inversify';\n\nimport { UpdateResult } from 'typeorm';\n\nimport { IReviewService } from 'core/applicationServices/Review/IReviewService';\nimport { AddReviewCommand } from 'core/applicationServices/Review/requests/command/AddReviewCommand';\nimport { DOMAIN_REPOSITORY_IDENTIFIERS } from 'core/CoreModuleSymbols';\nimport { Review } from 'core/domain/Review/Review';\nimport { IReviewRepository } from 'core/domainServices/Review/IReviewRepository';\nimport { AddReviewRepositoryCommand } from 'core/domainServices/Review/requests/command/AddReviewRepositoryCommand';\nimport { GetReviewsRepositoryQuery } from 'core/domainServices/Review/requests/query/GetReviewsRepositoryQuery';\nimport { GetUserReviewsQuery } from 'core/applicationServices/Review/requests/query/GetUserReviewsQuery';\nimport { UpdateReviewCommand } from 'core/applicationServices/Review/requests/command/UpdateReviewCommand';\nimport { UpdateReviewRepositoryCommand } from 'core/domainServices/Review/requests/command/UpdateReviewRepositoryCommand';\nimport { DeleteReviewCommand } from 'core/applicationServices/Review/requests/command/DeleteReviewCommand';\nimport { DeleteReviewRepositoryCommand } from 'core/domainServices/Review/requests/command/DeleteReviewRepositoryCommand';\n\n@injectable()\nexport class ReviewService implements IReviewService {\n  constructor(\n    @inject(DOMAIN_REPOSITORY_IDENTIFIERS.REVIEW_REPOSITORY)\n    private readonly reviewRepository: IReviewRepository\n  ) {}\n\n  getAll({ userId }: GetUserReviewsQuery): Promise<Review[]> {\n    return this.reviewRepository.getReviews(\n      new GetReviewsRepositoryQuery(userId)\n    );\n  }\n\n  add({\n    userId,\n    coffeeId,\n    rating,\n    look,\n    smell,\n    taste,\n  }: AddReviewCommand): Promise<Review> {\n    return this.reviewRepository.addReview(\n      new AddReviewRepositoryCommand(\n        userId,\n        coffeeId,\n        rating,\n        look,\n        smell,\n        taste\n      )\n    );\n  }\n\n  update({ reviewId, review }: UpdateReviewCommand): Promise<UpdateResult> {\n    return this.reviewRepository.updateReview(\n      new UpdateReviewRepositoryCommand(review, reviewId)\n    );\n  }\n\n  delete({ reviewId }: DeleteReviewCommand): Promise<Review> {\n    return this.reviewRepository.deleteReview(\n      new DeleteReviewRepositoryCommand(reviewId)\n    );\n  }\n}\n","export class AddReviewRepositoryCommand {\n  constructor(\n    public readonly userId: string,\n    public readonly coffeeId: string,\n    public readonly rating: number,\n    public readonly look: number,\n    public readonly smell: number,\n    public readonly taste: number\n  ) {}\n}\n","export class GetReviewsRepositoryQuery {\n  constructor(public readonly userId: string) {}\n}\n","import { Review } from 'core/domain/Review/Review';\n\nexport class UpdateReviewRepositoryCommand {\n  constructor(\n    public readonly review: Partial<Review>,\n    public readonly reviewId: string\n  ) {}\n}\n","export class DeleteReviewRepositoryCommand {\n  constructor(public readonly reviewId: string) {}\n}\n","import { interfaces } from 'inversify';\n\nimport {\n  DOMAIN_APPLICATION_SERVICE_IDENTIFIERS,\n  DOMAIN_REPOSITORY_IDENTIFIERS,\n} from 'core/CoreModuleSymbols';\nimport { IReviewRepository } from 'core/domainServices/Review/IReviewRepository';\nimport { BaseModule } from 'dependency/BaseModule';\nimport { ReviewRepository } from 'infrastructure/database/repository/Review/ReviewRepository';\nimport { ReviewService } from 'core/applicationServices/Review/ReviewService';\nimport { IReviewService } from 'core/applicationServices/Review/IReviewService';\n\nexport class ReviewModule extends BaseModule {\n  constructor() {\n    super((bind: interfaces.Bind): void => {\n      this.init(bind);\n    });\n  }\n\n  public init(bind: interfaces.Bind): void {\n    this.provideReviewService(bind);\n    this.provideReviewRepository(bind);\n  }\n\n  private provideReviewService(bind: interfaces.Bind): void {\n    bind<IReviewService>(\n      DOMAIN_APPLICATION_SERVICE_IDENTIFIERS.REVIEW_SERVICE\n    ).to(ReviewService);\n  }\n\n  private provideReviewRepository(bind: interfaces.Bind): void {\n    bind<IReviewRepository>(DOMAIN_REPOSITORY_IDENTIFIERS.REVIEW_REPOSITORY).to(\n      ReviewRepository\n    );\n  }\n}\n"],"mappings":"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","names":["module","config","import_inversify_express_utils","import_inversify","import_inversify","import_inversify","import_mapper","import_winston","import_express","import_http_status_codes","import_inversify","config","UserService","import_inversify_express_utils","import_http_status_codes","import_inversify","import_inversify","import_inversify_express_utils","import_http_status_codes","import_inversify","express","morgan","methodOverride","helmet","cors","swaggerUi","import_inversify","format","DailyRotateFile","winstonFormat","import_inversify","import_http_status_codes","import_inversify","jwt","express","import_inversify","import_http_status_codes","import_inversify","import_inversify","import_bcrypt","import_typeorm","import_typeorm","User","import_typeorm","import_inversify","import_typeorm","USER_ROLE","Role","USER_ROLE","InfrastructureErrors","User","Role","import_inversify","import_inversify","import_inversify","import_typeorm","Role","import_inversify","User","User","import_inversify","import_inversify","import_typeorm","COFFEE_TYPE","COFFEE_BURNT_LVL","COFFEE_STATUS","Coffee","Review","Coffee","import_inversify","import_inversify","import_typeorm","Review","Coffee","Review","import_inversify"]}