{"version":3,"sources":["../../../../src/dependency/shared/Authentication/AuthenticationModule.ts","../../../../src/dependency/BaseModule.ts","../../../../src/core/applicationServices/Authentication/AuthenticationService.ts","../../../../src/core/CoreModuleSymbols.ts","../../../../src/core/domainServices/User/request/UnitOfWorkRepository/command/AddUserUnitOfWorkRepositoryCommand.ts","../../../../src/core/domainServices/User/request/Repository/query/FindUserByEmailRepositoryQuery.ts"],"sourcesContent":["import { interfaces } from 'inversify';\n\nimport { BaseModule } from 'dependency/BaseModule';\n\nimport { IAuthenticationService } from 'core/applicationServices/Authentication/IAuthenticationService';\nimport { AuthenticationService } from 'core/applicationServices/Authentication/AuthenticationService';\n\nimport { DOMAIN_APPLICATION_SERVICE_IDENTIFIERS } from 'core/CoreModuleSymbols';\n\nexport class AuthenticationModule extends BaseModule {\n  constructor() {\n    super((bind: interfaces.Bind): void => {\n      this.init(bind);\n    });\n  }\n\n  public init(bind: interfaces.Bind): void {\n    this.provideAuthenticationService(bind);\n  }\n\n  private provideAuthenticationService(bind: interfaces.Bind): void {\n    bind<IAuthenticationService>(\n      DOMAIN_APPLICATION_SERVICE_IDENTIFIERS.AUTHENTICATION_SERVICE\n    ).to(AuthenticationService);\n  }\n}\n","import { ContainerModule, interfaces } from 'inversify';\n\nexport abstract class BaseModule extends ContainerModule {\n  public abstract init(bind: interfaces.Bind): void;\n}\n","import { inject, injectable } from 'inversify';\n\nimport { compare } from 'bcrypt';\n\nimport {\n  DOMAIN_REPOSITORY_IDENTIFIERS,\n  DOMAIN_UNIT_OF_WORK_IDENTIFIERS,\n} from 'core/CoreModuleSymbols';\n\nimport { IAuthenticationService } from 'core/applicationServices/Authentication/IAuthenticationService';\nimport { IUserUnitOfWork } from 'core/domainServices/User/IUserUnitOfWork';\nimport { User } from 'core/domain/User/User';\nimport { AddUserUnitOfWorkRepositoryCommand } from 'core/domainServices/User/request/UnitOfWorkRepository/command/AddUserUnitOfWorkRepositoryCommand';\nimport { SignUpCommand } from 'core/applicationServices/Authentication/requests/repository/command/SignUpCommand';\n\nimport { AuthenticationQuery } from 'core/applicationServices/Authentication/requests/handler/query/AuthenticationQuery';\nimport { IUserRepository } from 'core/domainServices/User/IUserRepository';\nimport { FindUserByEmailRepositoryQuery } from 'core/domainServices/User/request/Repository/query/FindUserByEmailRepositoryQuery';\n\n@injectable()\nexport class AuthenticationService implements IAuthenticationService {\n  constructor(\n    @inject(DOMAIN_UNIT_OF_WORK_IDENTIFIERS.USER_UNIT_OF_WORK)\n    private readonly userUnitOfWork: IUserUnitOfWork,\n    @inject(DOMAIN_REPOSITORY_IDENTIFIERS.USER_REPOSITORY)\n    private readonly userRepository: IUserRepository\n  ) {}\n\n  signUp({ nickname, email, password }: SignUpCommand): Promise<User> {\n    return this.userUnitOfWork.addUser(\n      new AddUserUnitOfWorkRepositoryCommand(email, password, nickname)\n    );\n  }\n\n  async verifyCredentials({\n    email,\n    password,\n  }: AuthenticationQuery): Promise<User | undefined> {\n    const user = await this.userRepository.findUserByEmail(\n      new FindUserByEmailRepositoryQuery(email)\n    );\n\n    if (!user || !(await compare(password, user?.password || ''))) {\n      return undefined;\n    }\n\n    return user;\n  }\n}\n","export const DOMAIN_APPLICATION_SERVICE_IDENTIFIERS = {\n  USER_SERVICE: Symbol.for('UserService'),\n  AUTHENTICATION_SERVICE: Symbol.for('AuthenticationService'),\n  COFFEE_SERVICE: Symbol.for('CoffeeService'),\n  REVIEW_SERVICE: Symbol.for('ReviewService'),\n};\n\nexport const DOMAIN_MAPPING_IDENTIFIERS = {\n  USER_DOMAIN: Symbol.for('UserDomain'),\n  ROLE_DOMAIN: Symbol.for('RoleDomain'),\n  COFFEE_DOMAIN: Symbol.for('CoffeeDomain'),\n  REVIEW_DOMAIN: Symbol.for('ReviewDomain'),\n};\n\nexport const DOMAIN_REPOSITORY_IDENTIFIERS = {\n  ROLE_REPOSITORY: Symbol.for('RoleRepository'),\n  USER_REPOSITORY: Symbol.for('UserRepository'),\n  COFFEE_REPOSITORY: Symbol.for('CoffeeRepository'),\n  REVIEW_REPOSITORY: Symbol.for('ReviewRepository'),\n};\n\nexport const DOMAIN_UNIT_OF_WORK_IDENTIFIERS = {\n  USER_UNIT_OF_WORK: Symbol.for('UserUnitOfWork'),\n  COFFEE_UNIT_OF_WORK: Symbol.for('CoffeeUnitOfWork'),\n};\n","export class AddUserUnitOfWorkRepositoryCommand {\n  constructor(\n    public readonly email: string,\n    public readonly password: string,\n    public readonly nickname: string\n  ) {}\n}\n","export class FindUserByEmailRepositoryQuery {\n  constructor(public readonly email: string) {}\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAA,uBAA4C;AAErC,IAAe,aAAf,cAAkC,iCAAgB;AAEzD;;;ACJA,IAAAA,oBAAmC;AAEnC,oBAAwB;;;ACFjB,IAAM,yCAAyC;AAAA,EACpD,cAAc,OAAO,IAAI,aAAa;AAAA,EACtC,wBAAwB,OAAO,IAAI,uBAAuB;AAAA,EAC1D,gBAAgB,OAAO,IAAI,eAAe;AAAA,EAC1C,gBAAgB,OAAO,IAAI,eAAe;AAC5C;AAEO,IAAM,6BAA6B;AAAA,EACxC,aAAa,OAAO,IAAI,YAAY;AAAA,EACpC,aAAa,OAAO,IAAI,YAAY;AAAA,EACpC,eAAe,OAAO,IAAI,cAAc;AAAA,EACxC,eAAe,OAAO,IAAI,cAAc;AAC1C;AAEO,IAAM,gCAAgC;AAAA,EAC3C,iBAAiB,OAAO,IAAI,gBAAgB;AAAA,EAC5C,iBAAiB,OAAO,IAAI,gBAAgB;AAAA,EAC5C,mBAAmB,OAAO,IAAI,kBAAkB;AAAA,EAChD,mBAAmB,OAAO,IAAI,kBAAkB;AAClD;AAEO,IAAM,kCAAkC;AAAA,EAC7C,mBAAmB,OAAO,IAAI,gBAAgB;AAAA,EAC9C,qBAAqB,OAAO,IAAI,kBAAkB;AACpD;;;ACxBO,IAAM,qCAAN,MAAyC;AAAA,EAC9C,YACkB,OACA,UACA,UAChB;AAHgB;AACA;AACA;AAAA,EACf;AACL;;;ACNO,IAAM,iCAAN,MAAqC;AAAA,EAC1C,YAA4B,OAAe;AAAf;AAAA,EAAgB;AAC9C;;;AHkBO,IAAM,wBAAN,MAA8D;AAAA,EACnE,YAEmB,gBAEA,gBACjB;AAHiB;AAEA;AAAA,EAChB;AAAA,EAEH,OAAO,EAAE,UAAU,OAAO,SAAS,GAAiC;AAClE,WAAO,KAAK,eAAe;AAAA,MACzB,IAAI,mCAAmC,OAAO,UAAU,QAAQ;AAAA,IAClE;AAAA,EACF;AAAA,EAEA,MAAM,kBAAkB;AAAA,IACtB;AAAA,IACA;AAAA,EACF,GAAmD;AACjD,UAAM,OAAO,MAAM,KAAK,eAAe;AAAA,MACrC,IAAI,+BAA+B,KAAK;AAAA,IAC1C;AAEA,QAAI,CAAC,QAAQ,CAAE,UAAM,uBAAQ,UAAU,MAAM,YAAY,EAAE,GAAI;AAC7D,aAAO;AAAA,IACT;AAEA,WAAO;AAAA,EACT;AACF;AA5Ba,wBAAN;AAAA,MADN,8BAAW;AAAA,EAGR,uBAAC,0BAAO,gCAAgC,iBAAiB;AAAA,EAEzD,uBAAC,0BAAO,8BAA8B,eAAe;AAAA,GAJ5C;;;AFXN,IAAM,uBAAN,cAAmC,WAAW;AAAA,EACnD,cAAc;AACZ,UAAM,CAAC,SAAgC;AACrC,WAAK,KAAK,IAAI;AAAA,IAChB,CAAC;AAAA,EACH;AAAA,EAEO,KAAK,MAA6B;AACvC,SAAK,6BAA6B,IAAI;AAAA,EACxC;AAAA,EAEQ,6BAA6B,MAA6B;AAChE;AAAA,MACE,uCAAuC;AAAA,IACzC,EAAE,GAAG,qBAAqB;AAAA,EAC5B;AACF;","names":["import_inversify"]}