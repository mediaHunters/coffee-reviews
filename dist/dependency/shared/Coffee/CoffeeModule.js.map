{"version":3,"sources":["../../../../src/dependency/shared/Coffee/CoffeeModule.ts","../../../../src/core/CoreModuleSymbols.ts","../../../../src/dependency/BaseModule.ts","../../../../src/core/applicationServices/Coffee/CoffeeService.ts","../../../../src/core/domainServices/Coffee/requests/UnitOfWork/command/AddCoffeeUnitOfWorkRepositoryCommand.ts","../../../../src/core/domainServices/Coffee/requests/UnitOfWork/command/DeleteCoffeeUnitOfWorkRepositoryCommand.ts","../../../../src/core/domainServices/Coffee/requests/UnitOfWork/query/FindCoffeeRepositoryQuery.ts","../../../../src/infrastructure/database/repository/Coffee/CoffeeRepository.ts","../../../../src/infrastructure/database/repository/common/Repository.ts","../../../../src/infrastructure/database/entities/Coffee.ts","../../../../src/core/domain/Coffee/CoffeeType.ts","../../../../src/core/domain/Coffee/CoffeeBurnLvl.ts","../../../../src/infrastructure/database/enum/CoffeStatus.ts","../../../../src/infrastructure/database/entities/Base.ts","../../../../src/infrastructure/InfrastructureModuleSymbols.ts","../../../../src/infrastructure/common/errors/InfrastructureErrors.ts","../../../../src/core/common/errors/BaseError.ts","../../../../src/infrastructure/database/repository/Coffee/CoffeeUnitOfWork.ts","../../../../src/core/domainServices/Coffee/requests/repository/command/DeleteCoffeeRepositoryCommand.ts","../../../../src/core/domainServices/Coffee/requests/repository/command/CreateCoffeeRepositoryCommand.ts"],"sourcesContent":["import { interfaces } from 'inversify';\n\nimport {\n  DOMAIN_APPLICATION_SERVICE_IDENTIFIERS,\n  DOMAIN_REPOSITORY_IDENTIFIERS,\n  DOMAIN_UNIT_OF_WORK_IDENTIFIERS,\n} from 'core/CoreModuleSymbols';\nimport { BaseModule } from 'dependency/BaseModule';\nimport { ICoffeeService } from 'core/applicationServices/Coffee/ICoffeeService';\nimport { CoffeeService } from 'core/applicationServices/Coffee/CoffeeService';\nimport { ICoffeeRepository } from 'core/domainServices/Coffee/ICoffeeRepository';\nimport { CoffeeRepository } from 'infrastructure/database/repository/Coffee/CoffeeRepository';\nimport { ICoffeeUnitOfWork } from 'core/domainServices/Coffee/ICoffeeUnitOfWork';\nimport { CoffeeUnitOfWork } from 'infrastructure/database/repository/Coffee/CoffeeUnitOfWork';\n\nexport class CoffeeModule extends BaseModule {\n  constructor() {\n    super((bind: interfaces.Bind): void => {\n      this.init(bind);\n    });\n  }\n\n  public init(bind: interfaces.Bind): void {\n    this.provideCoffeeService(bind);\n    this.provideCoffeeRepository(bind);\n    this.provideCoffeeUnitOfWork(bind);\n  }\n\n  private provideCoffeeService(bind: interfaces.Bind) {\n    bind<ICoffeeService>(\n      DOMAIN_APPLICATION_SERVICE_IDENTIFIERS.COFFEE_SERVICE\n    ).to(CoffeeService);\n  }\n\n  private provideCoffeeRepository(bind: interfaces.Bind) {\n    bind<ICoffeeRepository>(DOMAIN_REPOSITORY_IDENTIFIERS.COFFEE_REPOSITORY).to(\n      CoffeeRepository\n    );\n  }\n\n  private provideCoffeeUnitOfWork(bind: interfaces.Bind) {\n    bind<ICoffeeUnitOfWork>(\n      DOMAIN_UNIT_OF_WORK_IDENTIFIERS.COFFEE_UNIT_OF_WORK\n    ).to(CoffeeUnitOfWork);\n  }\n}\n","export const DOMAIN_APPLICATION_SERVICE_IDENTIFIERS = {\n  USER_SERVICE: Symbol.for('UserService'),\n  AUTHENTICATION_SERVICE: Symbol.for('AuthenticationService'),\n  COFFEE_SERVICE: Symbol.for('CoffeeService'),\n  REVIEW_SERVICE: Symbol.for('ReviewService'),\n};\n\nexport const DOMAIN_MAPPING_IDENTIFIERS = {\n  USER_DOMAIN: Symbol.for('UserDomain'),\n  ROLE_DOMAIN: Symbol.for('RoleDomain'),\n  COFFEE_DOMAIN: Symbol.for('CoffeeDomain'),\n  REVIEW_DOMAIN: Symbol.for('ReviewDomain'),\n};\n\nexport const DOMAIN_REPOSITORY_IDENTIFIERS = {\n  ROLE_REPOSITORY: Symbol.for('RoleRepository'),\n  USER_REPOSITORY: Symbol.for('UserRepository'),\n  COFFEE_REPOSITORY: Symbol.for('CoffeeRepository'),\n  REVIEW_REPOSITORY: Symbol.for('ReviewRepository'),\n};\n\nexport const DOMAIN_UNIT_OF_WORK_IDENTIFIERS = {\n  USER_UNIT_OF_WORK: Symbol.for('UserUnitOfWork'),\n  COFFEE_UNIT_OF_WORK: Symbol.for('CoffeeUnitOfWork'),\n};\n","import { ContainerModule, interfaces } from 'inversify';\n\nexport abstract class BaseModule extends ContainerModule {\n  public abstract init(bind: interfaces.Bind): void;\n}\n","import { inject, injectable } from 'inversify';\n\nimport { UpdateResult } from 'typeorm';\n\nimport { ICoffeeService } from 'core/applicationServices/Coffee/ICoffeeService';\nimport {\n  DOMAIN_REPOSITORY_IDENTIFIERS,\n  DOMAIN_UNIT_OF_WORK_IDENTIFIERS,\n} from 'core/CoreModuleSymbols';\nimport { Coffee } from 'core/domain/Coffee/Coffee';\nimport { ICoffeeUnitOfWork } from 'core/domainServices/Coffee/ICoffeeUnitOfWork';\nimport { CreateCoffeeUnitOfWorkRepositoryCommand } from 'core/domainServices/Coffee/requests/UnitOfWork/command/AddCoffeeUnitOfWorkRepositoryCommand';\nimport { DeleteCoffeeCommand } from 'core/applicationServices/Coffee/requests/command/DeleteCoffeeCommand';\nimport { DeleteCoffeeUnitOfWorkRepositoryCommand } from 'core/domainServices/Coffee/requests/UnitOfWork/command/DeleteCoffeeUnitOfWorkRepositoryCommand';\nimport { ICoffeeRepository } from 'core/domainServices/Coffee/ICoffeeRepository';\nimport { FindOneCoffeeRepositoryQuery } from 'core/domainServices/Coffee/requests/UnitOfWork/query/FindCoffeeRepositoryQuery';\nimport { CreateCoffeeCommand } from 'core/applicationServices/Coffee/requests/command/AddCoffeeCommand';\nimport { UpdateCoffeeCommand } from 'core/applicationServices/Coffee/requests/command/UpdateCoffeeCommand';\n\n@injectable()\nexport class CoffeeService implements ICoffeeService {\n  constructor(\n    @inject(DOMAIN_UNIT_OF_WORK_IDENTIFIERS.COFFEE_UNIT_OF_WORK)\n    private readonly coffeUnitOfWork: ICoffeeUnitOfWork,\n    @inject(DOMAIN_REPOSITORY_IDENTIFIERS.COFFEE_REPOSITORY)\n    private readonly coffeRepository: ICoffeeRepository\n  ) {}\n\n  findAll(): Promise<Coffee[]> {\n    return this.coffeRepository.findAllCoffees();\n  }\n\n  findOne({ id }: FindOneCoffeeRepositoryQuery): Promise<Coffee> {\n    return this.coffeRepository.findOneCoffee(\n      new FindOneCoffeeRepositoryQuery(id)\n    );\n  }\n\n  create({\n    brand,\n    name,\n    type,\n    imgUrl,\n    description,\n    burntLvl,\n    reflink,\n    CoffeeStatus,\n  }: CreateCoffeeCommand): Promise<Coffee> {\n    return this.coffeRepository.createCoffee(\n      new CreateCoffeeUnitOfWorkRepositoryCommand(\n        brand,\n        name,\n        type,\n        imgUrl,\n        description,\n        burntLvl,\n        CoffeeStatus,\n        reflink || ''\n      )\n    );\n  }\n\n  update({ coffee, coffeeId }: UpdateCoffeeCommand): Promise<UpdateResult> {\n    return this.coffeRepository.updateCoffee({ coffee, coffeeId });\n  }\n\n  delete(command: DeleteCoffeeCommand): Promise<Coffee> {\n    return this.coffeUnitOfWork.delete(\n      new DeleteCoffeeUnitOfWorkRepositoryCommand(command.id)\n    );\n  }\n\n  // addReview({\n  //   userId,\n  //   coffeeId,\n  //   look,\n  //   smell,\n  //   taste,\n  // }: AddCoffeeReviewCommand): Promise<Coffee> {\n  //   return this.CoffeUnitOfWork.addCoffeeReview(\n  //     new AddCoffeeReviewUnitOfWorkRepositoryCommand(\n  //       userId,\n  //       coffeeId,\n  //       look,\n  //       smell,\n  //       taste\n  //     )\n  //   );\n  // }\n\n  // sortAndPaginate({ sortBy, skip, take }: SearchQuery): Promise<Coffee> {\n  //   return this.CoffeRepository.sortAndPaginate(\n  //     new SearchRepositoryQuery(sortBy, skip, take)\n  //   );\n  // }\n}\n","export class CreateCoffeeUnitOfWorkRepositoryCommand {\n  constructor(\n    public readonly brand: string,\n    public readonly name: string,\n    public readonly type: string,\n    public readonly imgUrl: string,\n    public readonly description: string,\n    public readonly burntLvl: string,\n    public readonly reflink: string,\n    public readonly CoffeeStatus: string\n  ) {}\n}\n","export class DeleteCoffeeUnitOfWorkRepositoryCommand {\n  constructor(public readonly id: string) {}\n}\n","export class FindOneCoffeeRepositoryQuery {\n  constructor(public readonly id: string) {}\n}\n","import { inject } from 'inversify';\n\nimport { UpdateResult } from 'typeorm';\n\nimport { Repository } from 'infrastructure/database/repository/common/Repository';\nimport { Coffee as CoffeeEntity } from 'infrastructure/database/entities/Coffee';\nimport { ICoffeeRepository } from 'core/domainServices/Coffee/ICoffeeRepository';\nimport { CreateCoffeeRepositoryCommand } from 'core/domainServices/Coffee/requests/repository/command/CreateCoffeeRepositoryCommand';\nimport { DBMapper } from 'infrastructure/database/mappings/DBMapper';\nimport {\n  DATABASE_MAPPING_IDENTIFIERS,\n  INFRASTRUCTURE_IDENTIFIERS,\n} from 'infrastructure/InfrastructureModuleSymbols';\nimport { DOMAIN_MAPPING_IDENTIFIERS } from 'core/CoreModuleSymbols';\nimport { DeleteCoffeeRepositoryCommand } from 'core/domainServices/Coffee/requests/repository/command/DeleteCoffeeRepositoryCommand';\nimport { InfrastructureErrors } from 'infrastructure/common/errors/InfrastructureErrors';\nimport { BaseError } from 'core/common/errors/BaseError';\nimport { Coffee } from 'core/domain/Coffee/Coffee';\nimport { FindOneCoffeeRepositoryQuery } from 'core/domainServices/Coffee/requests/UnitOfWork/query/FindCoffeeRepositoryQuery';\nimport { UpdateCoffeeRepositoryCommand } from 'core/domainServices/Coffee/requests/repository/command/UpdateCoffeeRepositoryCommand';\n\nexport class CoffeeRepository\n  extends Repository<CoffeeEntity>\n  implements ICoffeeRepository\n{\n  constructor(\n    @inject(INFRASTRUCTURE_IDENTIFIERS.DB_MAPPER)\n    private readonly dbMapper: DBMapper\n  ) {\n    super(CoffeeEntity);\n  }\n\n  async findAllCoffees(): Promise<Coffee[]> {\n    const coffees = await this.custom()\n      .createQueryBuilder()\n      .leftJoinAndSelect('Coffee.reviews', 'Review')\n      .getMany();\n\n    return this.dbMapper.mapper.map<CoffeeEntity[], Coffee[]>(\n      {\n        destination: DOMAIN_MAPPING_IDENTIFIERS.COFFEE_DOMAIN,\n        source: DATABASE_MAPPING_IDENTIFIERS.COFFEE_ENTITY,\n      },\n      coffees\n    );\n  }\n\n  async findOneCoffee({ id }: FindOneCoffeeRepositoryQuery): Promise<Coffee> {\n    const coffee = await this.custom()\n      .createQueryBuilder()\n      .leftJoinAndSelect('Coffee.reviews', 'Review')\n      .where('Coffee.id = :id ', { id })\n      .getOne();\n\n    if (!coffee) {\n      throw new BaseError(\n        InfrastructureErrors[InfrastructureErrors.COFFEE_NOT_FOUND]\n      );\n    }\n\n    return this.dbMapper.mapper.map<CoffeeEntity, Coffee>(\n      {\n        destination: DOMAIN_MAPPING_IDENTIFIERS.COFFEE_DOMAIN,\n        source: DATABASE_MAPPING_IDENTIFIERS.COFFEE_ENTITY,\n      },\n      coffee\n    );\n  }\n\n  async createCoffee({\n    CoffeeStatus,\n    brand,\n    name,\n    type,\n    imgUrl,\n    description,\n    burntLvl,\n    reflink,\n  }: CreateCoffeeRepositoryCommand): Promise<Coffee> {\n    const coffee = new CoffeeEntity();\n    coffee.brand = brand;\n    coffee.name = name;\n    coffee.type = type;\n    coffee.imgUrl = imgUrl;\n    coffee.description = description;\n    coffee.burntLvl = burntLvl;\n    coffee.reflink = reflink;\n    coffee.CoffeeStatus = CoffeeStatus;\n    coffee.createdAt = new Date();\n    coffee.type = type;\n\n    coffee.reviews = [];\n    const savedCoffee = await this.save(coffee);\n\n    return this.dbMapper.mapper.map<CoffeeEntity, Coffee>(\n      {\n        destination: DOMAIN_MAPPING_IDENTIFIERS.COFFEE_DOMAIN,\n        source: DATABASE_MAPPING_IDENTIFIERS.COFFEE_ENTITY,\n      },\n      savedCoffee\n    );\n  }\n\n  async updateCoffee({\n    coffee,\n    coffeeId,\n  }: UpdateCoffeeRepositoryCommand): Promise<UpdateResult> {\n    const updatedCoffee = await this.custom()\n      .createQueryBuilder()\n      .update(CoffeeEntity)\n      .set({ ...coffee })\n      .where('id = :id', { id: coffeeId })\n      .execute();\n\n    return updatedCoffee;\n  }\n\n  // TODO: make it transational\n  async deleteCoffee({ id }: DeleteCoffeeRepositoryCommand): Promise<Coffee> {\n    const result = await this.custom()\n      .createQueryBuilder()\n      .leftJoinAndSelect('Coffee.reviews', 'Review')\n      .where('Coffee.id = :id ', { id })\n      .getOne();\n\n    if (!result) {\n      throw new BaseError(\n        InfrastructureErrors[InfrastructureErrors.COFFEE_NOT_FOUND]\n      );\n    }\n\n    this.remove(result);\n\n    return this.dbMapper.mapper.map<CoffeeEntity, Coffee>(\n      {\n        destination: DOMAIN_MAPPING_IDENTIFIERS.COFFEE_DOMAIN,\n        source: DATABASE_MAPPING_IDENTIFIERS.COFFEE_ENTITY,\n      },\n      result\n    );\n  }\n\n  // sortAndPaginate({\n  //   sortBy,\n  //   skip,\n  //   take,\n  // }: SearchRepositoryQuery): Promise<Coffee> {\n  //   // const result = await this.custom().createQueryBuilder().addOrderBy(sortB, skip, take))\n  // }\n}\n","import { AbstractRepository, getRepository, ObjectLiteral } from 'typeorm';\nimport { injectable } from 'inversify';\n\nimport { ObjectType } from 'typeorm/common/ObjectType';\n\nimport { Repository as ORMRepository } from 'typeorm/repository/Repository';\n\nimport { IRepository } from 'infrastructure/database/repository/common/IRepository';\nimport { Query } from 'infrastructure/database/repository/common/Query';\nimport { UpdateQueryData } from 'infrastructure/database/repository/common/UpdateQueryData';\n\n@injectable()\nexport abstract class Repository<E extends ObjectLiteral>\n  extends AbstractRepository<E>\n  implements IRepository<E, ORMRepository<E>>\n{\n  constructor(protected readonly entity: ObjectType<E>) {\n    super();\n  }\n\n  public async find(id: string | number): Promise<E | undefined> {\n    return this.getDBRepository().findOne(id);\n  }\n\n  public findBy(condition: Query<E>): Promise<E[]> {\n    return this.getDBRepository().find(condition);\n  }\n\n  public async findMany(ids: string[] | number[]): Promise<E[]> {\n    return this.getDBRepository().findByIds(ids);\n  }\n\n  public async findAll(): Promise<E[]> {\n    return this.getDBRepository().find();\n  }\n\n  public async query(query: string, parameters?: any[]): Promise<E[]> {\n    return this.getDBRepository().query(query, parameters);\n  }\n\n  public async update(\n    condition: string | number,\n    data: UpdateQueryData<E>\n  ): Promise<boolean> {\n    return !!(await this.getDBRepository().update(condition, data));\n  }\n\n  public async updateAll(\n    condition: string[] | number[],\n    data: E\n  ): Promise<boolean> {\n    return !!(await this.getDBRepository().update(condition, data));\n  }\n\n  public async delete(condition: string | number): Promise<boolean> {\n    return !!(await this.getDBRepository().delete(condition));\n  }\n\n  public async deleteAll(condition: string[] | number[]): Promise<boolean> {\n    return !!(await this.getDBRepository().delete(condition));\n  }\n\n  public async remove(entity: E): Promise<E> {\n    return this.getDBRepository().remove(entity);\n  }\n\n  public async removeAll(entities: E[]): Promise<E[]> {\n    return this.getDBRepository().remove(entities);\n  }\n\n  public async save(entity: E): Promise<E> {\n    return this.getDBRepository().save(entity as any);\n  }\n\n  public async saveAll(entities: E[]): Promise<E[]> {\n    return this.getDBRepository().save(entities as any);\n  }\n\n  public custom(): ORMRepository<E> {\n    return this.getDBRepository();\n  }\n\n  protected getConnectionName(): string | undefined {\n    return process.env.ORM_CONNECTION;\n  }\n\n  private getDBRepository(): ORMRepository<E> {\n    return getRepository<E>(this.entity, this.getConnectionName());\n  }\n}\n","import { Column, Entity, OneToMany } from 'typeorm';\n\nimport { COFFEE_TYPE } from 'core/domain/Coffee/CoffeeType';\nimport { COFFEE_BURNT_LVL } from 'core/domain/Coffee/CoffeeBurnLvl';\nimport type { Review } from 'infrastructure/database/entities/Review';\nimport { COFFEE_STATUS } from 'infrastructure/database/enum/CoffeStatus';\nimport Model from 'infrastructure/database/entities/Base';\n\n@Entity()\nexport class Coffee extends Model {\n  @Column('text')\n  brand!: string;\n\n  @Column('text')\n  name!: string;\n\n  @Column({\n    enum: COFFEE_TYPE,\n    nullable: false,\n    type: 'enum',\n  })\n  type!: string;\n\n  @Column('text')\n  imgUrl!: string;\n\n  @Column('text')\n  description!: string;\n\n  @Column({\n    enum: COFFEE_BURNT_LVL,\n    nullable: false,\n    type: 'enum',\n  })\n  burntLvl!: string;\n\n  @Column('text')\n  reflink!: string;\n\n  @Column({\n    enum: COFFEE_STATUS,\n    nullable: false,\n    type: 'enum',\n    default: COFFEE_STATUS.WAITING_QUEUE,\n  })\n  CoffeeStatus!: string;\n\n  @OneToMany('Review', (Review: Review) => Review.coffee, {\n    cascade: true,\n  })\n  reviews!: Review[];\n}\n","export enum COFFEE_TYPE {\n  BEANS = 'BEANS',\n  POWDER = 'POWDER',\n}\n","export enum COFFEE_BURNT_LVL {\n  LIGHT_ROAST = 'LIGHT_ROAST',\n  MEDUIM_ROAST = 'MEDIUM_ROAST',\n  DARK_ROAST = 'DARK_ROAST',\n}\n","export enum COFFEE_STATUS {\n  WAITING_QUEUE = 'WAITING_QUEUE',\n  VERIFIED = 'VERIFIED',\n  BLOCKED = 'BLOCKED',\n}\n","import {\n  CreateDateColumn,\n  UpdateDateColumn,\n  PrimaryGeneratedColumn,\n  BaseEntity,\n} from 'typeorm';\n\nexport default abstract class Model extends BaseEntity {\n  @PrimaryGeneratedColumn('uuid')\n  id!: string;\n\n  @CreateDateColumn()\n  createdAt!: Date;\n\n  @UpdateDateColumn()\n  updatedAt!: Date;\n}\n","export const DATABASE_IDENTIFIERS = {\n  ORM: Symbol.for('Orm'),\n};\n\nexport const INFRASTRUCTURE_IDENTIFIERS = {\n  DB_MAPPER: Symbol.for('DBMapper'),\n};\n\nexport const DATABASE_MAPPING_IDENTIFIERS = {\n  USER_ENTITY: Symbol.for('UserEntity'),\n  ROLE_ENTITY: Symbol.for('RoleEntity'),\n  COFFEE_ENTITY: Symbol.for('CoffeeEntity'),\n  REVIEW_ENTITY: Symbol.for('ReviewEntity'),\n};\n","export enum InfrastructureErrors {\n  USER_NOT_FOUND,\n  USER_ALREADY_EXIST,\n  ROLE_NOT_FOUND,\n  COFFEE_NOT_FOUND,\n  REVIEW_NOT_FOUND,\n}\n","export class BaseError implements Error {\n  constructor(\n    public readonly code?: string,\n    public readonly message: string = '',\n    public readonly name: string = ''\n  ) {}\n}\n","import { inject, injectable } from 'inversify';\n\nimport { DOMAIN_REPOSITORY_IDENTIFIERS } from 'core/CoreModuleSymbols';\nimport { Coffee } from 'core/domain/Coffee/Coffee';\nimport { ICoffeeUnitOfWork } from 'core/domainServices/Coffee/ICoffeeUnitOfWork';\nimport { CreateCoffeeUnitOfWorkRepositoryCommand } from 'core/domainServices/Coffee/requests/UnitOfWork/command/AddCoffeeUnitOfWorkRepositoryCommand';\nimport { ICoffeeRepository } from 'core/domainServices/Coffee/ICoffeeRepository';\nimport { DeleteCoffeeRepositoryCommand } from 'core/domainServices/Coffee/requests/repository/command/DeleteCoffeeRepositoryCommand';\nimport { IUserRepository } from 'core/domainServices/User/IUserRepository';\nimport { CreateCoffeeRepositoryCommand } from 'core/domainServices/Coffee/requests/repository/command/CreateCoffeeRepositoryCommand';\n\n@injectable()\nexport class CoffeeUnitOfWork implements ICoffeeUnitOfWork {\n  constructor(\n    @inject(DOMAIN_REPOSITORY_IDENTIFIERS.COFFEE_REPOSITORY)\n    private readonly coffeeRepository: ICoffeeRepository,\n    @inject(DOMAIN_REPOSITORY_IDENTIFIERS.USER_REPOSITORY)\n    private readonly userRepository: IUserRepository\n  ) {}\n\n  create({\n    brand,\n    name,\n    type,\n    imgUrl,\n    description,\n    burntLvl,\n    reflink,\n    CoffeeStatus,\n  }: CreateCoffeeUnitOfWorkRepositoryCommand): Promise<Coffee> {\n    return this.coffeeRepository.createCoffee(\n      new CreateCoffeeRepositoryCommand(\n        brand,\n        name,\n        type,\n        imgUrl,\n        description,\n        burntLvl,\n        reflink,\n        CoffeeStatus\n      )\n    );\n  }\n\n  delete({ id }: DeleteCoffeeRepositoryCommand): Promise<Coffee> {\n    return this.coffeeRepository.deleteCoffee(\n      new DeleteCoffeeRepositoryCommand(id)\n    );\n  }\n\n  // @Transactional({\n  //   connectionName: () => process.env.ORM_CONNECTION,\n  // })\n  // async addCoffeeReview({\n  //   userId,\n  //   coffeeId,\n  //   look,\n  //   smell,\n  //   taste,\n  // }: AddReviewRepositoryCommand): Promise<Coffee> {\n\n  //   return this.coffeeRepository.addCoffeeReview(\n  //     new AddReviewRepositoryCommand(userId, coffeeId, look, smell, taste)\n  //   );\n  // }\n}\n","export class DeleteCoffeeRepositoryCommand {\n  constructor(public readonly id: string) {}\n}\n","export class CreateCoffeeRepositoryCommand {\n  constructor(\n    public readonly brand: string,\n    public readonly name: string,\n    public readonly type: string,\n    public readonly imgUrl: string,\n    public readonly description: string,\n    public readonly burntLvl: string,\n    public readonly reflink: string,\n    public readonly CoffeeStatus: string\n  ) {}\n}\n"],"mappings":"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","names":["import_inversify","import_inversify","import_inversify","import_typeorm","COFFEE_TYPE","COFFEE_BURNT_LVL","COFFEE_STATUS","import_typeorm","InfrastructureErrors","import_inversify"]}