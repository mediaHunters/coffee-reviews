{"version":3,"sources":["../../../src/dependency/common/ApplicationModule.ts","../../../src/ui/portal/User/rest/v1/UserController.ts","../../../src/core/applicationServices/User/requests/command/RemoveUserCommand.ts","../../../src/core/CoreModuleSymbols.ts","../../../src/ui/common/config/application/express/auth/middlewares/isAuthenticated.ts","../../../src/ui/common/config/application/express/auth/utils/getHttpContext.ts","../../../src/core/common/errors/BaseError.ts","../../../src/ui/common/config/errors/UserInterfaceError.ts","../../../src/ui/portal/Authentication/rest/v1/AuthenticationController.ts","../../../src/core/applicationServices/Authentication/requests/repository/command/SignUpCommand.ts","../../../src/ui/UIModuleSymbols.ts","../../../src/core/applicationServices/Authentication/requests/handler/query/AuthenticationQuery.ts","../../../src/ui/portal/Coffee/rest/v1/CoffeeController.ts","../../../src/core/applicationServices/Coffee/requests/command/DeleteCoffeeCommand.ts","../../../src/core/domainServices/Coffee/requests/UnitOfWork/query/FindCoffeeRepositoryQuery.ts","../../../src/core/applicationServices/Coffee/requests/command/AddCoffeeCommand.ts","../../../src/core/applicationServices/Coffee/requests/command/UpdateCoffeeCommand.ts","../../../src/core/applicationServices/Review/requests/query/GetUserReviewsQuery.ts","../../../src/core/applicationServices/Review/requests/command/AddReviewCommand.ts","../../../src/core/applicationServices/Review/requests/command/UpdateReviewCommand.ts","../../../src/core/applicationServices/Review/requests/command/DeleteReviewCommand.ts","../../../src/dependency/BaseModule.ts","../../../src/ui/common/config/application/express/ExpressApplication.ts","../../../src/ui/common/config/application/common/BaseApplication.ts","../../../src/ui/common/config/consts/variables.ts","../../../src/ui/common/config/swagger.json","../../../src/ui/common/config/logger/WinstonLogger.ts","../../../src/ui/common/config/logger/BaseLogger.ts","../../../src/ui/common/config/application/express/auth/JWTAuthenticationHandler.ts","../../../src/ui/common/config/application/common/auth/models/Authentication.ts","../../../src/ui/common/config/application/common/auth/utils/JWTTokenUtil.ts"],"sourcesContent":["import { Format } from 'logform';\nimport { createLogger, format, Logger } from 'winston';\nimport express from 'express';\nimport { interfaces } from 'inversify';\nimport 'ui/index';\n\nimport { BaseModule } from 'dependency/BaseModule';\n\nimport { IApplication } from 'ui/common/config/application/common/IApplication';\nimport { ExpressApplication } from 'ui/common/config/application/express/ExpressApplication';\nimport { ILogger } from 'ui/common/config/logger/ILogger';\nimport { WinstonLogger } from 'ui/common/config/logger/WinstonLogger';\nimport { UI_APPLICATION_IDENTIFIERS } from 'ui/UIModuleSymbols';\nimport { LOG_LEVEL } from 'ui/common/config/consts/variables';\nimport { IAuthenticationHandler } from 'ui/common/config/application/common/auth/IAuthenticationHandler';\nimport { JWTAuthenticationHandler } from 'ui/common/config/application/express/auth/JWTAuthenticationHandler';\nimport { JWTTokenUtil } from 'ui/common/config/application/common/auth/utils/JWTTokenUtil';\n\nexport class ApplicationModule extends BaseModule {\n  constructor() {\n    super((bind: interfaces.Bind): void => {\n      this.init(bind);\n    });\n  }\n\n  public init(bind: interfaces.Bind): void {\n    this.provideExpress(bind);\n    this.provideExpressRouter(bind);\n    this.provideExpressApplication(bind);\n\n    this.provideWinstonLogger(bind);\n    this.provideLoggerFormat(bind);\n    this.provideLogger(bind);\n\n    this.provideJWTAuthenticationHandler(bind);\n    this.provideJWTTokenUtil(bind);\n  }\n\n  private provideExpress(bind: interfaces.Bind): void {\n    bind<express.Application>(\n      UI_APPLICATION_IDENTIFIERS.EXPRESS\n    ).toConstantValue(express());\n  }\n\n  private provideExpressRouter(bind: interfaces.Bind): void {\n    bind<express.Router>(\n      UI_APPLICATION_IDENTIFIERS.EXPRESS_ROUTER\n    ).toConstantValue(\n      express.Router({\n        caseSensitive: false,\n        mergeParams: false,\n        strict: false,\n      })\n    );\n  }\n\n  private provideExpressApplication(bind: interfaces.Bind): void {\n    bind<IApplication>(UI_APPLICATION_IDENTIFIERS.EXPRESS_APPLICATION).to(\n      ExpressApplication\n    );\n  }\n\n  private provideWinstonLogger(bind: interfaces.Bind): void {\n    bind<ILogger>(UI_APPLICATION_IDENTIFIERS.LOGGER_WINSTON).to(WinstonLogger);\n  }\n\n  private provideLoggerFormat(bind: interfaces.Bind): void {\n    bind<Format>(UI_APPLICATION_IDENTIFIERS.LOGGER_FORMAT).toConstantValue(\n      format.combine(\n        format.colorize({\n          all: true,\n        }),\n        format.label({\n          label: '[LOGGER]',\n        }),\n        format.timestamp({\n          format: 'YY-MM-DD HH:MM:SS',\n        }),\n        format.printf(\n          (info) =>\n            `${info.label} ${info.timestamp} [${info.level}] : ${info.message} `\n        )\n      )\n    );\n  }\n\n  private provideLogger(bind: interfaces.Bind): void {\n    bind<Logger>(UI_APPLICATION_IDENTIFIERS.LOGGER).toConstantValue(\n      createLogger({\n        exitOnError: false,\n        level: LOG_LEVEL,\n      })\n    );\n  }\n\n  private provideJWTTokenUtil(bind: interfaces.Bind): void {\n    bind<JWTTokenUtil>(UI_APPLICATION_IDENTIFIERS.JWT_TOKEN_UTIL).to(\n      JWTTokenUtil\n    );\n  }\n\n  private provideJWTAuthenticationHandler(bind: interfaces.Bind): void {\n    bind<IAuthenticationHandler>(\n      UI_APPLICATION_IDENTIFIERS.JWT_AUTHENTICATION_HANDLER\n    ).to(JWTAuthenticationHandler);\n  }\n}\n","import { OK } from 'http-status-codes';\n\nimport { inject } from 'inversify';\n\nimport {\n  BaseHttpController,\n  controller,\n  httpGet,\n  httpPost,\n  requestBody,\n} from 'inversify-express-utils';\n\nimport { Request } from 'express';\n\nimport { IUserService } from 'core/applicationServices/User/IUserService';\nimport { RemoveUserCommand } from 'core/applicationServices/User/requests/command/RemoveUserCommand';\nimport { DOMAIN_APPLICATION_SERVICE_IDENTIFIERS } from 'core/CoreModuleSymbols';\n\nimport { RemoveUserCommandBody } from 'ui/portal/User/rest/v1/requests/command/RemoveUserCommandBody';\nimport { isAuthenticated } from 'ui/common/config/application/express/auth/middlewares/isAuthenticated';\nimport { USER_ROLE } from 'core/domain/User/UserRole';\nimport { getCurrentUser } from 'ui/common/config/application/express/auth/utils/getHttpContext';\n\n@controller('/v1/user')\nexport class UserController extends BaseHttpController {\n  constructor(\n    @inject(DOMAIN_APPLICATION_SERVICE_IDENTIFIERS.USER_SERVICE)\n    private readonly UserService: IUserService\n  ) {\n    super();\n  }\n\n  @httpGet('/')\n  public async get() {\n    return this.json(OK);\n  }\n\n  @httpGet('/currentUser')\n  public async getCurrentUser(req: Request) {\n    const user = getCurrentUser(req);\n\n    return this.json(user);\n  }\n\n  @httpPost('/removeUser', isAuthenticated({ role: USER_ROLE.MEMBER }))\n  public async Remove(@requestBody() { id }: RemoveUserCommandBody) {\n    return this.UserService.removeUser(new RemoveUserCommand(id));\n  }\n}\n","export class RemoveUserCommand {\n  constructor(public readonly id: string) {}\n}\n","export const DOMAIN_APPLICATION_SERVICE_IDENTIFIERS = {\n  USER_SERVICE: Symbol.for('UserService'),\n  AUTHENTICATION_SERVICE: Symbol.for('AuthenticationService'),\n  COFFEE_SERVICE: Symbol.for('CoffeeService'),\n  REVIEW_SERVICE: Symbol.for('ReviewService'),\n};\n\nexport const DOMAIN_MAPPING_IDENTIFIERS = {\n  USER_DOMAIN: Symbol.for('UserDomain'),\n  ROLE_DOMAIN: Symbol.for('RoleDomain'),\n  COFFEE_DOMAIN: Symbol.for('CoffeeDomain'),\n  REVIEW_DOMAIN: Symbol.for('ReviewDomain'),\n};\n\nexport const DOMAIN_REPOSITORY_IDENTIFIERS = {\n  ROLE_REPOSITORY: Symbol.for('RoleRepository'),\n  USER_REPOSITORY: Symbol.for('UserRepository'),\n  COFFEE_REPOSITORY: Symbol.for('CoffeeRepository'),\n  REVIEW_REPOSITORY: Symbol.for('ReviewRepository'),\n};\n\nexport const DOMAIN_UNIT_OF_WORK_IDENTIFIERS = {\n  USER_UNIT_OF_WORK: Symbol.for('UserUnitOfWork'),\n  COFFEE_UNIT_OF_WORK: Symbol.for('CoffeeUnitOfWork'),\n};\n","import * as express from 'express';\n\nimport { FORBIDDEN, getStatusText, UNAUTHORIZED } from 'http-status-codes';\n\nimport { getCurrentUser } from 'ui/common/config/application/express/auth/utils/getHttpContext';\nimport { UserInterfaceError } from 'ui/common/config/errors/UserInterfaceError';\n\nexport const isAuthenticated =\n  (config?: { role: string }) =>\n  async (\n    req: express.Request,\n    _res: express.Response,\n    next: express.NextFunction\n  ): Promise<void> => {\n    const user = getCurrentUser(req);\n    // eslint-disable-next-line no-console\n    if (!user) {\n      next(\n        new UserInterfaceError(\n          UNAUTHORIZED,\n          getStatusText(UNAUTHORIZED).toUpperCase()\n        )\n      );\n      return;\n    }\n\n    const isAuthenticatedUser = await user.isAuthenticated();\n\n    if (!isAuthenticatedUser) {\n      next(\n        new UserInterfaceError(\n          UNAUTHORIZED,\n          getStatusText(UNAUTHORIZED).toUpperCase()\n        )\n      );\n      return;\n    }\n\n    if (config) {\n      const isInRole = await user.isInRole(config.role);\n      if (!isInRole) {\n        next(\n          new UserInterfaceError(\n            FORBIDDEN,\n            getStatusText(FORBIDDEN).toUpperCase()\n          )\n        );\n        return;\n      }\n    }\n    next();\n  };\n","import { interfaces } from 'inversify-express-utils';\nimport { Request } from 'express';\n\nimport { Principal } from 'ui/common/config/application/express/auth/models/Principal';\n\nexport const getCurrentUser = (request: Request): Principal => {\n  const httpContext: interfaces.HttpContext = Reflect.getMetadata(\n    'inversify-express-utils:httpcontext',\n    request\n  );\n  // eslint-disable-next-line no-console\n  return httpContext.user;\n};\n","export class BaseError implements Error {\n  constructor(\n    public readonly code?: string,\n    public readonly message: string = '',\n    public readonly name: string = ''\n  ) {}\n}\n","import { BaseError } from 'core/common/errors/BaseError';\n\nexport class UserInterfaceError extends BaseError {\n  constructor(\n    public readonly status: number,\n    public readonly code?: string,\n    public readonly message: string = '',\n    public readonly name: string = ''\n  ) {\n    super(code, message, name);\n  }\n}\n","import {\n  BaseHttpController,\n  controller,\n  httpPost,\n  requestBody,\n  results,\n} from 'inversify-express-utils';\n\nimport { OK } from 'http-status-codes';\n\nimport { inject } from 'inversify';\n\nimport { SignUpCommand } from 'core/applicationServices/Authentication/requests/repository/command/SignUpCommand';\nimport {\n  DOMAIN_APPLICATION_SERVICE_IDENTIFIERS,\n  DOMAIN_MAPPING_IDENTIFIERS,\n} from 'core/CoreModuleSymbols';\nimport { User } from 'core/domain/User/User';\nimport { IAuthenticationService } from 'core/applicationServices/Authentication/IAuthenticationService';\n\nimport { UIMapper } from 'ui/common/mappings/UIMapper';\nimport {\n  UI_APPLICATION_IDENTIFIERS,\n  UI_IDENTIFIERS,\n  UI_MAPPINGS_IDENTIFIERS,\n} from 'ui/UIModuleSymbols';\nimport { User as UserUI } from 'ui/common/models/User';\nimport { SignUpCommandBody } from 'ui/portal/Authentication/rest/v1/requests/command/SignUpCommandBody';\n\nimport { AuthenticationQueryBody } from 'ui/portal/Authentication/rest/v1/requests/query/AuthenticationQueryBody';\nimport { IAuthenticationHandler } from 'ui/common/config/application/common/auth/IAuthenticationHandler';\nimport { AuthenticationQuery } from 'core/applicationServices/Authentication/requests/handler/query/AuthenticationQuery';\n\n@controller('/v1/auth')\nexport class AuthenticationController extends BaseHttpController {\n  constructor(\n    @inject(DOMAIN_APPLICATION_SERVICE_IDENTIFIERS.AUTHENTICATION_SERVICE)\n    private readonly authenticationService: IAuthenticationService,\n    @inject(UI_APPLICATION_IDENTIFIERS.JWT_AUTHENTICATION_HANDLER)\n    private readonly authenticationHandler: IAuthenticationHandler,\n    @inject(UI_IDENTIFIERS.UI_MAPPER)\n    private readonly uiMapper: UIMapper\n  ) {\n    super();\n  }\n\n  @httpPost('/signup')\n  public async create(\n    @requestBody()\n    { nickname, email, password }: SignUpCommandBody\n  ): Promise<results.JsonResult> {\n    const user = await this.authenticationService.signUp(\n      new SignUpCommand(nickname, email, password)\n    );\n\n    const createdUser = this.uiMapper.mapper.map<User, UserUI>(\n      {\n        destination: UI_MAPPINGS_IDENTIFIERS.USER_UI,\n        source: DOMAIN_MAPPING_IDENTIFIERS.USER_DOMAIN,\n      },\n      user\n    );\n    return this.json(createdUser, OK);\n  }\n\n  @httpPost('/')\n  public async index(\n    @requestBody() { email, password }: AuthenticationQueryBody\n  ): Promise<results.JsonResult> {\n    const authentication = await this.authenticationHandler.authenticate(\n      new AuthenticationQuery(email, password)\n    );\n\n    return this.json(authentication, OK);\n  }\n}\n","export class SignUpCommand {\n  constructor(\n    public readonly nickname: string,\n    public readonly email: string,\n    public readonly password: string\n  ) {}\n}\n","export const UI_IDENTIFIERS = {\n  UI_MAPPER: Symbol.for('UIMapper'),\n};\n\nexport const UI_APPLICATION_IDENTIFIERS = {\n  EXPRESS: Symbol.for('Express'),\n  EXPRESS_ROUTER: Symbol.for('ExpressRouter'),\n\n  EXPRESS_APPLICATION: Symbol.for('ExpressApplication'),\n  INVERSIFY_APPLICATION: Symbol.for('InversifyExpressApplication'),\n  JWT_TOKEN_UTIL: Symbol.for('JWTTokenUtil'),\n  JWT_AUTHENTICATION_HANDLER: Symbol.for('JWTAuthenticationHandler'),\n\n  LOGGER: Symbol.for('Logger'),\n  LOGGER_FORMAT: Symbol.for('WinstonFormat'),\n  LOGGER_WINSTON: Symbol.for('WinstonLogger'),\n};\n\nexport const UI_MAPPINGS_IDENTIFIERS = {\n  USER_UI: Symbol.for('UserUI'),\n};\n","export class AuthenticationQuery {\n  constructor(\n    public readonly email: string,\n    public readonly password: string\n  ) {}\n}\n","import { inject } from 'inversify';\nimport {\n  BaseHttpController,\n  controller,\n  httpDelete,\n  httpGet,\n  httpPost,\n  httpPut,\n  requestBody,\n  requestParam,\n  results,\n} from 'inversify-express-utils';\nimport { OK } from 'http-status-codes';\n\nimport { DOMAIN_APPLICATION_SERVICE_IDENTIFIERS } from 'core/CoreModuleSymbols';\nimport { ICoffeeService } from 'core/applicationServices/Coffee/ICoffeeService';\nimport { isAuthenticated } from 'ui/common/config/application/express/auth/middlewares/isAuthenticated';\nimport { USER_ROLE } from 'core/domain/User/UserRole';\nimport { CreateCoffeeCommandBody } from 'ui/portal/Coffee/requests/command/CreateCoffeeCommandBody';\nimport { DeleteCoffeeCommand } from 'core/applicationServices/Coffee/requests/command/DeleteCoffeeCommand';\nimport { DeleteCoffeeCommandBody } from 'ui/portal/Coffee/requests/command/DeleteCoffeeCommandBody';\nimport { AddReviewCommandBody } from 'ui/portal/Coffee/requests/command/AddReviewCommandBody';\nimport { FindOneCoffeeRepositoryQuery } from 'core/domainServices/Coffee/requests/UnitOfWork/query/FindCoffeeRepositoryQuery';\nimport { CreateCoffeeCommand } from 'core/applicationServices/Coffee/requests/command/AddCoffeeCommand';\nimport { UpdateCoffeeCommand } from 'core/applicationServices/Coffee/requests/command/UpdateCoffeeCommand';\nimport { FindOneCoffeeRepositoryQueryBody } from 'ui/portal/Coffee/requests/query/FindOneCoffeeRepositoryQueryBody';\nimport { UpdateCoffeeCommandBody } from 'ui/portal/Coffee/requests/command/UpdateCoffeeCommandBody';\nimport { GetUserReviewsQueryBody } from 'ui/portal/Coffee/requests/query/GetUserReviewsQueryBody';\nimport { IReviewService } from 'core/applicationServices/Review/IReviewService';\nimport { GetUserReviewsQuery } from 'core/applicationServices/Review/requests/query/GetUserReviewsQuery';\nimport { AddReviewCommand } from 'core/applicationServices/Review/requests/command/AddReviewCommand';\nimport { UpdateReviewCommand } from 'core/applicationServices/Review/requests/command/UpdateReviewCommand';\nimport { UpdateReviewCommandBody } from 'ui/portal/Coffee/requests/command/UpdateReviewCommandBody';\nimport { DeleteReviewCommandBody } from 'ui/portal/Coffee/requests/command/DeleteReviewCommandBody';\nimport { DeleteReviewCommand } from 'core/applicationServices/Review/requests/command/DeleteReviewCommand';\n\n@controller('/v1/coffee')\nexport class CoffeeController extends BaseHttpController {\n  constructor(\n    @inject(DOMAIN_APPLICATION_SERVICE_IDENTIFIERS.COFFEE_SERVICE)\n    private readonly coffeeService: ICoffeeService,\n    @inject(DOMAIN_APPLICATION_SERVICE_IDENTIFIERS.REVIEW_SERVICE)\n    private readonly reviewService: IReviewService\n  ) {\n    super();\n  }\n\n  @httpGet('/')\n  async GetAll(): Promise<results.JsonResult> {\n    const result = await this.coffeeService.findAll();\n\n    return this.json(result, OK);\n  }\n\n  @httpGet('/:id')\n  async get(\n    @requestParam('id') { coffeeId }: FindOneCoffeeRepositoryQueryBody\n  ): Promise<results.JsonResult> {\n    const result = await this.coffeeService.findOne(\n      new FindOneCoffeeRepositoryQuery(coffeeId)\n    );\n    return this.json(result, OK);\n  }\n\n  @httpPost('/create', isAuthenticated({ role: USER_ROLE.MEMBER }))\n  async add(\n    @requestBody()\n    {\n      brand,\n      name,\n      type,\n      imgUrl,\n      description,\n      burntLvl,\n      reflink,\n      CoffeeStatus,\n    }: CreateCoffeeCommandBody\n  ): Promise<results.JsonResult> {\n    const coffeeCommand = new CreateCoffeeCommand(\n      brand,\n      name,\n      type,\n      imgUrl,\n      description,\n      burntLvl,\n      reflink || '',\n      CoffeeStatus\n    );\n\n    const result = await this.coffeeService.create(coffeeCommand);\n    return this.json(result, OK);\n  }\n\n  @httpPut('/:id/update', isAuthenticated({ role: USER_ROLE.MEMBER }))\n  async update(\n    @requestParam('id') coffeeId: string,\n    @requestBody() { coffee }: UpdateCoffeeCommandBody\n  ) {\n    const result = await this.coffeeService.update(\n      new UpdateCoffeeCommand(coffee, coffeeId)\n    );\n\n    return this.json(result, OK);\n  }\n\n  @httpDelete('/:id', isAuthenticated({ role: USER_ROLE.MEMBER }))\n  async delete(\n    @requestParam() { id }: DeleteCoffeeCommandBody\n  ): Promise<results.JsonResult> {\n    const result = await this.coffeeService.delete(new DeleteCoffeeCommand(id));\n\n    return this.json(result, OK);\n  }\n\n  @httpGet('/:userId/reviews/', isAuthenticated({ role: USER_ROLE.MEMBER }))\n  async GetUserReviews(@requestParam() { userId }: GetUserReviewsQueryBody) {\n    const result = await this.reviewService.getAll(\n      new GetUserReviewsQuery(userId)\n    );\n    return this.json(result, OK);\n  }\n\n  @httpPost(\n    '/:coffeeId/reviews/add',\n    isAuthenticated({ role: USER_ROLE.MEMBER })\n  )\n  async addReview(\n    @requestParam('coffeeId') coffeeId: string,\n    @requestBody()\n    { rating, look, smell, taste, userId }: AddReviewCommandBody\n  ): Promise<results.JsonResult> {\n    const result = await this.reviewService.add(\n      new AddReviewCommand(userId, coffeeId, rating, look, smell, taste)\n    );\n    return this.json(result, OK);\n  }\n\n  @httpPut(\n    '/:coffeeId/reviews/:reviewId/update',\n    isAuthenticated({ role: USER_ROLE.MEMBER })\n  )\n  async updateReview(\n    @requestParam('reviewId') reviewId: string,\n    @requestBody() { review }: UpdateReviewCommandBody\n  ) {\n    const result = this.reviewService.update(\n      new UpdateReviewCommand(review, reviewId)\n    );\n\n    return this.json(result, OK);\n  }\n\n  @httpDelete(\n    '/:id/reviews/delete',\n    isAuthenticated({ role: USER_ROLE.MEMBER })\n  )\n  async deleteReview(\n    @requestParam('reviewId') { reviewId }: DeleteReviewCommandBody\n  ) {\n    const result = this.reviewService.delete(new DeleteReviewCommand(reviewId));\n\n    return this.json(result, OK);\n  }\n\n  // @httpPost('/search')\n  // async search(@requestParam() { sortBy, skip, take }: SearchQueryBody) {\n  //   const _result = await this.CoffeeService.sortAndPaginate(\n  //     new SearchQuery(sortBy, skip, take)\n  //   );\n  // }\n}\n","export class DeleteCoffeeCommand {\n  constructor(public readonly id: string) {}\n}\n","export class FindOneCoffeeRepositoryQuery {\n  constructor(public readonly id: string) {}\n}\n","export class CreateCoffeeCommand {\n  constructor(\n    public readonly brand: string,\n    public readonly name: string,\n    public readonly type: string,\n    public readonly imgUrl: string,\n    public readonly description: string,\n    public readonly burntLvl: string,\n    public readonly CoffeeStatus: string,\n    public readonly reflink?: string\n  ) {}\n}\n","import { Coffee } from 'core/domain/Coffee/Coffee';\n\nexport class UpdateCoffeeCommand {\n  constructor(\n    public readonly coffee: Partial<Coffee>,\n    public readonly coffeeId: string\n  ) {}\n}\n","export class GetUserReviewsQuery {\n  constructor(public readonly userId: string) {}\n}\n","export class AddReviewCommand {\n  constructor(\n    public readonly userId: string,\n    public readonly coffeeId: string,\n    public readonly rating: number,\n    public readonly look: number,\n    public readonly smell: number,\n    public readonly taste: number\n  ) {}\n}\n","import { Review } from 'core/domain/Review/Review';\n\nexport class UpdateReviewCommand {\n  constructor(\n    public readonly review: Partial<Review>,\n    public readonly reviewId: string\n  ) {}\n}\n","export class DeleteReviewCommand {\n  constructor(public readonly reviewId: string) {}\n}\n","import { ContainerModule, interfaces } from 'inversify';\n\nexport abstract class BaseModule extends ContainerModule {\n  public abstract init(bind: interfaces.Bind): void;\n}\n","import express from 'express';\nimport morgan from 'morgan';\nimport methodOverride from 'method-override';\nimport helmet from 'helmet';\nimport cors from 'cors';\nimport swaggerUi from 'swagger-ui-express';\nimport { inject, injectable } from 'inversify';\n\nimport { IApplication } from 'ui/common/config/application/common/IApplication';\nimport { BaseApplication } from 'ui/common/config/application/common/BaseApplication';\nimport { ILogger } from 'ui/common/config/logger/ILogger';\nimport {\n  SWAGGER_BASE_PATH,\n  SWAGGER_HOST,\n} from 'ui/common/config/consts/variables';\nimport { UI_APPLICATION_IDENTIFIERS } from 'ui/UIModuleSymbols';\n\nimport swaggerDocument from 'ui/common/config/swagger.json';\n\n@injectable()\nexport class ExpressApplication\n  extends BaseApplication<express.Application>\n  implements IApplication\n{\n  private readonly logger: ILogger;\n\n  private readonly router: express.Router;\n\n  constructor(\n    @inject(UI_APPLICATION_IDENTIFIERS.LOGGER_WINSTON) logger: ILogger,\n    @inject(UI_APPLICATION_IDENTIFIERS.EXPRESS) app: express.Application,\n    @inject(UI_APPLICATION_IDENTIFIERS.EXPRESS_ROUTER) router: express.Router\n  ) {\n    super(app);\n    this.logger = logger;\n    this.router = router;\n  }\n\n  public initialize(): void {\n    this.initializeSecurity();\n    this.initializeBodyParsers();\n    if (process.env.NODE_ENV !== 'test') {\n      this.initializeLogging();\n    }\n    this.initializeHandlers();\n    this.initializePlugins();\n    this.initializeExtensions();\n  }\n\n  public initializeSecurity(): void {\n    this.app.use(express.urlencoded({ extended: false }));\n  }\n\n  public initializeBodyParsers(): void {\n    this.app.use(express.json());\n  }\n\n  public initializeLogging(): void {\n    this.logger.initialize();\n    morgan.token(\n      'body',\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (req): string => `\\nREQUEST BODY: ${JSON.stringify((req as any).body)}`\n    );\n    /**\n     * @description you may consider what you want to log on production\n     * keep in mind to obfuscate sensitive data if you want to log request or response bodies\n     * format can be moved to some other place for easier configuration\n     */\n    this.app.use(\n      morgan(\n        ':method :url HTTP/:http-version :status :response-time ms :referrer :user-agent - :body',\n        { stream: this.logger }\n      )\n    );\n  }\n\n  public initializeHandlers(): void {\n    Error('NOT IMPLEMENTED');\n  }\n\n  public initializePlugins(): void {\n    this.app.use(methodOverride());\n    this.app.use(helmet());\n    this.app.use(cors());\n  }\n\n  public initializeExtensions(): void {\n    if (SWAGGER_HOST) {\n      swaggerDocument.host = SWAGGER_HOST;\n      this.app.use(\n        SWAGGER_BASE_PATH,\n        swaggerUi.serve,\n        swaggerUi.setup(swaggerDocument)\n      );\n    }\n  }\n}\n","export abstract class BaseApplication<T> {\n  protected readonly app: T;\n\n  protected constructor(app: T) {\n    this.app = app;\n  }\n\n  public abstract initialize(): void;\n\n  public getApplication(): T {\n    return this.app;\n  }\n}\n","import dotenv from 'dotenv';\n\ndotenv.config();\n\nexport const APP_TOKEN_SECRET = process.env.APP_TOKEN_SECRET || '';\nexport const APP_TOKEN_LIFE = process.env.APP_TOKEN_LIFE || '24h';\nexport const PORT = process.env.PORT || '3000';\nexport const LOG_LEVEL = process.env.LOG_LEVEL || 'debug';\nexport const SWAGGER_BASE_PATH = process.env.SWAGGER_BASE_PATH || '';\nexport const { SWAGGER_HOST } = process.env;\nexport const IS_DEVELOPMENT = process.env.NODE_ENV === 'development';\n","{\r\n  \"swagger\": \"2.0\",\r\n  \"info\": {\r\n    \"version\": \"1.0.0\",\r\n    \"title\": \"CR API\",\r\n    \"description\": \"Api documentation for CR project \\n\",\r\n    \"contact\": {\r\n      \"name\": \"MediaHunters\"\r\n    },\r\n    \"license\": {\r\n      \"name\": \"[PUT LICENSE NAME HERE]\"\r\n    }\r\n  },\r\n  \"host\": \"localhost:3000\",\r\n  \"basePath\": \"/v1\",\r\n  \"tags\": [\r\n    {\r\n      \"name\": \"auth\",\r\n      \"description\": \"Api endpoints related to authentication\"\r\n    }\r\n  ],\r\n  \"securityDefinitions\": {\r\n    \"bearer\": {\r\n      \"type\": \"apiKey\",\r\n      \"name\": \"Authorization\",\r\n      \"in\": \"header\"\r\n    }\r\n  },\r\n  \"schemes\": [\"http\", \"https\"],\r\n  \"consumes\": [\"application/json\"],\r\n  \"produces\": [\"application/json\"],\r\n  \"paths\": {\r\n    \"/user\": {\r\n      \"delete\": {\r\n        \"security\": [\r\n          {\r\n            \"bearer\": []\r\n          }\r\n        ],\r\n        \"tags\": [\"user\"],\r\n        \"description\": \"User endpoint\",\r\n        \"consumes\": [\"application/json\"],\r\n        \"produces\": [\"application/json\"],\r\n        \"parameters\": [\r\n          {\r\n            \"in\": \"body\",\r\n            \"name\": \"body\",\r\n            \"required\": true,\r\n            \"schema\": {\r\n              \"$ref\": \"#/definitions/UserDeleteRequest\"\r\n            }\r\n          }\r\n        ],\r\n        \"responses\": {\r\n          \"200\": {\r\n            \"description\": \"Returns authentication token\"\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { format as winstonFormat, Logger, transports } from 'winston';\nimport { Format } from 'logform';\nimport DailyRotateFile from 'winston-daily-rotate-file';\n\nimport { inject, injectable } from 'inversify';\n\nimport { BaseLogger } from 'ui/common/config/logger/BaseLogger';\nimport { ILogger } from 'ui/common/config/logger/ILogger';\n\nimport { UI_APPLICATION_IDENTIFIERS } from 'ui/UIModuleSymbols';\nimport { IS_DEVELOPMENT } from 'ui/common/config/consts/variables';\n\n@injectable()\nexport class WinstonLogger extends BaseLogger<Logger> implements ILogger {\n  private readonly format: Format;\n\n  constructor(\n    @inject(UI_APPLICATION_IDENTIFIERS.LOGGER_FORMAT) format: Format,\n    @inject(UI_APPLICATION_IDENTIFIERS.LOGGER) logger: Logger\n  ) {\n    super(logger);\n    this.format = format;\n  }\n\n  public initialize(): void {\n    const loggerConfig = {\n      datePattern: 'YYYY-MM-DD',\n      dirname: './logs',\n      format: this.format,\n      maxFiles: '14d',\n      maxSize: '20m',\n      zippedArchive: true,\n    };\n\n    this.logger.add(\n      new DailyRotateFile({\n        filename: 'cr-%DATE%.info.log',\n        level: 'info',\n        ...loggerConfig,\n      })\n    );\n\n    if (IS_DEVELOPMENT) {\n      this.logger.add(\n        new transports.Console({\n          format: winstonFormat.combine(winstonFormat.colorize(), this.format),\n          handleExceptions: true,\n          level: 'debug',\n        })\n      );\n    }\n  }\n\n  write(message: string): void {\n    this.logger.info(message);\n  }\n}\n","export abstract class BaseLogger<T> {\n  protected readonly logger: T;\n\n  constructor(logger: T) {\n    this.logger = logger;\n  }\n\n  public getLogger(): T {\n    return this.logger;\n  }\n}\n","import { inject, injectable } from 'inversify';\n\nimport { NOT_FOUND } from 'http-status-codes';\n\nimport {\n  UI_APPLICATION_IDENTIFIERS,\n  UI_IDENTIFIERS,\n  UI_MAPPINGS_IDENTIFIERS,\n} from 'ui/UIModuleSymbols';\nimport { JWTTokenUtil } from 'ui/common/config/application/common/auth/utils/JWTTokenUtil';\nimport { IAuthenticationHandler } from 'ui/common/config/application/common/auth/IAuthenticationHandler';\nimport {\n  APP_TOKEN_LIFE,\n  APP_TOKEN_SECRET,\n} from 'ui/common/config/consts/variables';\nimport { UIMapper } from 'ui/common/mappings/UIMapper';\nimport { User as UserUI } from 'ui/common/models/User';\nimport { UserInterfaceError } from 'ui/common/config/errors/UserInterfaceError';\n\nimport { IAuthenticationService } from 'core/applicationServices/Authentication/IAuthenticationService';\n\nimport {\n  DOMAIN_APPLICATION_SERVICE_IDENTIFIERS,\n  DOMAIN_MAPPING_IDENTIFIERS,\n} from 'core/CoreModuleSymbols';\n\nimport { User } from 'core/domain/User/User';\nimport { AuthenticationQuery } from 'core/applicationServices/Authentication/requests/handler/query/AuthenticationQuery';\nimport { Authentication } from 'ui/common/config/application/common/auth/models/Authentication';\n\nconst PAYLOAD_KEY = 'user';\n\n@injectable()\nexport class JWTAuthenticationHandler implements IAuthenticationHandler {\n  constructor(\n    @inject(UI_APPLICATION_IDENTIFIERS.JWT_TOKEN_UTIL)\n    private readonly jwtTokenUtil: JWTTokenUtil,\n    @inject(DOMAIN_APPLICATION_SERVICE_IDENTIFIERS.AUTHENTICATION_SERVICE)\n    private readonly authenticationService: IAuthenticationService,\n    @inject(UI_IDENTIFIERS.UI_MAPPER)\n    private readonly uiMapper: UIMapper\n  ) {}\n\n  async authenticate(request: AuthenticationQuery) {\n    const user = await this.authenticationService.verifyCredentials(request);\n    if (!user) {\n      throw new UserInterfaceError(NOT_FOUND, 'USER_NOT_FOUND');\n    }\n\n    const userUi = this.uiMapper.mapper.map<User, UserUI>(\n      {\n        destination: UI_MAPPINGS_IDENTIFIERS.USER_UI,\n        source: DOMAIN_MAPPING_IDENTIFIERS.USER_DOMAIN,\n      },\n      user\n    );\n\n    return new Authentication(\n      this.jwtTokenUtil.generateToken(\n        userUi,\n        APP_TOKEN_SECRET,\n        APP_TOKEN_LIFE,\n        PAYLOAD_KEY\n      ),\n      user\n    );\n  }\n}\n","import { User } from 'core/domain/User/User';\n\nexport class Authentication {\n  constructor(public readonly token: string, public readonly user: User) {}\n}\n","import { IncomingHttpHeaders } from 'http';\n\nimport jwt, { Secret } from 'jsonwebtoken';\nimport { injectable } from 'inversify';\n\nimport { APP_TOKEN_SECRET } from 'ui/common/config/consts/variables';\nimport { User } from 'ui/common/models/User';\n\n@injectable()\nexport class JWTTokenUtil {\n  private readonly AUTH_HEADER = 'authorization';\n\n  private readonly SCHEME = 'bearer';\n\n  private readonly MATCHER = /(\\S+)\\s+(\\S+)/;\n\n  generateToken(\n    payload: User,\n    secret: Secret,\n    expiresIn: string | number,\n    payloadKey?: string\n  ): string {\n    return jwt.sign(payloadKey ? { [payloadKey]: payload } : payload, secret, {\n      expiresIn,\n    });\n  }\n\n  decodeToken<R extends object | string | null>(token: string): R {\n    try {\n      return jwt.verify(token, APP_TOKEN_SECRET) as R;\n    } catch {\n      return null as R;\n    }\n  }\n\n  getTokenFromHeaders(headers: IncomingHttpHeaders): any {\n    const authHeader = headers[this.AUTH_HEADER];\n    if (!authHeader) {\n      return null;\n    }\n    const matches = authHeader.match(this.MATCHER);\n    return matches && matches[2];\n  }\n}\n"],"mappings":"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","names":["import_winston","import_express","import_http_status_codes","import_inversify_express_utils","import_http_status_codes","import_inversify","import_inversify","import_inversify_express_utils","import_http_status_codes","import_inversify","import_inversify","dotenv","express","morgan","methodOverride","helmet","cors","swaggerUi","import_inversify","format","DailyRotateFile","winstonFormat","import_inversify","import_http_status_codes","import_inversify","jwt","express"]}