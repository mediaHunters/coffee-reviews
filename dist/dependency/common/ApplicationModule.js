"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "ApplicationModule", {
    enumerable: true,
    get: ()=>ApplicationModule
});
const _winston = require("winston");
const _express = /*#__PURE__*/ _interopRequireDefault(require("express"));
require("../../ui/index");
const _baseModule = require("../BaseModule");
const _expressApplication = require("../../ui/common/config/application/express/ExpressApplication");
const _winstonLogger = require("../../ui/common/config/logger/WinstonLogger");
const _uimoduleSymbols = require("../../ui/UIModuleSymbols");
const _variables = require("../../ui/common/config/consts/variables");
const _jwtauthenticationHandler = require("../../ui/common/config/application/express/auth/JWTAuthenticationHandler");
const _jwttokenUtil = require("../../ui/common/config/application/common/auth/utils/JWTTokenUtil");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
class ApplicationModule extends _baseModule.BaseModule {
    constructor(){
        super((bind)=>{
            this.init(bind);
        });
    }
    init(bind) {
        this.provideExpress(bind);
        this.provideExpressRouter(bind);
        this.provideExpressApplication(bind);
        this.provideWinstonLogger(bind);
        this.provideLoggerFormat(bind);
        this.provideLogger(bind);
        this.provideJWTAuthenticationHandler(bind);
        this.provideJWTTokenUtil(bind);
    }
    provideExpress(bind) {
        bind(_uimoduleSymbols.UI_APPLICATION_IDENTIFIERS.EXPRESS).toConstantValue((0, _express.default)());
    }
    provideExpressRouter(bind) {
        bind(_uimoduleSymbols.UI_APPLICATION_IDENTIFIERS.EXPRESS_ROUTER).toConstantValue(_express.default.Router({
            caseSensitive: false,
            mergeParams: false,
            strict: false
        }));
    }
    provideExpressApplication(bind) {
        bind(_uimoduleSymbols.UI_APPLICATION_IDENTIFIERS.EXPRESS_APPLICATION).to(_expressApplication.ExpressApplication);
    }
    provideWinstonLogger(bind) {
        bind(_uimoduleSymbols.UI_APPLICATION_IDENTIFIERS.LOGGER_WINSTON).to(_winstonLogger.WinstonLogger);
    }
    provideLoggerFormat(bind) {
        bind(_uimoduleSymbols.UI_APPLICATION_IDENTIFIERS.LOGGER_FORMAT).toConstantValue(_winston.format.combine(_winston.format.colorize({
            all: true
        }), _winston.format.label({
            label: '[LOGGER]'
        }), _winston.format.timestamp({
            format: 'YY-MM-DD HH:MM:SS'
        }), _winston.format.printf((info)=>`${info.label} ${info.timestamp} [${info.level}] : ${info.message} `)));
    }
    provideLogger(bind) {
        bind(_uimoduleSymbols.UI_APPLICATION_IDENTIFIERS.LOGGER).toConstantValue((0, _winston.createLogger)({
            exitOnError: false,
            level: _variables.LOG_LEVEL
        }));
    }
    provideJWTTokenUtil(bind) {
        bind(_uimoduleSymbols.UI_APPLICATION_IDENTIFIERS.JWT_TOKEN_UTIL).to(_jwttokenUtil.JWTTokenUtil);
    }
    provideJWTAuthenticationHandler(bind) {
        bind(_uimoduleSymbols.UI_APPLICATION_IDENTIFIERS.JWT_AUTHENTICATION_HANDLER).to(_jwtauthenticationHandler.JWTAuthenticationHandler);
    }
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9kZXBlbmRlbmN5L2NvbW1vbi9BcHBsaWNhdGlvbk1vZHVsZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBGb3JtYXQgfSBmcm9tICdsb2dmb3JtJztcbmltcG9ydCB7IGNyZWF0ZUxvZ2dlciwgZm9ybWF0LCBMb2dnZXIgfSBmcm9tICd3aW5zdG9uJztcbmltcG9ydCBleHByZXNzIGZyb20gJ2V4cHJlc3MnO1xuaW1wb3J0IHsgaW50ZXJmYWNlcyB9IGZyb20gJ2ludmVyc2lmeSc7XG5pbXBvcnQgJ3VpL2luZGV4JztcblxuaW1wb3J0IHsgQmFzZU1vZHVsZSB9IGZyb20gJ2RlcGVuZGVuY3kvQmFzZU1vZHVsZSc7XG5cbmltcG9ydCB7IElBcHBsaWNhdGlvbiB9IGZyb20gJ3VpL2NvbW1vbi9jb25maWcvYXBwbGljYXRpb24vY29tbW9uL0lBcHBsaWNhdGlvbic7XG5pbXBvcnQgeyBFeHByZXNzQXBwbGljYXRpb24gfSBmcm9tICd1aS9jb21tb24vY29uZmlnL2FwcGxpY2F0aW9uL2V4cHJlc3MvRXhwcmVzc0FwcGxpY2F0aW9uJztcbmltcG9ydCB7IElMb2dnZXIgfSBmcm9tICd1aS9jb21tb24vY29uZmlnL2xvZ2dlci9JTG9nZ2VyJztcbmltcG9ydCB7IFdpbnN0b25Mb2dnZXIgfSBmcm9tICd1aS9jb21tb24vY29uZmlnL2xvZ2dlci9XaW5zdG9uTG9nZ2VyJztcbmltcG9ydCB7IFVJX0FQUExJQ0FUSU9OX0lERU5USUZJRVJTIH0gZnJvbSAndWkvVUlNb2R1bGVTeW1ib2xzJztcbmltcG9ydCB7IExPR19MRVZFTCB9IGZyb20gJ3VpL2NvbW1vbi9jb25maWcvY29uc3RzL3ZhcmlhYmxlcyc7XG5pbXBvcnQgeyBJQXV0aGVudGljYXRpb25IYW5kbGVyIH0gZnJvbSAndWkvY29tbW9uL2NvbmZpZy9hcHBsaWNhdGlvbi9jb21tb24vYXV0aC9JQXV0aGVudGljYXRpb25IYW5kbGVyJztcbmltcG9ydCB7IEpXVEF1dGhlbnRpY2F0aW9uSGFuZGxlciB9IGZyb20gJ3VpL2NvbW1vbi9jb25maWcvYXBwbGljYXRpb24vZXhwcmVzcy9hdXRoL0pXVEF1dGhlbnRpY2F0aW9uSGFuZGxlcic7XG5pbXBvcnQgeyBKV1RUb2tlblV0aWwgfSBmcm9tICd1aS9jb21tb24vY29uZmlnL2FwcGxpY2F0aW9uL2NvbW1vbi9hdXRoL3V0aWxzL0pXVFRva2VuVXRpbCc7XG5cbmV4cG9ydCBjbGFzcyBBcHBsaWNhdGlvbk1vZHVsZSBleHRlbmRzIEJhc2VNb2R1bGUge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigoYmluZDogaW50ZXJmYWNlcy5CaW5kKTogdm9pZCA9PiB7XG4gICAgICB0aGlzLmluaXQoYmluZCk7XG4gICAgfSk7XG4gIH1cblxuICBwdWJsaWMgaW5pdChiaW5kOiBpbnRlcmZhY2VzLkJpbmQpOiB2b2lkIHtcbiAgICB0aGlzLnByb3ZpZGVFeHByZXNzKGJpbmQpO1xuICAgIHRoaXMucHJvdmlkZUV4cHJlc3NSb3V0ZXIoYmluZCk7XG4gICAgdGhpcy5wcm92aWRlRXhwcmVzc0FwcGxpY2F0aW9uKGJpbmQpO1xuXG4gICAgdGhpcy5wcm92aWRlV2luc3RvbkxvZ2dlcihiaW5kKTtcbiAgICB0aGlzLnByb3ZpZGVMb2dnZXJGb3JtYXQoYmluZCk7XG4gICAgdGhpcy5wcm92aWRlTG9nZ2VyKGJpbmQpO1xuXG4gICAgdGhpcy5wcm92aWRlSldUQXV0aGVudGljYXRpb25IYW5kbGVyKGJpbmQpO1xuICAgIHRoaXMucHJvdmlkZUpXVFRva2VuVXRpbChiaW5kKTtcbiAgfVxuXG4gIHByaXZhdGUgcHJvdmlkZUV4cHJlc3MoYmluZDogaW50ZXJmYWNlcy5CaW5kKTogdm9pZCB7XG4gICAgYmluZDxleHByZXNzLkFwcGxpY2F0aW9uPihcbiAgICAgIFVJX0FQUExJQ0FUSU9OX0lERU5USUZJRVJTLkVYUFJFU1NcbiAgICApLnRvQ29uc3RhbnRWYWx1ZShleHByZXNzKCkpO1xuICB9XG5cbiAgcHJpdmF0ZSBwcm92aWRlRXhwcmVzc1JvdXRlcihiaW5kOiBpbnRlcmZhY2VzLkJpbmQpOiB2b2lkIHtcbiAgICBiaW5kPGV4cHJlc3MuUm91dGVyPihcbiAgICAgIFVJX0FQUExJQ0FUSU9OX0lERU5USUZJRVJTLkVYUFJFU1NfUk9VVEVSXG4gICAgKS50b0NvbnN0YW50VmFsdWUoXG4gICAgICBleHByZXNzLlJvdXRlcih7XG4gICAgICAgIGNhc2VTZW5zaXRpdmU6IGZhbHNlLFxuICAgICAgICBtZXJnZVBhcmFtczogZmFsc2UsXG4gICAgICAgIHN0cmljdDogZmFsc2UsXG4gICAgICB9KVxuICAgICk7XG4gIH1cblxuICBwcml2YXRlIHByb3ZpZGVFeHByZXNzQXBwbGljYXRpb24oYmluZDogaW50ZXJmYWNlcy5CaW5kKTogdm9pZCB7XG4gICAgYmluZDxJQXBwbGljYXRpb24+KFVJX0FQUExJQ0FUSU9OX0lERU5USUZJRVJTLkVYUFJFU1NfQVBQTElDQVRJT04pLnRvKFxuICAgICAgRXhwcmVzc0FwcGxpY2F0aW9uXG4gICAgKTtcbiAgfVxuXG4gIHByaXZhdGUgcHJvdmlkZVdpbnN0b25Mb2dnZXIoYmluZDogaW50ZXJmYWNlcy5CaW5kKTogdm9pZCB7XG4gICAgYmluZDxJTG9nZ2VyPihVSV9BUFBMSUNBVElPTl9JREVOVElGSUVSUy5MT0dHRVJfV0lOU1RPTikudG8oV2luc3RvbkxvZ2dlcik7XG4gIH1cblxuICBwcml2YXRlIHByb3ZpZGVMb2dnZXJGb3JtYXQoYmluZDogaW50ZXJmYWNlcy5CaW5kKTogdm9pZCB7XG4gICAgYmluZDxGb3JtYXQ+KFVJX0FQUExJQ0FUSU9OX0lERU5USUZJRVJTLkxPR0dFUl9GT1JNQVQpLnRvQ29uc3RhbnRWYWx1ZShcbiAgICAgIGZvcm1hdC5jb21iaW5lKFxuICAgICAgICBmb3JtYXQuY29sb3JpemUoe1xuICAgICAgICAgIGFsbDogdHJ1ZSxcbiAgICAgICAgfSksXG4gICAgICAgIGZvcm1hdC5sYWJlbCh7XG4gICAgICAgICAgbGFiZWw6ICdbTE9HR0VSXScsXG4gICAgICAgIH0pLFxuICAgICAgICBmb3JtYXQudGltZXN0YW1wKHtcbiAgICAgICAgICBmb3JtYXQ6ICdZWS1NTS1ERCBISDpNTTpTUycsXG4gICAgICAgIH0pLFxuICAgICAgICBmb3JtYXQucHJpbnRmKFxuICAgICAgICAgIChpbmZvKSA9PlxuICAgICAgICAgICAgYCR7aW5mby5sYWJlbH0gJHtpbmZvLnRpbWVzdGFtcH0gWyR7aW5mby5sZXZlbH1dIDogJHtpbmZvLm1lc3NhZ2V9IGBcbiAgICAgICAgKVxuICAgICAgKVxuICAgICk7XG4gIH1cblxuICBwcml2YXRlIHByb3ZpZGVMb2dnZXIoYmluZDogaW50ZXJmYWNlcy5CaW5kKTogdm9pZCB7XG4gICAgYmluZDxMb2dnZXI+KFVJX0FQUExJQ0FUSU9OX0lERU5USUZJRVJTLkxPR0dFUikudG9Db25zdGFudFZhbHVlKFxuICAgICAgY3JlYXRlTG9nZ2VyKHtcbiAgICAgICAgZXhpdE9uRXJyb3I6IGZhbHNlLFxuICAgICAgICBsZXZlbDogTE9HX0xFVkVMLFxuICAgICAgfSlcbiAgICApO1xuICB9XG5cbiAgcHJpdmF0ZSBwcm92aWRlSldUVG9rZW5VdGlsKGJpbmQ6IGludGVyZmFjZXMuQmluZCk6IHZvaWQge1xuICAgIGJpbmQ8SldUVG9rZW5VdGlsPihVSV9BUFBMSUNBVElPTl9JREVOVElGSUVSUy5KV1RfVE9LRU5fVVRJTCkudG8oXG4gICAgICBKV1RUb2tlblV0aWxcbiAgICApO1xuICB9XG5cbiAgcHJpdmF0ZSBwcm92aWRlSldUQXV0aGVudGljYXRpb25IYW5kbGVyKGJpbmQ6IGludGVyZmFjZXMuQmluZCk6IHZvaWQge1xuICAgIGJpbmQ8SUF1dGhlbnRpY2F0aW9uSGFuZGxlcj4oXG4gICAgICBVSV9BUFBMSUNBVElPTl9JREVOVElGSUVSUy5KV1RfQVVUSEVOVElDQVRJT05fSEFORExFUlxuICAgICkudG8oSldUQXV0aGVudGljYXRpb25IYW5kbGVyKTtcbiAgfVxufVxuIl0sIm5hbWVzIjpbIkFwcGxpY2F0aW9uTW9kdWxlIiwiQmFzZU1vZHVsZSIsImNvbnN0cnVjdG9yIiwiYmluZCIsImluaXQiLCJwcm92aWRlRXhwcmVzcyIsInByb3ZpZGVFeHByZXNzUm91dGVyIiwicHJvdmlkZUV4cHJlc3NBcHBsaWNhdGlvbiIsInByb3ZpZGVXaW5zdG9uTG9nZ2VyIiwicHJvdmlkZUxvZ2dlckZvcm1hdCIsInByb3ZpZGVMb2dnZXIiLCJwcm92aWRlSldUQXV0aGVudGljYXRpb25IYW5kbGVyIiwicHJvdmlkZUpXVFRva2VuVXRpbCIsIlVJX0FQUExJQ0FUSU9OX0lERU5USUZJRVJTIiwiRVhQUkVTUyIsInRvQ29uc3RhbnRWYWx1ZSIsImV4cHJlc3MiLCJFWFBSRVNTX1JPVVRFUiIsIlJvdXRlciIsImNhc2VTZW5zaXRpdmUiLCJtZXJnZVBhcmFtcyIsInN0cmljdCIsIkVYUFJFU1NfQVBQTElDQVRJT04iLCJ0byIsIkV4cHJlc3NBcHBsaWNhdGlvbiIsIkxPR0dFUl9XSU5TVE9OIiwiV2luc3RvbkxvZ2dlciIsIkxPR0dFUl9GT1JNQVQiLCJmb3JtYXQiLCJjb21iaW5lIiwiY29sb3JpemUiLCJhbGwiLCJsYWJlbCIsInRpbWVzdGFtcCIsInByaW50ZiIsImluZm8iLCJsZXZlbCIsIm1lc3NhZ2UiLCJMT0dHRVIiLCJjcmVhdGVMb2dnZXIiLCJleGl0T25FcnJvciIsIkxPR19MRVZFTCIsIkpXVF9UT0tFTl9VVElMIiwiSldUVG9rZW5VdGlsIiwiSldUX0FVVEhFTlRJQ0FUSU9OX0hBTkRMRVIiLCJKV1RBdXRoZW50aWNhdGlvbkhhbmRsZXIiXSwibWFwcGluZ3MiOiI7Ozs7K0JBa0JhQTs7YUFBQUE7O3lCQWpCZ0M7OERBQ3pCO1FBRWI7NEJBRW9CO29DQUdROytCQUVMO2lDQUNhOzJCQUNqQjswQ0FFZTs4QkFDWjs7Ozs7O0FBRXRCLE1BQU1BLDBCQUEwQkMsc0JBQVU7SUFDL0NDLGFBQWM7UUFDWixLQUFLLENBQUMsQ0FBQ0MsT0FBZ0M7WUFDckMsSUFBSSxDQUFDQyxJQUFJLENBQUNEO1FBQ1o7SUFDRjtJQUVPQyxLQUFLRCxJQUFxQixFQUFRO1FBQ3ZDLElBQUksQ0FBQ0UsY0FBYyxDQUFDRjtRQUNwQixJQUFJLENBQUNHLG9CQUFvQixDQUFDSDtRQUMxQixJQUFJLENBQUNJLHlCQUF5QixDQUFDSjtRQUUvQixJQUFJLENBQUNLLG9CQUFvQixDQUFDTDtRQUMxQixJQUFJLENBQUNNLG1CQUFtQixDQUFDTjtRQUN6QixJQUFJLENBQUNPLGFBQWEsQ0FBQ1A7UUFFbkIsSUFBSSxDQUFDUSwrQkFBK0IsQ0FBQ1I7UUFDckMsSUFBSSxDQUFDUyxtQkFBbUIsQ0FBQ1Q7SUFDM0I7SUFFUUUsZUFBZUYsSUFBcUIsRUFBUTtRQUNsREEsS0FDRVUsMkNBQTBCLENBQUNDLE9BQU8sRUFDbENDLGVBQWUsQ0FBQ0MsSUFBQUEsZ0JBQU87SUFDM0I7SUFFUVYscUJBQXFCSCxJQUFxQixFQUFRO1FBQ3hEQSxLQUNFVSwyQ0FBMEIsQ0FBQ0ksY0FBYyxFQUN6Q0YsZUFBZSxDQUNmQyxnQkFBTyxDQUFDRSxNQUFNLENBQUM7WUFDYkMsZUFBZSxLQUFLO1lBQ3BCQyxhQUFhLEtBQUs7WUFDbEJDLFFBQVEsS0FBSztRQUNmO0lBRUo7SUFFUWQsMEJBQTBCSixJQUFxQixFQUFRO1FBQzdEQSxLQUFtQlUsMkNBQTBCLENBQUNTLG1CQUFtQixFQUFFQyxFQUFFLENBQ25FQyxzQ0FBa0I7SUFFdEI7SUFFUWhCLHFCQUFxQkwsSUFBcUIsRUFBUTtRQUN4REEsS0FBY1UsMkNBQTBCLENBQUNZLGNBQWMsRUFBRUYsRUFBRSxDQUFDRyw0QkFBYTtJQUMzRTtJQUVRakIsb0JBQW9CTixJQUFxQixFQUFRO1FBQ3ZEQSxLQUFhVSwyQ0FBMEIsQ0FBQ2MsYUFBYSxFQUFFWixlQUFlLENBQ3BFYSxlQUFNLENBQUNDLE9BQU8sQ0FDWkQsZUFBTSxDQUFDRSxRQUFRLENBQUM7WUFDZEMsS0FBSyxJQUFJO1FBQ1gsSUFDQUgsZUFBTSxDQUFDSSxLQUFLLENBQUM7WUFDWEEsT0FBTztRQUNULElBQ0FKLGVBQU0sQ0FBQ0ssU0FBUyxDQUFDO1lBQ2ZMLFFBQVE7UUFDVixJQUNBQSxlQUFNLENBQUNNLE1BQU0sQ0FDWCxDQUFDQyxPQUNDLENBQUMsRUFBRUEsS0FBS0gsS0FBSyxDQUFDLENBQUMsRUFBRUcsS0FBS0YsU0FBUyxDQUFDLEVBQUUsRUFBRUUsS0FBS0MsS0FBSyxDQUFDLElBQUksRUFBRUQsS0FBS0UsT0FBTyxDQUFDLENBQUMsQ0FBQztJQUk5RTtJQUVRM0IsY0FBY1AsSUFBcUIsRUFBUTtRQUNqREEsS0FBYVUsMkNBQTBCLENBQUN5QixNQUFNLEVBQUV2QixlQUFlLENBQzdEd0IsSUFBQUEscUJBQVksRUFBQztZQUNYQyxhQUFhLEtBQUs7WUFDbEJKLE9BQU9LLG9CQUFTO1FBQ2xCO0lBRUo7SUFFUTdCLG9CQUFvQlQsSUFBcUIsRUFBUTtRQUN2REEsS0FBbUJVLDJDQUEwQixDQUFDNkIsY0FBYyxFQUFFbkIsRUFBRSxDQUM5RG9CLDBCQUFZO0lBRWhCO0lBRVFoQyxnQ0FBZ0NSLElBQXFCLEVBQVE7UUFDbkVBLEtBQ0VVLDJDQUEwQixDQUFDK0IsMEJBQTBCLEVBQ3JEckIsRUFBRSxDQUFDc0Isa0RBQXdCO0lBQy9CO0FBQ0YifQ==