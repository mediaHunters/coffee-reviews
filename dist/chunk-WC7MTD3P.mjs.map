{"version":3,"sources":["../src/infrastructure/database/repository/User/UserUnitOfWork.ts"],"sourcesContent":["import { inject, injectable } from 'inversify';\n\nimport { DOMAIN_REPOSITORY_IDENTIFIERS } from 'core/CoreModuleSymbols';\nimport { User } from 'core/domain/User/User';\nimport { IUserRepository } from 'core/domainServices/User/IUserRepository';\nimport { IUserUnitOfWork } from 'core/domainServices/User/IUserUnitOfWork';\nimport { AddUserUnitOfWorkRepositoryCommand } from 'core/domainServices/User/request/UnitOfWorkRepository/command/AddUserUnitOfWorkRepositoryCommand';\nimport { DeleteUserUnitOfWorkRepositoryCommand } from 'core/domainServices/User/request/UnitOfWorkRepository/command/DeleteUserUnitOfWorkRepositoryCommand';\nimport { FindRoleByNameRepositoryQuery } from 'core/domainServices/Role/requests/repository/query/FindRoleByNameRepositoryQuery';\nimport { AddUserRepositoryCommand } from 'core/domainServices/User/request/Repository/command/AddUserRepositoryCommand';\nimport { IRoleRepository } from 'core/domainServices/Role/IRoleRepository';\n\nimport { USER_ROLE } from 'infrastructure/database/enum/UserRole';\nimport { CheckIfUserAlreadyExistsRepositoryQuery } from 'core/domainServices/User/request/Repository/query/CheckIfUserAlreadyExistsRepositoryQuery';\nimport { BaseError } from 'core/common/errors/BaseError';\nimport { InfrastructureErrors } from 'infrastructure/common/errors/InfrastructureErrors';\n\n@injectable()\nexport class UserUnitOfWork implements IUserUnitOfWork {\n  constructor(\n    @inject(DOMAIN_REPOSITORY_IDENTIFIERS.USER_REPOSITORY)\n    private readonly userRepository: IUserRepository,\n    @inject(DOMAIN_REPOSITORY_IDENTIFIERS.ROLE_REPOSITORY)\n    private readonly roleRepository: IRoleRepository\n  ) {}\n\n  async addUser({\n    email,\n    password,\n    nickname,\n  }: AddUserUnitOfWorkRepositoryCommand): Promise<User> {\n    const checkIfUserExist = await this.userRepository.checkIfUserAlreadyExists(\n      new CheckIfUserAlreadyExistsRepositoryQuery(nickname, email)\n    );\n\n    if (checkIfUserExist.length > 0) {\n      throw new BaseError(\n        InfrastructureErrors[InfrastructureErrors.USER_ALREADY_EXIST]\n      );\n    }\n    const { id } = await this.roleRepository.findRoleByName(\n      new FindRoleByNameRepositoryQuery(USER_ROLE.ADMIN)\n    );\n    return this.userRepository.addUser(\n      new AddUserRepositoryCommand(nickname, email, password, id)\n    );\n  }\n\n  deleteUser(command: DeleteUserUnitOfWorkRepositoryCommand): Promise<User> {\n    return this.userRepository.removeUser(command);\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAS,QAAQ,kBAAkB;AAkB5B,IAAM,iBAAN,MAAgD;AAAA,EACrD,YAEmB,gBAEA,gBACjB;AAHiB;AAEA;AAAA,EAChB;AAAA,EAEH,MAAM,QAAQ;AAAA,IACZ;AAAA,IACA;AAAA,IACA;AAAA,EACF,GAAsD;AACpD,UAAM,mBAAmB,MAAM,KAAK,eAAe;AAAA,MACjD,IAAI,wCAAwC,UAAU,KAAK;AAAA,IAC7D;AAEA,QAAI,iBAAiB,SAAS,GAAG;AAC/B,YAAM,IAAI;AAAA,QACR,+CAA4D;AAAA,MAC9D;AAAA,IACF;AACA,UAAM,EAAE,GAAG,IAAI,MAAM,KAAK,eAAe;AAAA,MACvC,IAAI,iDAA6C;AAAA,IACnD;AACA,WAAO,KAAK,eAAe;AAAA,MACzB,IAAI,yBAAyB,UAAU,OAAO,UAAU,EAAE;AAAA,IAC5D;AAAA,EACF;AAAA,EAEA,WAAW,SAA+D;AACxE,WAAO,KAAK,eAAe,WAAW,OAAO;AAAA,EAC/C;AACF;AAjCa,iBAAN;AAAA,EADN,WAAW;AAAA,EAGR,mBAAC,OAAO,8BAA8B,eAAe;AAAA,EAErD,mBAAC,OAAO,8BAA8B,eAAe;AAAA,GAJ5C;","names":[]}