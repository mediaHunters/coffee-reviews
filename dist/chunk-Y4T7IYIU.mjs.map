{"version":3,"sources":["../src/core/applicationServices/Authentication/AuthenticationService.ts"],"sourcesContent":["import { inject, injectable } from 'inversify';\n\nimport { compare } from 'bcrypt';\n\nimport {\n  DOMAIN_REPOSITORY_IDENTIFIERS,\n  DOMAIN_UNIT_OF_WORK_IDENTIFIERS,\n} from 'core/CoreModuleSymbols';\n\nimport { IAuthenticationService } from 'core/applicationServices/Authentication/IAuthenticationService';\nimport { IUserUnitOfWork } from 'core/domainServices/User/IUserUnitOfWork';\nimport { User } from 'core/domain/User/User';\nimport { AddUserUnitOfWorkRepositoryCommand } from 'core/domainServices/User/request/UnitOfWorkRepository/command/AddUserUnitOfWorkRepositoryCommand';\nimport { SignUpCommand } from 'core/applicationServices/Authentication/requests/repository/command/SignUpCommand';\n\nimport { AuthenticationQuery } from 'core/applicationServices/Authentication/requests/handler/query/AuthenticationQuery';\nimport { IUserRepository } from 'core/domainServices/User/IUserRepository';\nimport { FindUserByEmailRepositoryQuery } from 'core/domainServices/User/request/Repository/query/FindUserByEmailRepositoryQuery';\n\n@injectable()\nexport class AuthenticationService implements IAuthenticationService {\n  constructor(\n    @inject(DOMAIN_UNIT_OF_WORK_IDENTIFIERS.USER_UNIT_OF_WORK)\n    private readonly userUnitOfWork: IUserUnitOfWork,\n    @inject(DOMAIN_REPOSITORY_IDENTIFIERS.USER_REPOSITORY)\n    private readonly userRepository: IUserRepository\n  ) {}\n\n  signUp({ nickname, email, password }: SignUpCommand): Promise<User> {\n    return this.userUnitOfWork.addUser(\n      new AddUserUnitOfWorkRepositoryCommand(email, password, nickname)\n    );\n  }\n\n  async verifyCredentials({\n    email,\n    password,\n  }: AuthenticationQuery): Promise<User | undefined> {\n    const user = await this.userRepository.findUserByEmail(\n      new FindUserByEmailRepositoryQuery(email)\n    );\n\n    if (!user || !(await compare(password, user?.password || ''))) {\n      return undefined;\n    }\n\n    return user;\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;AAAA,SAAS,QAAQ,kBAAkB;AAEnC,SAAS,eAAe;AAkBjB,IAAM,wBAAN,MAA8D;AAAA,EACnE,YAEmB,gBAEA,gBACjB;AAHiB;AAEA;AAAA,EAChB;AAAA,EAEH,OAAO,EAAE,UAAU,OAAO,SAAS,GAAiC;AAClE,WAAO,KAAK,eAAe;AAAA,MACzB,IAAI,mCAAmC,OAAO,UAAU,QAAQ;AAAA,IAClE;AAAA,EACF;AAAA,EAEA,MAAM,kBAAkB;AAAA,IACtB;AAAA,IACA;AAAA,EACF,GAAmD;AACjD,UAAM,OAAO,MAAM,KAAK,eAAe;AAAA,MACrC,IAAI,+BAA+B,KAAK;AAAA,IAC1C;AAEA,QAAI,CAAC,QAAQ,CAAE,MAAM,QAAQ,UAAU,MAAM,YAAY,EAAE,GAAI;AAC7D,aAAO;AAAA,IACT;AAEA,WAAO;AAAA,EACT;AACF;AA5Ba;AAAA,wBAAN;AAAA,EADN,WAAW;AAAA,EAGR,mBAAC,OAAO,gCAAgC,iBAAiB;AAAA,EAEzD,mBAAC,OAAO,8BAA8B,eAAe;AAAA,GAJ5C;","names":[]}