{"version":3,"sources":["../src/infrastructure/database/repository/role/RoleRepository.ts"],"sourcesContent":["import { inject, injectable } from 'inversify';\n\nimport { EntityRepository } from 'typeorm';\n\nimport { FindRoleRepositoryQuery } from 'core/domainServices/Role/requests/repository/query/FindRoleRepositoryQuery';\nimport { IRoleRepository } from 'core/domainServices/Role/IRoleRepository';\n\nimport { Role } from 'core/domain/Role/Role';\nimport { DOMAIN_MAPPING_IDENTIFIERS } from 'core/CoreModuleSymbols';\nimport { BaseError } from 'core/common/errors/BaseError';\n\nimport { Role as RoleEntity } from 'infrastructure/database/entities/Role';\nimport {\n  DATABASE_MAPPING_IDENTIFIERS,\n  INFRASTRUCTURE_IDENTIFIERS,\n} from 'infrastructure/InfrastructureModuleSymbols';\nimport { Repository } from 'infrastructure/database/repository/common/Repository';\nimport { InfrastructureErrors } from 'infrastructure/common/errors/InfrastructureErrors';\nimport { FindRoleByNameRepositoryQuery } from 'core/domainServices/Role/requests/repository/query/FindRoleByNameRepositoryQuery';\nimport { DBMapper } from 'infrastructure/database/mappings/DBMapper';\n\n@injectable()\n@EntityRepository(RoleEntity)\nexport class RoleRepository\n  extends Repository<RoleEntity>\n  implements IRoleRepository\n{\n  constructor(\n    @inject(INFRASTRUCTURE_IDENTIFIERS.DB_MAPPER)\n    private readonly dbMapper: DBMapper\n  ) {\n    super(RoleEntity);\n  }\n\n  async findRole({ id }: FindRoleRepositoryQuery): Promise<Role> {\n    const role = await this.find(id);\n\n    if (!role) {\n      throw new BaseError(\n        InfrastructureErrors[InfrastructureErrors.ROLE_NOT_FOUND]\n      );\n    }\n\n    return this.dbMapper.mapper.map<RoleEntity, Role>(\n      {\n        destination: DOMAIN_MAPPING_IDENTIFIERS.ROLE_DOMAIN,\n        source: DATABASE_MAPPING_IDENTIFIERS.ROLE_ENTITY,\n      },\n      role\n    );\n  }\n\n  async findRoleByName({ name }: FindRoleByNameRepositoryQuery): Promise<Role> {\n    const role = await this.custom()\n      .createQueryBuilder()\n      .where('\"Role\".\"name\" = :name', {\n        name,\n      })\n      .getOne();\n\n    if (!role) {\n      throw new BaseError(\n        InfrastructureErrors[InfrastructureErrors.ROLE_NOT_FOUND]\n      );\n    }\n\n    return this.dbMapper.mapper.map<RoleEntity, Role>(\n      {\n        destination: DOMAIN_MAPPING_IDENTIFIERS.ROLE_DOMAIN,\n        source: DATABASE_MAPPING_IDENTIFIERS.ROLE_ENTITY,\n      },\n      role\n    );\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;AAFA,SAAS,QAAQ,kBAAkB;AAuB5B,IAAM,iBAAN,cACG,WAEV;AAAA,EACE,YAEmB,UACjB;AACA,UAAM,IAAU;AAFC;AAAA,EAGnB;AAAA,EAEA,MAAM,SAAS,EAAE,GAAG,GAA2C;AAC7D,UAAM,OAAO,MAAM,KAAK,KAAK,EAAE;AAE/B,QAAI,CAAC,MAAM;AACT,YAAM,IAAI;AAAA,QACR,2CAAwD;AAAA,MAC1D;AAAA,IACF;AAEA,WAAO,KAAK,SAAS,OAAO;AAAA,MAC1B;AAAA,QACE,aAAa,2BAA2B;AAAA,QACxC,QAAQ,6BAA6B;AAAA,MACvC;AAAA,MACA;AAAA,IACF;AAAA,EACF;AAAA,EAEA,MAAM,eAAe,EAAE,KAAK,GAAiD;AAC3E,UAAM,OAAO,MAAM,KAAK,OAAO,EAC5B,mBAAmB,EACnB,MAAM,yBAAyB;AAAA,MAC9B;AAAA,IACF,CAAC,EACA,OAAO;AAEV,QAAI,CAAC,MAAM;AACT,YAAM,IAAI;AAAA,QACR,2CAAwD;AAAA,MAC1D;AAAA,IACF;AAEA,WAAO,KAAK,SAAS,OAAO;AAAA,MAC1B;AAAA,QACE,aAAa,2BAA2B;AAAA,QACxC,QAAQ,6BAA6B;AAAA,MACvC;AAAA,MACA;AAAA,IACF;AAAA,EACF;AACF;AAnDa,iBAAN;AAAA,EAFN,WAAW;AAAA,EACX,iBAAiB,IAAU;AAAA,EAMxB,mBAAC,OAAO,2BAA2B,SAAS;AAAA,GALnC;","names":[]}