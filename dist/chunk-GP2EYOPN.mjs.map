{"version":3,"sources":["../src/infrastructure/database/repository/Review/ReviewRepository.ts"],"sourcesContent":["import { inject } from 'inversify';\n\nimport { UpdateResult } from 'typeorm';\n\nimport { DOMAIN_MAPPING_IDENTIFIERS } from 'core/CoreModuleSymbols';\nimport { Review } from 'core/domain/Review/Review';\nimport { IReviewRepository } from 'core/domainServices/Review/IReviewRepository';\nimport { AddReviewRepositoryCommand } from 'core/domainServices/Review/requests/command/AddReviewRepositoryCommand';\nimport { Review as ReviewEntity } from 'infrastructure/database/entities/Review';\nimport { DBMapper } from 'infrastructure/database/mappings/DBMapper';\nimport { Repository } from 'infrastructure/database/repository/common/Repository';\nimport {\n  INFRASTRUCTURE_IDENTIFIERS,\n  DATABASE_MAPPING_IDENTIFIERS,\n} from 'infrastructure/InfrastructureModuleSymbols';\nimport { GetReviewsRepositoryQuery } from 'core/domainServices/Review/requests/query/GetReviewsRepositoryQuery';\nimport { UpdateReviewRepositoryCommand } from 'core/domainServices/Review/requests/command/UpdateReviewRepositoryCommand';\nimport { DeleteReviewRepositoryCommand } from 'core/domainServices/Review/requests/command/DeleteReviewRepositoryCommand';\nimport { InfrastructureErrors } from 'infrastructure/common/errors/InfrastructureErrors';\nimport { BaseError } from 'core/common/errors/BaseError';\n\nexport class ReviewRepository\n  extends Repository<ReviewEntity>\n  implements IReviewRepository\n{\n  constructor(\n    @inject(INFRASTRUCTURE_IDENTIFIERS.DB_MAPPER)\n    private readonly dbMapper: DBMapper\n  ) {\n    super(ReviewEntity);\n  }\n\n  async getReviews({ userId }: GetReviewsRepositoryQuery): Promise<Review[]> {\n    const reviews = await this.custom()\n      .createQueryBuilder()\n      .where('Review.userId = :userId ', { userId })\n      .getMany();\n\n    return this.dbMapper.mapper.map<ReviewEntity[], Review[]>(\n      {\n        destination: DOMAIN_MAPPING_IDENTIFIERS.REVIEW_DOMAIN,\n        source: DATABASE_MAPPING_IDENTIFIERS.REVIEW_ENTITY,\n      },\n      reviews\n    );\n  }\n\n  async addReview({\n    rating,\n    look,\n    smell,\n    taste,\n    userId,\n    coffeeId,\n  }: AddReviewRepositoryCommand): Promise<Review> {\n    const review = new ReviewEntity();\n\n    review.userId = userId;\n    review.coffeeId = coffeeId;\n    review.look = look;\n    review.smell = smell;\n    review.taste = taste;\n    review.rating = rating;\n\n    const savedReview = await review.save();\n\n    return this.dbMapper.mapper.map<ReviewEntity, Review>(\n      {\n        destination: DOMAIN_MAPPING_IDENTIFIERS.REVIEW_DOMAIN,\n        source: DATABASE_MAPPING_IDENTIFIERS.REVIEW_ENTITY,\n      },\n      savedReview\n    );\n  }\n\n  async updateReview({\n    review,\n    reviewId,\n  }: UpdateReviewRepositoryCommand): Promise<UpdateResult> {\n    const updatedReview = await this.custom()\n      .createQueryBuilder()\n      .update(ReviewEntity)\n      .set({ ...review })\n      .where('id = :reviewId', { reviewId })\n      .execute();\n\n    return updatedReview;\n  }\n\n  async deleteReview({\n    reviewId,\n  }: DeleteReviewRepositoryCommand): Promise<Review> {\n    const result = await this.custom()\n      .createQueryBuilder()\n      .where('Review.id = :reviewsId ', { reviewId })\n      .getOne();\n\n    if (!result) {\n      throw new BaseError(\n        InfrastructureErrors[InfrastructureErrors.REVIEW_NOT_FOUND]\n      );\n    }\n\n    this.remove(result);\n\n    return this.dbMapper.mapper.map<ReviewEntity, Review>(\n      {\n        destination: DOMAIN_MAPPING_IDENTIFIERS.REVIEW_DOMAIN,\n        source: DATABASE_MAPPING_IDENTIFIERS.REVIEW_ENTITY,\n      },\n      result\n    );\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAS,cAAc;AAqBhB,IAAM,mBAAN,cACG,WAEV;AAAA,EACE,YAEmB,UACjB;AACA,UAAM,MAAY;AAFD;AAAA,EAGnB;AAAA,EAEA,MAAM,WAAW,EAAE,OAAO,GAAiD;AACzE,UAAM,UAAU,MAAM,KAAK,OAAO,EAC/B,mBAAmB,EACnB,MAAM,4BAA4B,EAAE,OAAO,CAAC,EAC5C,QAAQ;AAEX,WAAO,KAAK,SAAS,OAAO;AAAA,MAC1B;AAAA,QACE,aAAa,2BAA2B;AAAA,QACxC,QAAQ,6BAA6B;AAAA,MACvC;AAAA,MACA;AAAA,IACF;AAAA,EACF;AAAA,EAEA,MAAM,UAAU;AAAA,IACd;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF,GAAgD;AAC9C,UAAM,SAAS,IAAI,OAAa;AAEhC,WAAO,SAAS;AAChB,WAAO,WAAW;AAClB,WAAO,OAAO;AACd,WAAO,QAAQ;AACf,WAAO,QAAQ;AACf,WAAO,SAAS;AAEhB,UAAM,cAAc,MAAM,OAAO,KAAK;AAEtC,WAAO,KAAK,SAAS,OAAO;AAAA,MAC1B;AAAA,QACE,aAAa,2BAA2B;AAAA,QACxC,QAAQ,6BAA6B;AAAA,MACvC;AAAA,MACA;AAAA,IACF;AAAA,EACF;AAAA,EAEA,MAAM,aAAa;AAAA,IACjB;AAAA,IACA;AAAA,EACF,GAAyD;AACvD,UAAM,gBAAgB,MAAM,KAAK,OAAO,EACrC,mBAAmB,EACnB,OAAO,MAAY,EACnB,IAAI,EAAE,GAAG,OAAO,CAAC,EACjB,MAAM,kBAAkB,EAAE,SAAS,CAAC,EACpC,QAAQ;AAEX,WAAO;AAAA,EACT;AAAA,EAEA,MAAM,aAAa;AAAA,IACjB;AAAA,EACF,GAAmD;AACjD,UAAM,SAAS,MAAM,KAAK,OAAO,EAC9B,mBAAmB,EACnB,MAAM,2BAA2B,EAAE,SAAS,CAAC,EAC7C,OAAO;AAEV,QAAI,CAAC,QAAQ;AACX,YAAM,IAAI;AAAA,QACR,6CAA0D;AAAA,MAC5D;AAAA,IACF;AAEA,SAAK,OAAO,MAAM;AAElB,WAAO,KAAK,SAAS,OAAO;AAAA,MAC1B;AAAA,QACE,aAAa,2BAA2B;AAAA,QACxC,QAAQ,6BAA6B;AAAA,MACvC;AAAA,MACA;AAAA,IACF;AAAA,EACF;AACF;AA5Fa,mBAAN;AAAA,EAKH,mBAAC,OAAO,2BAA2B,SAAS;AAAA,GALnC;","names":[]}