{"version":3,"sources":["../src/infrastructure/database/repository/User/UserRepository.ts"],"sourcesContent":["import { inject } from 'inversify';\n\nimport { hashSync } from 'bcrypt';\n\nimport { DOMAIN_MAPPING_IDENTIFIERS } from 'core/CoreModuleSymbols';\nimport { IUserRepository } from 'core/domainServices/User/IUserRepository';\nimport {\n  INFRASTRUCTURE_IDENTIFIERS,\n  DATABASE_MAPPING_IDENTIFIERS,\n} from 'infrastructure/InfrastructureModuleSymbols';\nimport { DBMapper } from 'infrastructure/database/mappings/DBMapper';\nimport { User } from 'core/domain/User/User';\nimport { User as UserEntity } from 'infrastructure/database/entities/User';\nimport { AddUserRepositoryCommand } from 'core/domainServices/User/request/Repository/command/AddUserRepositoryCommand';\nimport { Repository } from 'infrastructure/database/repository/common/Repository';\nimport { Role } from 'infrastructure/database/entities/Role';\nimport { FindUserByEmailRepositoryQuery } from 'core/domainServices/User/request/Repository/query/FindUserByEmailRepositoryQuery';\nimport { GetUserRepositoryQuery } from 'core/domainServices/User/request/Repository/query/GetUserRepositoryQuery';\nimport { DeleteUserUnitOfWorkRepositoryCommand } from 'core/domainServices/User/request/UnitOfWorkRepository/command/DeleteUserUnitOfWorkRepositoryCommand';\nimport { InfrastructureErrors } from 'infrastructure/common/errors/InfrastructureErrors';\nimport { BaseError } from 'core/common/errors/BaseError';\nimport { CheckIfUserAlreadyExistsRepositoryQuery } from 'core/domainServices/User/request/Repository/query/CheckIfUserAlreadyExistsRepositoryQuery';\n\nexport class UserRepository\n  extends Repository<UserEntity>\n  implements IUserRepository\n{\n  constructor(\n    @inject(INFRASTRUCTURE_IDENTIFIERS.DB_MAPPER)\n    private readonly dbMapper: DBMapper\n  ) {\n    super(UserEntity);\n  }\n\n  async addUser({\n    nickname,\n    email,\n    password,\n    roleId,\n  }: AddUserRepositoryCommand): Promise<User> {\n    const user = new UserEntity();\n\n    user.nickname = nickname;\n    user.email = email;\n    user.password = hashSync(password, 10);\n\n    const memberRole = new Role();\n    memberRole.id = roleId;\n    user.role = memberRole;\n\n    const savedUser = await this.save(user);\n\n    return this.dbMapper.mapper.map<UserEntity, User>(\n      {\n        destination: DOMAIN_MAPPING_IDENTIFIERS.USER_DOMAIN,\n        source: DATABASE_MAPPING_IDENTIFIERS.USER_ENTITY,\n      },\n      savedUser\n    );\n  }\n\n  async removeUser({\n    id,\n  }: DeleteUserUnitOfWorkRepositoryCommand): Promise<User> {\n    const result = await this.custom()\n      .createQueryBuilder()\n      .leftJoinAndSelect('User.role', 'Role')\n      .where('User.id = :id ', { id })\n      .getOne();\n\n    if (!result) {\n      throw new BaseError(\n        InfrastructureErrors[InfrastructureErrors.USER_NOT_FOUND]\n      );\n    }\n\n    await this.remove(result);\n\n    return this.dbMapper.mapper.map<UserEntity, User>(\n      {\n        destination: DOMAIN_MAPPING_IDENTIFIERS.USER_DOMAIN,\n        source: DATABASE_MAPPING_IDENTIFIERS.USER_ENTITY,\n      },\n      result\n    );\n  }\n\n  async findUserByEmail({\n    email,\n  }: FindUserByEmailRepositoryQuery): Promise<User> {\n    const result = await this.custom()\n      .createQueryBuilder()\n      .leftJoinAndSelect('User.role', 'role')\n      .where('User.email = :email', { email })\n      .getMany();\n\n    return this.dbMapper.mapper.map<UserEntity, User>(\n      {\n        destination: DOMAIN_MAPPING_IDENTIFIERS.USER_DOMAIN,\n        source: DATABASE_MAPPING_IDENTIFIERS.USER_ENTITY,\n      },\n      result[0]!\n    );\n  }\n\n  async getUser({ id }: GetUserRepositoryQuery): Promise<User> {\n    const result = await this.custom()\n      .createQueryBuilder()\n      .leftJoinAndSelect('User.role', 'Role')\n      .where('User.id = :id ', { id })\n      .getOne();\n\n    if (!result) {\n      throw new BaseError(\n        InfrastructureErrors[InfrastructureErrors.USER_NOT_FOUND]\n      );\n    }\n\n    return this.dbMapper.mapper.map<UserEntity, User>(\n      {\n        destination: DOMAIN_MAPPING_IDENTIFIERS.USER_DOMAIN,\n        source: DATABASE_MAPPING_IDENTIFIERS.USER_ENTITY,\n      },\n      result\n    );\n  }\n\n  async getUsers(): Promise<User[]> {\n    const users = await this.custom()\n      .createQueryBuilder()\n      .leftJoinAndSelect('User.role', 'role')\n      .getMany();\n\n    return this.dbMapper.mapper.map<UserEntity[], User[]>(\n      {\n        destination: DOMAIN_MAPPING_IDENTIFIERS.USER_DOMAIN,\n        source: DATABASE_MAPPING_IDENTIFIERS.USER_ENTITY,\n      },\n      users\n    );\n  }\n\n  async checkIfUserAlreadyExists({\n    nickname,\n    email,\n  }: CheckIfUserAlreadyExistsRepositoryQuery): Promise<User[]> {\n    const result = await this.custom()\n      .createQueryBuilder()\n      .leftJoinAndSelect('User.role', 'role')\n      .where('User.nickname = :nickname OR User.email = :email', {\n        nickname,\n        email,\n      })\n      .getMany();\n\n    return this.dbMapper.mapper.map<UserEntity[], User[]>(\n      {\n        destination: DOMAIN_MAPPING_IDENTIFIERS.USER_DOMAIN,\n        source: DATABASE_MAPPING_IDENTIFIERS.USER_ENTITY,\n      },\n      result\n    );\n  }\n}\n"],"mappings":"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","names":[]}