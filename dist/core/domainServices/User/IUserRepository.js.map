{"version":3,"sources":["../../../../src/core/domainServices/User/IUserRepository.ts"],"sourcesContent":["import { User } from 'core/domain/User/User';\nimport { AddUserRepositoryCommand } from 'core/domainServices/User/request/Repository/command/AddUserRepositoryCommand';\nimport { CheckIfUserAlreadyExistsRepositoryQuery } from 'core/domainServices/User/request/Repository/query/CheckIfUserAlreadyExistsRepositoryQuery';\nimport { FindUserByEmailRepositoryQuery } from 'core/domainServices/User/request/Repository/query/FindUserByEmailRepositoryQuery';\nimport { GetUserRepositoryQuery } from 'core/domainServices/User/request/Repository/query/GetUserRepositoryQuery';\nimport { GetUsersRepositoryQuery } from 'core/domainServices/User/request/Repository/query/GetUsersRepositoryQuery';\nimport { DeleteUserUnitOfWorkRepositoryCommand } from 'core/domainServices/User/request/UnitOfWorkRepository/command/DeleteUserUnitOfWorkRepositoryCommand';\n\nexport interface IUserRepository {\n  getUsers(request: GetUsersRepositoryQuery): Promise<User[]>;\n  findUserByEmail(request: FindUserByEmailRepositoryQuery): Promise<User>;\n  getUser(request: GetUserRepositoryQuery): Promise<User>;\n  addUser(command: AddUserRepositoryCommand): Promise<User>;\n  removeUser(command: DeleteUserUnitOfWorkRepositoryCommand): Promise<User>;\n  checkIfUserAlreadyExists(\n    query: CheckIfUserAlreadyExistsRepositoryQuery\n  ): Promise<User[]>;\n}\n"],"mappings":";;;;;;;;;;;;;;;;AAAA;AAAA;","names":[]}