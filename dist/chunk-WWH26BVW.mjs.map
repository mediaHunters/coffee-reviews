{"version":3,"sources":["../src/infrastructure/database/repository/common/Repository.ts"],"sourcesContent":["import { AbstractRepository, getRepository, ObjectLiteral } from 'typeorm';\nimport { injectable } from 'inversify';\n\nimport { ObjectType } from 'typeorm/common/ObjectType';\n\nimport { Repository as ORMRepository } from 'typeorm/repository/Repository';\n\nimport { IRepository } from 'infrastructure/database/repository/common/IRepository';\nimport { Query } from 'infrastructure/database/repository/common/Query';\nimport { UpdateQueryData } from 'infrastructure/database/repository/common/UpdateQueryData';\n\n@injectable()\nexport abstract class Repository<E extends ObjectLiteral>\n  extends AbstractRepository<E>\n  implements IRepository<E, ORMRepository<E>>\n{\n  constructor(protected readonly entity: ObjectType<E>) {\n    super();\n  }\n\n  public async find(id: string | number): Promise<E | undefined> {\n    return this.getDBRepository().findOne(id);\n  }\n\n  public findBy(condition: Query<E>): Promise<E[]> {\n    return this.getDBRepository().find(condition);\n  }\n\n  public async findMany(ids: string[] | number[]): Promise<E[]> {\n    return this.getDBRepository().findByIds(ids);\n  }\n\n  public async findAll(): Promise<E[]> {\n    return this.getDBRepository().find();\n  }\n\n  public async query(query: string, parameters?: any[]): Promise<E[]> {\n    return this.getDBRepository().query(query, parameters);\n  }\n\n  public async update(\n    condition: string | number,\n    data: UpdateQueryData<E>\n  ): Promise<boolean> {\n    return !!(await this.getDBRepository().update(condition, data));\n  }\n\n  public async updateAll(\n    condition: string[] | number[],\n    data: E\n  ): Promise<boolean> {\n    return !!(await this.getDBRepository().update(condition, data));\n  }\n\n  public async delete(condition: string | number): Promise<boolean> {\n    return !!(await this.getDBRepository().delete(condition));\n  }\n\n  public async deleteAll(condition: string[] | number[]): Promise<boolean> {\n    return !!(await this.getDBRepository().delete(condition));\n  }\n\n  public async remove(entity: E): Promise<E> {\n    return this.getDBRepository().remove(entity);\n  }\n\n  public async removeAll(entities: E[]): Promise<E[]> {\n    return this.getDBRepository().remove(entities);\n  }\n\n  public async save(entity: E): Promise<E> {\n    return this.getDBRepository().save(entity as any);\n  }\n\n  public async saveAll(entities: E[]): Promise<E[]> {\n    return this.getDBRepository().save(entities as any);\n  }\n\n  public custom(): ORMRepository<E> {\n    return this.getDBRepository();\n  }\n\n  protected getConnectionName(): string | undefined {\n    return process.env.ORM_CONNECTION;\n  }\n\n  private getDBRepository(): ORMRepository<E> {\n    return getRepository<E>(this.entity, this.getConnectionName());\n  }\n}\n"],"mappings":";;;;;AAAA,SAAS,oBAAoB,qBAAoC;AACjE,SAAS,kBAAkB;AAWpB,IAAe,aAAf,cACG,mBAEV;AAAA,EACE,YAA+B,QAAuB;AACpD,UAAM;AADuB;AAAA,EAE/B;AAAA,EAEA,MAAa,KAAK,IAA6C;AAC7D,WAAO,KAAK,gBAAgB,EAAE,QAAQ,EAAE;AAAA,EAC1C;AAAA,EAEO,OAAO,WAAmC;AAC/C,WAAO,KAAK,gBAAgB,EAAE,KAAK,SAAS;AAAA,EAC9C;AAAA,EAEA,MAAa,SAAS,KAAwC;AAC5D,WAAO,KAAK,gBAAgB,EAAE,UAAU,GAAG;AAAA,EAC7C;AAAA,EAEA,MAAa,UAAwB;AACnC,WAAO,KAAK,gBAAgB,EAAE,KAAK;AAAA,EACrC;AAAA,EAEA,MAAa,MAAM,OAAe,YAAkC;AAClE,WAAO,KAAK,gBAAgB,EAAE,MAAM,OAAO,UAAU;AAAA,EACvD;AAAA,EAEA,MAAa,OACX,WACA,MACkB;AAClB,WAAO,CAAC,CAAE,MAAM,KAAK,gBAAgB,EAAE,OAAO,WAAW,IAAI;AAAA,EAC/D;AAAA,EAEA,MAAa,UACX,WACA,MACkB;AAClB,WAAO,CAAC,CAAE,MAAM,KAAK,gBAAgB,EAAE,OAAO,WAAW,IAAI;AAAA,EAC/D;AAAA,EAEA,MAAa,OAAO,WAA8C;AAChE,WAAO,CAAC,CAAE,MAAM,KAAK,gBAAgB,EAAE,OAAO,SAAS;AAAA,EACzD;AAAA,EAEA,MAAa,UAAU,WAAkD;AACvE,WAAO,CAAC,CAAE,MAAM,KAAK,gBAAgB,EAAE,OAAO,SAAS;AAAA,EACzD;AAAA,EAEA,MAAa,OAAO,QAAuB;AACzC,WAAO,KAAK,gBAAgB,EAAE,OAAO,MAAM;AAAA,EAC7C;AAAA,EAEA,MAAa,UAAU,UAA6B;AAClD,WAAO,KAAK,gBAAgB,EAAE,OAAO,QAAQ;AAAA,EAC/C;AAAA,EAEA,MAAa,KAAK,QAAuB;AACvC,WAAO,KAAK,gBAAgB,EAAE,KAAK,MAAa;AAAA,EAClD;AAAA,EAEA,MAAa,QAAQ,UAA6B;AAChD,WAAO,KAAK,gBAAgB,EAAE,KAAK,QAAe;AAAA,EACpD;AAAA,EAEO,SAA2B;AAChC,WAAO,KAAK,gBAAgB;AAAA,EAC9B;AAAA,EAEU,oBAAwC;AAChD,WAAO,QAAQ,IAAI;AAAA,EACrB;AAAA,EAEQ,kBAAoC;AAC1C,WAAO,cAAiB,KAAK,QAAQ,KAAK,kBAAkB,CAAC;AAAA,EAC/D;AACF;AA7EsB,aAAf;AAAA,EADN,WAAW;AAAA,GACU;","names":[]}