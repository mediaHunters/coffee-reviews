{"version":3,"sources":["../../../../../../src/ui/portal/User/rest/v1/UserController.ts","../../../../../../src/core/applicationServices/User/requests/command/RemoveUserCommand.ts","../../../../../../src/core/CoreModuleSymbols.ts","../../../../../../src/ui/common/config/application/express/auth/middlewares/isAuthenticated.ts","../../../../../../src/ui/common/config/application/express/auth/utils/getHttpContext.ts","../../../../../../src/core/common/errors/BaseError.ts","../../../../../../src/ui/common/config/errors/UserInterfaceError.ts"],"sourcesContent":["import { OK } from 'http-status-codes';\n\nimport { inject } from 'inversify';\n\nimport {\n  BaseHttpController,\n  controller,\n  httpGet,\n  httpPost,\n  requestBody,\n} from 'inversify-express-utils';\n\nimport { Request } from 'express';\n\nimport { IUserService } from 'core/applicationServices/User/IUserService';\nimport { RemoveUserCommand } from 'core/applicationServices/User/requests/command/RemoveUserCommand';\nimport { DOMAIN_APPLICATION_SERVICE_IDENTIFIERS } from 'core/CoreModuleSymbols';\n\nimport { RemoveUserCommandBody } from 'ui/portal/User/rest/v1/requests/command/RemoveUserCommandBody';\nimport { isAuthenticated } from 'ui/common/config/application/express/auth/middlewares/isAuthenticated';\nimport { USER_ROLE } from 'core/domain/User/UserRole';\nimport { getCurrentUser } from 'ui/common/config/application/express/auth/utils/getHttpContext';\n\n@controller('/v1/user')\nexport class UserController extends BaseHttpController {\n  constructor(\n    @inject(DOMAIN_APPLICATION_SERVICE_IDENTIFIERS.USER_SERVICE)\n    private readonly UserService: IUserService\n  ) {\n    super();\n  }\n\n  @httpGet('/')\n  public async get() {\n    return this.json(OK);\n  }\n\n  @httpGet('/currentUser')\n  public async getCurrentUser(req: Request) {\n    const user = getCurrentUser(req);\n\n    return this.json(user);\n  }\n\n  @httpPost('/removeUser', isAuthenticated({ role: USER_ROLE.MEMBER }))\n  public async Remove(@requestBody() { id }: RemoveUserCommandBody) {\n    return this.UserService.removeUser(new RemoveUserCommand(id));\n  }\n}\n","export class RemoveUserCommand {\n  constructor(public readonly id: string) {}\n}\n","export const DOMAIN_APPLICATION_SERVICE_IDENTIFIERS = {\n  USER_SERVICE: Symbol.for('UserService'),\n  AUTHENTICATION_SERVICE: Symbol.for('AuthenticationService'),\n  COFFEE_SERVICE: Symbol.for('CoffeeService'),\n  REVIEW_SERVICE: Symbol.for('ReviewService'),\n};\n\nexport const DOMAIN_MAPPING_IDENTIFIERS = {\n  USER_DOMAIN: Symbol.for('UserDomain'),\n  ROLE_DOMAIN: Symbol.for('RoleDomain'),\n  COFFEE_DOMAIN: Symbol.for('CoffeeDomain'),\n  REVIEW_DOMAIN: Symbol.for('ReviewDomain'),\n};\n\nexport const DOMAIN_REPOSITORY_IDENTIFIERS = {\n  ROLE_REPOSITORY: Symbol.for('RoleRepository'),\n  USER_REPOSITORY: Symbol.for('UserRepository'),\n  COFFEE_REPOSITORY: Symbol.for('CoffeeRepository'),\n  REVIEW_REPOSITORY: Symbol.for('ReviewRepository'),\n};\n\nexport const DOMAIN_UNIT_OF_WORK_IDENTIFIERS = {\n  USER_UNIT_OF_WORK: Symbol.for('UserUnitOfWork'),\n  COFFEE_UNIT_OF_WORK: Symbol.for('CoffeeUnitOfWork'),\n};\n","import * as express from 'express';\n\nimport { FORBIDDEN, getStatusText, UNAUTHORIZED } from 'http-status-codes';\n\nimport { getCurrentUser } from 'ui/common/config/application/express/auth/utils/getHttpContext';\nimport { UserInterfaceError } from 'ui/common/config/errors/UserInterfaceError';\n\nexport const isAuthenticated =\n  (config?: { role: string }) =>\n  async (\n    req: express.Request,\n    _res: express.Response,\n    next: express.NextFunction\n  ): Promise<void> => {\n    const user = getCurrentUser(req);\n    // eslint-disable-next-line no-console\n    if (!user) {\n      next(\n        new UserInterfaceError(\n          UNAUTHORIZED,\n          getStatusText(UNAUTHORIZED).toUpperCase()\n        )\n      );\n      return;\n    }\n\n    const isAuthenticatedUser = await user.isAuthenticated();\n\n    if (!isAuthenticatedUser) {\n      next(\n        new UserInterfaceError(\n          UNAUTHORIZED,\n          getStatusText(UNAUTHORIZED).toUpperCase()\n        )\n      );\n      return;\n    }\n\n    if (config) {\n      const isInRole = await user.isInRole(config.role);\n      if (!isInRole) {\n        next(\n          new UserInterfaceError(\n            FORBIDDEN,\n            getStatusText(FORBIDDEN).toUpperCase()\n          )\n        );\n        return;\n      }\n    }\n    next();\n  };\n","import { interfaces } from 'inversify-express-utils';\nimport { Request } from 'express';\n\nimport { Principal } from 'ui/common/config/application/express/auth/models/Principal';\n\nexport const getCurrentUser = (request: Request): Principal => {\n  const httpContext: interfaces.HttpContext = Reflect.getMetadata(\n    'inversify-express-utils:httpcontext',\n    request\n  );\n  // eslint-disable-next-line no-console\n  return httpContext.user;\n};\n","export class BaseError implements Error {\n  constructor(\n    public readonly code?: string,\n    public readonly message: string = '',\n    public readonly name: string = ''\n  ) {}\n}\n","import { BaseError } from 'core/common/errors/BaseError';\n\nexport class UserInterfaceError extends BaseError {\n  constructor(\n    public readonly status: number,\n    public readonly code?: string,\n    public readonly message: string = '',\n    public readonly name: string = ''\n  ) {\n    super(code, message, name);\n  }\n}\n"],"mappings":"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","names":["import_http_status_codes"]}