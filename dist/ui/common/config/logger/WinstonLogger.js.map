{"version":3,"sources":["../../../../../src/ui/common/config/logger/WinstonLogger.ts","../../../../../src/ui/common/config/logger/BaseLogger.ts","../../../../../src/ui/UIModuleSymbols.ts","../../../../../src/ui/common/config/consts/variables.ts"],"sourcesContent":["import { format as winstonFormat, Logger, transports } from 'winston';\nimport { Format } from 'logform';\nimport DailyRotateFile from 'winston-daily-rotate-file';\n\nimport { inject, injectable } from 'inversify';\n\nimport { BaseLogger } from 'ui/common/config/logger/BaseLogger';\nimport { ILogger } from 'ui/common/config/logger/ILogger';\n\nimport { UI_APPLICATION_IDENTIFIERS } from 'ui/UIModuleSymbols';\nimport { IS_DEVELOPMENT } from 'ui/common/config/consts/variables';\n\n@injectable()\nexport class WinstonLogger extends BaseLogger<Logger> implements ILogger {\n  private readonly format: Format;\n\n  constructor(\n    @inject(UI_APPLICATION_IDENTIFIERS.LOGGER_FORMAT) format: Format,\n    @inject(UI_APPLICATION_IDENTIFIERS.LOGGER) logger: Logger\n  ) {\n    super(logger);\n    this.format = format;\n  }\n\n  public initialize(): void {\n    const loggerConfig = {\n      datePattern: 'YYYY-MM-DD',\n      dirname: './logs',\n      format: this.format,\n      maxFiles: '14d',\n      maxSize: '20m',\n      zippedArchive: true,\n    };\n\n    this.logger.add(\n      new DailyRotateFile({\n        filename: 'cr-%DATE%.info.log',\n        level: 'info',\n        ...loggerConfig,\n      })\n    );\n\n    if (IS_DEVELOPMENT) {\n      this.logger.add(\n        new transports.Console({\n          format: winstonFormat.combine(winstonFormat.colorize(), this.format),\n          handleExceptions: true,\n          level: 'debug',\n        })\n      );\n    }\n  }\n\n  write(message: string): void {\n    this.logger.info(message);\n  }\n}\n","export abstract class BaseLogger<T> {\n  protected readonly logger: T;\n\n  constructor(logger: T) {\n    this.logger = logger;\n  }\n\n  public getLogger(): T {\n    return this.logger;\n  }\n}\n","export const UI_IDENTIFIERS = {\n  UI_MAPPER: Symbol.for('UIMapper'),\n};\n\nexport const UI_APPLICATION_IDENTIFIERS = {\n  EXPRESS: Symbol.for('Express'),\n  EXPRESS_ROUTER: Symbol.for('ExpressRouter'),\n\n  EXPRESS_APPLICATION: Symbol.for('ExpressApplication'),\n  INVERSIFY_APPLICATION: Symbol.for('InversifyExpressApplication'),\n  JWT_TOKEN_UTIL: Symbol.for('JWTTokenUtil'),\n  JWT_AUTHENTICATION_HANDLER: Symbol.for('JWTAuthenticationHandler'),\n\n  LOGGER: Symbol.for('Logger'),\n  LOGGER_FORMAT: Symbol.for('WinstonFormat'),\n  LOGGER_WINSTON: Symbol.for('WinstonLogger'),\n};\n\nexport const UI_MAPPINGS_IDENTIFIERS = {\n  USER_UI: Symbol.for('UserUI'),\n};\n","import dotenv from 'dotenv';\n\ndotenv.config();\n\nexport const APP_TOKEN_SECRET = process.env.APP_TOKEN_SECRET || '';\nexport const APP_TOKEN_LIFE = process.env.APP_TOKEN_LIFE || '24h';\nexport const PORT = process.env.PORT || '3000';\nexport const LOG_LEVEL = process.env.LOG_LEVEL || 'debug';\nexport const SWAGGER_BASE_PATH = process.env.SWAGGER_BASE_PATH || '';\nexport const { SWAGGER_HOST } = process.env;\nexport const IS_DEVELOPMENT = process.env.NODE_ENV === 'development';\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAA4D;AAE5D,uCAA4B;AAE5B,uBAAmC;;;ACJ5B,IAAe,aAAf,MAA6B;AAAA,EAGlC,YAAY,QAAW;AACrB,SAAK,SAAS;AAAA,EAChB;AAAA,EAEO,YAAe;AACpB,WAAO,KAAK;AAAA,EACd;AACF;AAVsB;;;ACAf,IAAM,iBAAiB;AAAA,EAC5B,WAAW,OAAO,IAAI,UAAU;AAClC;AAEO,IAAM,6BAA6B;AAAA,EACxC,SAAS,OAAO,IAAI,SAAS;AAAA,EAC7B,gBAAgB,OAAO,IAAI,eAAe;AAAA,EAE1C,qBAAqB,OAAO,IAAI,oBAAoB;AAAA,EACpD,uBAAuB,OAAO,IAAI,6BAA6B;AAAA,EAC/D,gBAAgB,OAAO,IAAI,cAAc;AAAA,EACzC,4BAA4B,OAAO,IAAI,0BAA0B;AAAA,EAEjE,QAAQ,OAAO,IAAI,QAAQ;AAAA,EAC3B,eAAe,OAAO,IAAI,eAAe;AAAA,EACzC,gBAAgB,OAAO,IAAI,eAAe;AAC5C;AAEO,IAAM,0BAA0B;AAAA,EACrC,SAAS,OAAO,IAAI,QAAQ;AAC9B;;;ACpBA,oBAAmB;AAEnB,cAAAA,QAAO,OAAO;AAEP,IAAM,mBAAmB,QAAQ,IAAI,oBAAoB;AACzD,IAAM,iBAAiB,QAAQ,IAAI,kBAAkB;AACrD,IAAM,OAAO,QAAQ,IAAI,QAAQ;AACjC,IAAM,YAAY,QAAQ,IAAI,aAAa;AAC3C,IAAM,oBAAoB,QAAQ,IAAI,qBAAqB;AAC3D,IAAM,EAAE,aAAa,IAAI,QAAQ;AACjC,IAAM,iBAAiB,QAAQ,IAAI,aAAa;;;AHGhD,IAAM,gBAAN,cAA4B,WAAsC;AAAA,EAGvE,YACoD,QACP,QAC3C;AACA,UAAM,MAAM;AACZ,SAAK,SAAS;AAAA,EAChB;AAAA,EAEO,aAAmB;AACxB,UAAM,eAAe;AAAA,MACnB,aAAa;AAAA,MACb,SAAS;AAAA,MACT,QAAQ,KAAK;AAAA,MACb,UAAU;AAAA,MACV,SAAS;AAAA,MACT,eAAe;AAAA,IACjB;AAEA,SAAK,OAAO;AAAA,MACV,IAAI,iCAAAC,QAAgB;AAAA,QAClB,UAAU;AAAA,QACV,OAAO;AAAA,QACP,GAAG;AAAA,MACL,CAAC;AAAA,IACH;AAEA,QAAI,gBAAgB;AAClB,WAAK,OAAO;AAAA,QACV,IAAI,0BAAW,QAAQ;AAAA,UACrB,QAAQ,eAAAC,OAAc,QAAQ,eAAAA,OAAc,SAAS,GAAG,KAAK,MAAM;AAAA,UACnE,kBAAkB;AAAA,UAClB,OAAO;AAAA,QACT,CAAC;AAAA,MACH;AAAA,IACF;AAAA,EACF;AAAA,EAEA,MAAM,SAAuB;AAC3B,SAAK,OAAO,KAAK,OAAO;AAAA,EAC1B;AACF;AA3Ca;AAAA,gBAAN;AAAA,MADN,6BAAW;AAAA,EAKR,uBAAC,yBAAO,2BAA2B,aAAa;AAAA,EAChD,uBAAC,yBAAO,2BAA2B,MAAM;AAAA,GALhC;","names":["dotenv","DailyRotateFile","winstonFormat"]}