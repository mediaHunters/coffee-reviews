{"version":3,"sources":["../../../../../../node_modules/dotenv/lib/main.js","../../../../../../src/ui/common/config/application/express/ExpressApplication.ts","../../../../../../src/ui/common/config/application/common/BaseApplication.ts","../../../../../../src/ui/common/config/consts/variables.ts","../../../../../../src/ui/UIModuleSymbols.ts","../../../../../../src/ui/common/config/swagger.json"],"sourcesContent":["/* @flow */\n/*::\n\ntype DotenvParseOptions = {\n  debug?: boolean\n}\n\n// keys and values from src\ntype DotenvParseOutput = { [string]: string }\n\ntype DotenvConfigOptions = {\n  path?: string, // path to .env file\n  encoding?: string, // encoding of .env file\n  debug?: string // turn on logging for debugging purposes\n}\n\ntype DotenvConfigOutput = {\n  parsed?: DotenvParseOutput,\n  error?: Error\n}\n\n*/\n\nconst fs = require('fs')\nconst path = require('path')\n\nfunction log (message /*: string */) {\n  console.log(`[dotenv][DEBUG] ${message}`)\n}\n\nconst NEWLINE = '\\n'\nconst RE_INI_KEY_VAL = /^\\s*([\\w.-]+)\\s*=\\s*(.*)?\\s*$/\nconst RE_NEWLINES = /\\\\n/g\nconst NEWLINES_MATCH = /\\n|\\r|\\r\\n/\n\n// Parses src into an Object\nfunction parse (src /*: string | Buffer */, options /*: ?DotenvParseOptions */) /*: DotenvParseOutput */ {\n  const debug = Boolean(options && options.debug)\n  const obj = {}\n\n  // convert Buffers before splitting into lines and processing\n  src.toString().split(NEWLINES_MATCH).forEach(function (line, idx) {\n    // matching \"KEY' and 'VAL' in 'KEY=VAL'\n    const keyValueArr = line.match(RE_INI_KEY_VAL)\n    // matched?\n    if (keyValueArr != null) {\n      const key = keyValueArr[1]\n      // default undefined or missing values to empty string\n      let val = (keyValueArr[2] || '')\n      const end = val.length - 1\n      const isDoubleQuoted = val[0] === '\"' && val[end] === '\"'\n      const isSingleQuoted = val[0] === \"'\" && val[end] === \"'\"\n\n      // if single or double quoted, remove quotes\n      if (isSingleQuoted || isDoubleQuoted) {\n        val = val.substring(1, end)\n\n        // if double quoted, expand newlines\n        if (isDoubleQuoted) {\n          val = val.replace(RE_NEWLINES, NEWLINE)\n        }\n      } else {\n        // remove surrounding whitespace\n        val = val.trim()\n      }\n\n      obj[key] = val\n    } else if (debug) {\n      log(`did not match key and value when parsing line ${idx + 1}: ${line}`)\n    }\n  })\n\n  return obj\n}\n\n// Populates process.env from .env file\nfunction config (options /*: ?DotenvConfigOptions */) /*: DotenvConfigOutput */ {\n  let dotenvPath = path.resolve(process.cwd(), '.env')\n  let encoding /*: string */ = 'utf8'\n  let debug = false\n\n  if (options) {\n    if (options.path != null) {\n      dotenvPath = options.path\n    }\n    if (options.encoding != null) {\n      encoding = options.encoding\n    }\n    if (options.debug != null) {\n      debug = true\n    }\n  }\n\n  try {\n    // specifying an encoding returns a string instead of a buffer\n    const parsed = parse(fs.readFileSync(dotenvPath, { encoding }), { debug })\n\n    Object.keys(parsed).forEach(function (key) {\n      if (!Object.prototype.hasOwnProperty.call(process.env, key)) {\n        process.env[key] = parsed[key]\n      } else if (debug) {\n        log(`\"${key}\" is already defined in \\`process.env\\` and will not be overwritten`)\n      }\n    })\n\n    return { parsed }\n  } catch (e) {\n    return { error: e }\n  }\n}\n\nmodule.exports.config = config\nmodule.exports.parse = parse\n","import express from 'express';\nimport morgan from 'morgan';\nimport methodOverride from 'method-override';\nimport helmet from 'helmet';\nimport cors from 'cors';\nimport swaggerUi from 'swagger-ui-express';\nimport { inject, injectable } from 'inversify';\n\nimport { IApplication } from 'ui/common/config/application/common/IApplication';\nimport { BaseApplication } from 'ui/common/config/application/common/BaseApplication';\nimport { ILogger } from 'ui/common/config/logger/ILogger';\nimport {\n  SWAGGER_BASE_PATH,\n  SWAGGER_HOST,\n} from 'ui/common/config/consts/variables';\nimport { UI_APPLICATION_IDENTIFIERS } from 'ui/UIModuleSymbols';\n\nimport swaggerDocument from 'ui/common/config/swagger.json';\n\n@injectable()\nexport class ExpressApplication\n  extends BaseApplication<express.Application>\n  implements IApplication\n{\n  private readonly logger: ILogger;\n\n  private readonly router: express.Router;\n\n  constructor(\n    @inject(UI_APPLICATION_IDENTIFIERS.LOGGER_WINSTON) logger: ILogger,\n    @inject(UI_APPLICATION_IDENTIFIERS.EXPRESS) app: express.Application,\n    @inject(UI_APPLICATION_IDENTIFIERS.EXPRESS_ROUTER) router: express.Router\n  ) {\n    super(app);\n    this.logger = logger;\n    this.router = router;\n  }\n\n  public initialize(): void {\n    this.initializeSecurity();\n    this.initializeBodyParsers();\n    if (process.env.NODE_ENV !== 'test') {\n      this.initializeLogging();\n    }\n    this.initializeHandlers();\n    this.initializePlugins();\n    this.initializeExtensions();\n  }\n\n  public initializeSecurity(): void {\n    this.app.use(express.urlencoded({ extended: false }));\n  }\n\n  public initializeBodyParsers(): void {\n    this.app.use(express.json());\n  }\n\n  public initializeLogging(): void {\n    this.logger.initialize();\n    morgan.token(\n      'body',\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (req): string => `\\nREQUEST BODY: ${JSON.stringify((req as any).body)}`\n    );\n    /**\n     * @description you may consider what you want to log on production\n     * keep in mind to obfuscate sensitive data if you want to log request or response bodies\n     * format can be moved to some other place for easier configuration\n     */\n    this.app.use(\n      morgan(\n        ':method :url HTTP/:http-version :status :response-time ms :referrer :user-agent - :body',\n        { stream: this.logger }\n      )\n    );\n  }\n\n  public initializeHandlers(): void {\n    Error('NOT IMPLEMENTED');\n  }\n\n  public initializePlugins(): void {\n    this.app.use(methodOverride());\n    this.app.use(helmet());\n    this.app.use(cors());\n  }\n\n  public initializeExtensions(): void {\n    if (SWAGGER_HOST) {\n      swaggerDocument.host = SWAGGER_HOST;\n      this.app.use(\n        SWAGGER_BASE_PATH,\n        swaggerUi.serve,\n        swaggerUi.setup(swaggerDocument)\n      );\n    }\n  }\n}\n","export abstract class BaseApplication<T> {\n  protected readonly app: T;\n\n  protected constructor(app: T) {\n    this.app = app;\n  }\n\n  public abstract initialize(): void;\n\n  public getApplication(): T {\n    return this.app;\n  }\n}\n","import * as dotenv from 'dotenv';\n\ndotenv.config();\n\nexport const APP_TOKEN_SECRET = process.env.APP_TOKEN_SECRET || '';\nexport const APP_TOKEN_LIFE = process.env.APP_TOKEN_LIFE || '24h';\nexport const PORT = process.env.PORT || '3000';\nexport const LOG_LEVEL = process.env.LOG_LEVEL || 'debug';\nexport const SWAGGER_BASE_PATH = process.env.SWAGGER_BASE_PATH || '';\nexport const { SWAGGER_HOST } = process.env;\nexport const IS_DEVELOPMENT = process.env.NODE_ENV === 'development';\n","export const UI_IDENTIFIERS = {\n  UI_MAPPER: Symbol.for('UIMapper'),\n};\n\nexport const UI_APPLICATION_IDENTIFIERS = {\n  EXPRESS: Symbol.for('Express'),\n  EXPRESS_ROUTER: Symbol.for('ExpressRouter'),\n\n  EXPRESS_APPLICATION: Symbol.for('ExpressApplication'),\n  INVERSIFY_APPLICATION: Symbol.for('InversifyExpressApplication'),\n  JWT_TOKEN_UTIL: Symbol.for('JWTTokenUtil'),\n  JWT_AUTHENTICATION_HANDLER: Symbol.for('JWTAuthenticationHandler'),\n\n  LOGGER: Symbol.for('Logger'),\n  LOGGER_FORMAT: Symbol.for('WinstonFormat'),\n  LOGGER_WINSTON: Symbol.for('WinstonLogger'),\n};\n\nexport const UI_MAPPINGS_IDENTIFIERS = {\n  USER_UI: Symbol.for('UserUI'),\n};\n","{\r\n  \"swagger\": \"2.0\",\r\n  \"info\": {\r\n    \"version\": \"1.0.0\",\r\n    \"title\": \"CR API\",\r\n    \"description\": \"Api documentation for CR project \\n\",\r\n    \"contact\": {\r\n      \"name\": \"MediaHunters\"\r\n    },\r\n    \"license\": {\r\n      \"name\": \"[PUT LICENSE NAME HERE]\"\r\n    }\r\n  },\r\n  \"host\": \"localhost:3000\",\r\n  \"basePath\": \"/v1\",\r\n  \"tags\": [\r\n    {\r\n      \"name\": \"auth\",\r\n      \"description\": \"Api endpoints related to authentication\"\r\n    }\r\n  ],\r\n  \"securityDefinitions\": {\r\n    \"bearer\": {\r\n      \"type\": \"apiKey\",\r\n      \"name\": \"Authorization\",\r\n      \"in\": \"header\"\r\n    }\r\n  },\r\n  \"schemes\": [\"http\", \"https\"],\r\n  \"consumes\": [\"application/json\"],\r\n  \"produces\": [\"application/json\"],\r\n  \"paths\": {\r\n    \"/user\": {\r\n      \"delete\": {\r\n        \"security\": [\r\n          {\r\n            \"bearer\": []\r\n          }\r\n        ],\r\n        \"tags\": [\"user\"],\r\n        \"description\": \"User endpoint\",\r\n        \"consumes\": [\"application/json\"],\r\n        \"produces\": [\"application/json\"],\r\n        \"parameters\": [\r\n          {\r\n            \"in\": \"body\",\r\n            \"name\": \"body\",\r\n            \"required\": true,\r\n            \"schema\": {\r\n              \"$ref\": \"#/definitions/UserDeleteRequest\"\r\n            }\r\n          }\r\n        ],\r\n        \"responses\": {\r\n          \"200\": {\r\n            \"description\": \"Returns authentication token\"\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n"],"mappings":"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","names":["module","config","express","morgan","methodOverride","helmet","cors","swaggerUi"]}