{"version":3,"sources":["../../../../../../../src/ui/common/config/application/express/auth/JWTAuthenticationHandler.ts","../../../../../../../src/ui/UIModuleSymbols.ts","../../../../../../../src/ui/common/config/consts/variables.ts","../../../../../../../src/core/common/errors/BaseError.ts","../../../../../../../src/ui/common/config/errors/UserInterfaceError.ts","../../../../../../../src/core/CoreModuleSymbols.ts","../../../../../../../src/ui/common/config/application/common/auth/models/Authentication.ts"],"sourcesContent":["import { inject, injectable } from 'inversify';\n\nimport { NOT_FOUND } from 'http-status-codes';\n\nimport {\n  UI_APPLICATION_IDENTIFIERS,\n  UI_IDENTIFIERS,\n  UI_MAPPINGS_IDENTIFIERS,\n} from 'ui/UIModuleSymbols';\nimport { JWTTokenUtil } from 'ui/common/config/application/common/auth/utils/JWTTokenUtil';\nimport { IAuthenticationHandler } from 'ui/common/config/application/common/auth/IAuthenticationHandler';\nimport {\n  APP_TOKEN_LIFE,\n  APP_TOKEN_SECRET,\n} from 'ui/common/config/consts/variables';\nimport { UIMapper } from 'ui/common/mappings/UIMapper';\nimport { User as UserUI } from 'ui/common/models/User';\nimport { UserInterfaceError } from 'ui/common/config/errors/UserInterfaceError';\n\nimport { IAuthenticationService } from 'core/applicationServices/Authentication/IAuthenticationService';\n\nimport {\n  DOMAIN_APPLICATION_SERVICE_IDENTIFIERS,\n  DOMAIN_MAPPING_IDENTIFIERS,\n} from 'core/CoreModuleSymbols';\n\nimport { User } from 'core/domain/User/User';\nimport { AuthenticationQuery } from 'core/applicationServices/Authentication/requests/handler/query/AuthenticationQuery';\nimport { Authentication } from 'ui/common/config/application/common/auth/models/Authentication';\n\nconst PAYLOAD_KEY = 'user';\n\n@injectable()\nexport class JWTAuthenticationHandler implements IAuthenticationHandler {\n  constructor(\n    @inject(UI_APPLICATION_IDENTIFIERS.JWT_TOKEN_UTIL)\n    private readonly jwtTokenUtil: JWTTokenUtil,\n    @inject(DOMAIN_APPLICATION_SERVICE_IDENTIFIERS.AUTHENTICATION_SERVICE)\n    private readonly authenticationService: IAuthenticationService,\n    @inject(UI_IDENTIFIERS.UI_MAPPER)\n    private readonly uiMapper: UIMapper\n  ) {}\n\n  async authenticate(request: AuthenticationQuery) {\n    const user = await this.authenticationService.verifyCredentials(request);\n    if (!user) {\n      throw new UserInterfaceError(NOT_FOUND, 'USER_NOT_FOUND');\n    }\n\n    const userUi = this.uiMapper.mapper.map<User, UserUI>(\n      {\n        destination: UI_MAPPINGS_IDENTIFIERS.USER_UI,\n        source: DOMAIN_MAPPING_IDENTIFIERS.USER_DOMAIN,\n      },\n      user\n    );\n\n    return new Authentication(\n      this.jwtTokenUtil.generateToken(\n        userUi,\n        APP_TOKEN_SECRET,\n        APP_TOKEN_LIFE,\n        PAYLOAD_KEY\n      ),\n      user\n    );\n  }\n}\n","export const UI_IDENTIFIERS = {\n  UI_MAPPER: Symbol.for('UIMapper'),\n};\n\nexport const UI_APPLICATION_IDENTIFIERS = {\n  EXPRESS: Symbol.for('Express'),\n  EXPRESS_ROUTER: Symbol.for('ExpressRouter'),\n\n  EXPRESS_APPLICATION: Symbol.for('ExpressApplication'),\n  INVERSIFY_APPLICATION: Symbol.for('InversifyExpressApplication'),\n  JWT_TOKEN_UTIL: Symbol.for('JWTTokenUtil'),\n  JWT_AUTHENTICATION_HANDLER: Symbol.for('JWTAuthenticationHandler'),\n\n  LOGGER: Symbol.for('Logger'),\n  LOGGER_FORMAT: Symbol.for('WinstonFormat'),\n  LOGGER_WINSTON: Symbol.for('WinstonLogger'),\n};\n\nexport const UI_MAPPINGS_IDENTIFIERS = {\n  USER_UI: Symbol.for('UserUI'),\n};\n","import dotenv from 'dotenv';\n\ndotenv.config();\n\nexport const APP_TOKEN_SECRET = process.env.APP_TOKEN_SECRET || '';\nexport const APP_TOKEN_LIFE = process.env.APP_TOKEN_LIFE || '24h';\nexport const PORT = process.env.PORT || '3000';\nexport const LOG_LEVEL = process.env.LOG_LEVEL || 'debug';\nexport const SWAGGER_BASE_PATH = process.env.SWAGGER_BASE_PATH || '';\nexport const { SWAGGER_HOST } = process.env;\nexport const IS_DEVELOPMENT = process.env.NODE_ENV === 'development';\n","export class BaseError implements Error {\n  constructor(\n    public readonly code?: string,\n    public readonly message: string = '',\n    public readonly name: string = ''\n  ) {}\n}\n","import { BaseError } from 'core/common/errors/BaseError';\n\nexport class UserInterfaceError extends BaseError {\n  constructor(\n    public readonly status: number,\n    public readonly code?: string,\n    public readonly message: string = '',\n    public readonly name: string = ''\n  ) {\n    super(code, message, name);\n  }\n}\n","export const DOMAIN_APPLICATION_SERVICE_IDENTIFIERS = {\n  USER_SERVICE: Symbol.for('UserService'),\n  AUTHENTICATION_SERVICE: Symbol.for('AuthenticationService'),\n  COFFEE_SERVICE: Symbol.for('CoffeeService'),\n  REVIEW_SERVICE: Symbol.for('ReviewService'),\n};\n\nexport const DOMAIN_MAPPING_IDENTIFIERS = {\n  USER_DOMAIN: Symbol.for('UserDomain'),\n  ROLE_DOMAIN: Symbol.for('RoleDomain'),\n  COFFEE_DOMAIN: Symbol.for('CoffeeDomain'),\n  REVIEW_DOMAIN: Symbol.for('ReviewDomain'),\n};\n\nexport const DOMAIN_REPOSITORY_IDENTIFIERS = {\n  ROLE_REPOSITORY: Symbol.for('RoleRepository'),\n  USER_REPOSITORY: Symbol.for('UserRepository'),\n  COFFEE_REPOSITORY: Symbol.for('CoffeeRepository'),\n  REVIEW_REPOSITORY: Symbol.for('ReviewRepository'),\n};\n\nexport const DOMAIN_UNIT_OF_WORK_IDENTIFIERS = {\n  USER_UNIT_OF_WORK: Symbol.for('UserUnitOfWork'),\n  COFFEE_UNIT_OF_WORK: Symbol.for('CoffeeUnitOfWork'),\n};\n","import { User } from 'core/domain/User/User';\n\nexport class Authentication {\n  constructor(public readonly token: string, public readonly user: User) {}\n}\n"],"mappings":"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","names":["dotenv"]}