{"version":3,"sources":["../../../../../../../../src/ui/common/config/application/express/auth/middlewares/isAuthenticated.ts","../../../../../../../../src/ui/common/config/application/express/auth/utils/getHttpContext.ts","../../../../../../../../src/core/common/errors/BaseError.ts","../../../../../../../../src/ui/common/config/errors/UserInterfaceError.ts"],"sourcesContent":["import * as express from 'express';\n\nimport { FORBIDDEN, getStatusText, UNAUTHORIZED } from 'http-status-codes';\n\nimport { getCurrentUser } from 'ui/common/config/application/express/auth/utils/getHttpContext';\nimport { UserInterfaceError } from 'ui/common/config/errors/UserInterfaceError';\n\nexport const isAuthenticated =\n  (config?: { role: string }) =>\n  async (\n    req: express.Request,\n    _res: express.Response,\n    next: express.NextFunction\n  ): Promise<void> => {\n    const user = getCurrentUser(req);\n    // eslint-disable-next-line no-console\n    if (!user) {\n      next(\n        new UserInterfaceError(\n          UNAUTHORIZED,\n          getStatusText(UNAUTHORIZED).toUpperCase()\n        )\n      );\n      return;\n    }\n\n    const isAuthenticatedUser = await user.isAuthenticated();\n\n    if (!isAuthenticatedUser) {\n      next(\n        new UserInterfaceError(\n          UNAUTHORIZED,\n          getStatusText(UNAUTHORIZED).toUpperCase()\n        )\n      );\n      return;\n    }\n\n    if (config) {\n      const isInRole = await user.isInRole(config.role);\n      if (!isInRole) {\n        next(\n          new UserInterfaceError(\n            FORBIDDEN,\n            getStatusText(FORBIDDEN).toUpperCase()\n          )\n        );\n        return;\n      }\n    }\n    next();\n  };\n","import { interfaces } from 'inversify-express-utils';\nimport { Request } from 'express';\n\nimport { Principal } from 'ui/common/config/application/express/auth/models/Principal';\n\nexport const getCurrentUser = (request: Request): Principal => {\n  const httpContext: interfaces.HttpContext = Reflect.getMetadata(\n    'inversify-express-utils:httpcontext',\n    request\n  );\n  // eslint-disable-next-line no-console\n  return httpContext.user;\n};\n","export class BaseError implements Error {\n  constructor(\n    public readonly code?: string,\n    public readonly message: string = '',\n    public readonly name: string = ''\n  ) {}\n}\n","import { BaseError } from 'core/common/errors/BaseError';\n\nexport class UserInterfaceError extends BaseError {\n  constructor(\n    public readonly status: number,\n    public readonly code?: string,\n    public readonly message: string = '',\n    public readonly name: string = ''\n  ) {\n    super(code, message, name);\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA,+BAAuD;;;ACGhD,IAAM,iBAAiB,CAAC,YAAgC;AAC7D,QAAM,cAAsC,QAAQ;AAAA,IAClD;AAAA,IACA;AAAA,EACF;AAEA,SAAO,YAAY;AACrB;;;ACZO,IAAM,YAAN,MAAiC;AAAA,EACtC,YACkB,MACA,UAAkB,IAClB,OAAe,IAC/B;AAHgB;AACA;AACA;AAAA,EACf;AACL;;;ACJO,IAAM,qBAAN,cAAiC,UAAU;AAAA,EAChD,YACkB,QACA,MACA,UAAkB,IAClB,OAAe,IAC/B;AACA,UAAM,MAAM,SAAS,IAAI;AALT;AACA;AACA;AACA;AAAA,EAGlB;AACF;;;AHJO,IAAM,kBACX,CAAC,WACD,OACE,KACA,MACA,SACkB;AAClB,QAAM,OAAO,eAAe,GAAG;AAE/B,MAAI,CAAC,MAAM;AACT;AAAA,MACE,IAAI;AAAA,QACF;AAAA,YACA,wCAAc,qCAAY,EAAE,YAAY;AAAA,MAC1C;AAAA,IACF;AACA;AAAA,EACF;AAEA,QAAM,sBAAsB,MAAM,KAAK,gBAAgB;AAEvD,MAAI,CAAC,qBAAqB;AACxB;AAAA,MACE,IAAI;AAAA,QACF;AAAA,YACA,wCAAc,qCAAY,EAAE,YAAY;AAAA,MAC1C;AAAA,IACF;AACA;AAAA,EACF;AAEA,MAAI,QAAQ;AACV,UAAM,WAAW,MAAM,KAAK,SAAS,OAAO,IAAI;AAChD,QAAI,CAAC,UAAU;AACb;AAAA,QACE,IAAI;AAAA,UACF;AAAA,cACA,wCAAc,kCAAS,EAAE,YAAY;AAAA,QACvC;AAAA,MACF;AACA;AAAA,IACF;AAAA,EACF;AACA,OAAK;AACP;","names":[]}