{"version":3,"sources":["../src/ui/portal/Coffee/rest/v1/CoffeeController.ts"],"sourcesContent":["import { inject } from 'inversify';\nimport {\n  BaseHttpController,\n  controller,\n  httpDelete,\n  httpGet,\n  httpPost,\n  httpPut,\n  requestBody,\n  requestParam,\n  results,\n} from 'inversify-express-utils';\nimport { OK } from 'http-status-codes';\n\nimport { DOMAIN_APPLICATION_SERVICE_IDENTIFIERS } from 'core/CoreModuleSymbols';\nimport { ICoffeeService } from 'core/applicationServices/Coffee/ICoffeeService';\nimport { isAuthenticated } from 'ui/common/config/application/express/auth/middlewares/isAuthenticated';\nimport { USER_ROLE } from 'core/domain/User/UserRole';\nimport { CreateCoffeeCommandBody } from 'ui/portal/Coffee/requests/command/CreateCoffeeCommandBody';\nimport { DeleteCoffeeCommand } from 'core/applicationServices/Coffee/requests/command/DeleteCoffeeCommand';\nimport { DeleteCoffeeCommandBody } from 'ui/portal/Coffee/requests/command/DeleteCoffeeCommandBody';\nimport { AddReviewCommandBody } from 'ui/portal/Coffee/requests/command/AddReviewCommandBody';\nimport { FindOneCoffeeRepositoryQuery } from 'core/domainServices/Coffee/requests/UnitOfWork/query/FindCoffeeRepositoryQuery';\nimport { CreateCoffeeCommand } from 'core/applicationServices/Coffee/requests/command/AddCoffeeCommand';\nimport { UpdateCoffeeCommand } from 'core/applicationServices/Coffee/requests/command/UpdateCoffeeCommand';\nimport { FindOneCoffeeRepositoryQueryBody } from 'ui/portal/Coffee/requests/query/FindOneCoffeeRepositoryQueryBody';\nimport { UpdateCoffeeCommandBody } from 'ui/portal/Coffee/requests/command/UpdateCoffeeCommandBody';\nimport { GetUserReviewsQueryBody } from 'ui/portal/Coffee/requests/query/GetUserReviewsQueryBody';\nimport { IReviewService } from 'core/applicationServices/Review/IReviewService';\nimport { GetUserReviewsQuery } from 'core/applicationServices/Review/requests/query/GetUserReviewsQuery';\nimport { AddReviewCommand } from 'core/applicationServices/Review/requests/command/AddReviewCommand';\nimport { UpdateReviewCommand } from 'core/applicationServices/Review/requests/command/UpdateReviewCommand';\nimport { UpdateReviewCommandBody } from 'ui/portal/Coffee/requests/command/UpdateReviewCommandBody';\nimport { DeleteReviewCommandBody } from 'ui/portal/Coffee/requests/command/DeleteReviewCommandBody';\nimport { DeleteReviewCommand } from 'core/applicationServices/Review/requests/command/DeleteReviewCommand';\n\n@controller('/v1/coffee')\nexport class CoffeeController extends BaseHttpController {\n  constructor(\n    @inject(DOMAIN_APPLICATION_SERVICE_IDENTIFIERS.COFFEE_SERVICE)\n    private readonly coffeeService: ICoffeeService,\n    @inject(DOMAIN_APPLICATION_SERVICE_IDENTIFIERS.REVIEW_SERVICE)\n    private readonly reviewService: IReviewService\n  ) {\n    super();\n  }\n\n  @httpGet('/')\n  async GetAll(): Promise<results.JsonResult> {\n    const result = await this.coffeeService.findAll();\n\n    return this.json(result, OK);\n  }\n\n  @httpGet('/:id')\n  async get(\n    @requestParam('id') { coffeeId }: FindOneCoffeeRepositoryQueryBody\n  ): Promise<results.JsonResult> {\n    const result = await this.coffeeService.findOne(\n      new FindOneCoffeeRepositoryQuery(coffeeId)\n    );\n    return this.json(result, OK);\n  }\n\n  @httpPost('/create', isAuthenticated({ role: USER_ROLE.MEMBER }))\n  async add(\n    @requestBody()\n    {\n      brand,\n      name,\n      type,\n      imgUrl,\n      description,\n      burntLvl,\n      reflink,\n      CoffeeStatus,\n    }: CreateCoffeeCommandBody\n  ): Promise<results.JsonResult> {\n    const coffeeCommand = new CreateCoffeeCommand(\n      brand,\n      name,\n      type,\n      imgUrl,\n      description,\n      burntLvl,\n      reflink || '',\n      CoffeeStatus\n    );\n\n    const result = await this.coffeeService.create(coffeeCommand);\n    return this.json(result, OK);\n  }\n\n  @httpPut('/:id/update', isAuthenticated({ role: USER_ROLE.MEMBER }))\n  async update(\n    @requestParam('id') coffeeId: string,\n    @requestBody() { coffee }: UpdateCoffeeCommandBody\n  ) {\n    const result = await this.coffeeService.update(\n      new UpdateCoffeeCommand(coffee, coffeeId)\n    );\n\n    return this.json(result, OK);\n  }\n\n  @httpDelete('/:id', isAuthenticated({ role: USER_ROLE.MEMBER }))\n  async delete(\n    @requestParam() { id }: DeleteCoffeeCommandBody\n  ): Promise<results.JsonResult> {\n    const result = await this.coffeeService.delete(new DeleteCoffeeCommand(id));\n\n    return this.json(result, OK);\n  }\n\n  @httpGet('/:userId/reviews/', isAuthenticated({ role: USER_ROLE.MEMBER }))\n  async GetUserReviews(@requestParam() { userId }: GetUserReviewsQueryBody) {\n    const result = await this.reviewService.getAll(\n      new GetUserReviewsQuery(userId)\n    );\n    return this.json(result, OK);\n  }\n\n  @httpPost(\n    '/:coffeeId/reviews/add',\n    isAuthenticated({ role: USER_ROLE.MEMBER })\n  )\n  async addReview(\n    @requestParam('coffeeId') coffeeId: string,\n    @requestBody()\n    { rating, look, smell, taste, userId }: AddReviewCommandBody\n  ): Promise<results.JsonResult> {\n    const result = await this.reviewService.add(\n      new AddReviewCommand(userId, coffeeId, rating, look, smell, taste)\n    );\n    return this.json(result, OK);\n  }\n\n  @httpPut(\n    '/:coffeeId/reviews/:reviewId/update',\n    isAuthenticated({ role: USER_ROLE.MEMBER })\n  )\n  async updateReview(\n    @requestParam('reviewId') reviewId: string,\n    @requestBody() { review }: UpdateReviewCommandBody\n  ) {\n    const result = this.reviewService.update(\n      new UpdateReviewCommand(review, reviewId)\n    );\n\n    return this.json(result, OK);\n  }\n\n  @httpDelete(\n    '/:id/reviews/delete',\n    isAuthenticated({ role: USER_ROLE.MEMBER })\n  )\n  async deleteReview(\n    @requestParam('reviewId') { reviewId }: DeleteReviewCommandBody\n  ) {\n    const result = this.reviewService.delete(new DeleteReviewCommand(reviewId));\n\n    return this.json(result, OK);\n  }\n\n  // @httpPost('/search')\n  // async search(@requestParam() { sortBy, skip, take }: SearchQueryBody) {\n  //   const _result = await this.CoffeeService.sortAndPaginate(\n  //     new SearchQuery(sortBy, skip, take)\n  //   );\n  // }\n}\n"],"mappings":"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","names":[]}