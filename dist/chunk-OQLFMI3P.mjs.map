{"version":3,"sources":["../src/infrastructure/database/mappings/DBMapper.ts"],"sourcesContent":["import { Mapper } from '@wufe/mapper';\nimport { IMapperConfiguration } from '@wufe/mapper/types/conf/mapper.configuration';\n\nimport { injectable } from 'inversify';\n\nimport { RoleEntityToRoleDomain } from 'infrastructure/database/mappings/Role/RoleEntityToRoleDomain';\nimport { UserEntityToUserDomain } from 'infrastructure/database/mappings/User/UserEntityToUserDomain';\nimport { CoffeeEntityToCoffeeDomain } from 'infrastructure/database/mappings/Coffee/CoffeEntityToCoffeeDomain';\nimport { ReviewEntityToReviewDomain } from 'infrastructure/database/mappings/Review/ReviewEntityToReviewDomain';\n\n@injectable()\nexport class DBMapper {\n  public readonly mapper: Mapper;\n\n  constructor() {\n    this.mapper = new Mapper().withConfiguration(\n      (configuration: IMapperConfiguration) =>\n        configuration\n          .shouldIgnoreSourcePropertiesIfNotInDestination(true)\n          .shouldAutomaticallyMapArrays(true)\n    );\n\n    this.initialize();\n  }\n\n  private initialize(): void {\n    UserEntityToUserDomain().configureMapping(this.mapper);\n    RoleEntityToRoleDomain().configureMapping(this.mapper);\n    CoffeeEntityToCoffeeDomain().configureMapping(this.mapper);\n    ReviewEntityToReviewDomain().configureMapping(this.mapper);\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA,SAAS,cAAc;AAGvB,SAAS,kBAAkB;AAQpB,IAAM,WAAN,MAAe;AAAA,EAGpB,cAAc;AACZ,SAAK,SAAS,IAAI,OAAO,EAAE;AAAA,MACzB,CAAC,kBACC,cACG,+CAA+C,IAAI,EACnD,6BAA6B,IAAI;AAAA,IACxC;AAEA,SAAK,WAAW;AAAA,EAClB;AAAA,EAEQ,aAAmB;AACzB,2BAAuB,EAAE,iBAAiB,KAAK,MAAM;AACrD,2BAAuB,EAAE,iBAAiB,KAAK,MAAM;AACrD,+BAA2B,EAAE,iBAAiB,KAAK,MAAM;AACzD,+BAA2B,EAAE,iBAAiB,KAAK,MAAM;AAAA,EAC3D;AACF;AApBa;AAAA,WAAN;AAAA,EADN,WAAW;AAAA,GACC;","names":[]}