{"version":3,"sources":["../../../../../src/infrastructure/database/repository/User/UserUnitOfWork.ts","../../../../../src/core/CoreModuleSymbols.ts","../../../../../src/core/domainServices/Role/requests/repository/query/FindRoleByNameRepositoryQuery.ts","../../../../../src/core/domainServices/User/request/Repository/command/AddUserRepositoryCommand.ts","../../../../../src/core/domainServices/User/request/Repository/query/CheckIfUserAlreadyExistsRepositoryQuery.ts","../../../../../src/core/common/errors/BaseError.ts","../../../../../src/infrastructure/common/errors/InfrastructureErrors.ts"],"sourcesContent":["import { inject, injectable } from 'inversify';\n\nimport { DOMAIN_REPOSITORY_IDENTIFIERS } from 'core/CoreModuleSymbols';\nimport { User } from 'core/domain/User/User';\nimport { IUserRepository } from 'core/domainServices/User/IUserRepository';\nimport { IUserUnitOfWork } from 'core/domainServices/User/IUserUnitOfWork';\nimport { AddUserUnitOfWorkRepositoryCommand } from 'core/domainServices/User/request/UnitOfWorkRepository/command/AddUserUnitOfWorkRepositoryCommand';\nimport { DeleteUserUnitOfWorkRepositoryCommand } from 'core/domainServices/User/request/UnitOfWorkRepository/command/DeleteUserUnitOfWorkRepositoryCommand';\nimport { FindRoleByNameRepositoryQuery } from 'core/domainServices/Role/requests/repository/query/FindRoleByNameRepositoryQuery';\nimport { AddUserRepositoryCommand } from 'core/domainServices/User/request/Repository/command/AddUserRepositoryCommand';\nimport { IRoleRepository } from 'core/domainServices/Role/IRoleRepository';\n\nimport { USER_ROLE } from 'infrastructure/database/enum/UserRole';\nimport { CheckIfUserAlreadyExistsRepositoryQuery } from 'core/domainServices/User/request/Repository/query/CheckIfUserAlreadyExistsRepositoryQuery';\nimport { BaseError } from 'core/common/errors/BaseError';\nimport { InfrastructureErrors } from 'infrastructure/common/errors/InfrastructureErrors';\n\n@injectable()\nexport class UserUnitOfWork implements IUserUnitOfWork {\n  constructor(\n    @inject(DOMAIN_REPOSITORY_IDENTIFIERS.USER_REPOSITORY)\n    private readonly userRepository: IUserRepository,\n    @inject(DOMAIN_REPOSITORY_IDENTIFIERS.ROLE_REPOSITORY)\n    private readonly roleRepository: IRoleRepository\n  ) {}\n\n  async addUser({\n    email,\n    password,\n    nickname,\n  }: AddUserUnitOfWorkRepositoryCommand): Promise<User> {\n    const checkIfUserExist = await this.userRepository.checkIfUserAlreadyExists(\n      new CheckIfUserAlreadyExistsRepositoryQuery(nickname, email)\n    );\n\n    if (checkIfUserExist.length > 0) {\n      throw new BaseError(\n        InfrastructureErrors[InfrastructureErrors.USER_ALREADY_EXIST]\n      );\n    }\n    const { id } = await this.roleRepository.findRoleByName(\n      new FindRoleByNameRepositoryQuery(USER_ROLE.ADMIN)\n    );\n    return this.userRepository.addUser(\n      new AddUserRepositoryCommand(nickname, email, password, id)\n    );\n  }\n\n  deleteUser(command: DeleteUserUnitOfWorkRepositoryCommand): Promise<User> {\n    return this.userRepository.removeUser(command);\n  }\n}\n","export const DOMAIN_APPLICATION_SERVICE_IDENTIFIERS = {\n  USER_SERVICE: Symbol.for('UserService'),\n  AUTHENTICATION_SERVICE: Symbol.for('AuthenticationService'),\n  COFFEE_SERVICE: Symbol.for('CoffeeService'),\n  REVIEW_SERVICE: Symbol.for('ReviewService'),\n};\n\nexport const DOMAIN_MAPPING_IDENTIFIERS = {\n  USER_DOMAIN: Symbol.for('UserDomain'),\n  ROLE_DOMAIN: Symbol.for('RoleDomain'),\n  COFFEE_DOMAIN: Symbol.for('CoffeeDomain'),\n  REVIEW_DOMAIN: Symbol.for('ReviewDomain'),\n};\n\nexport const DOMAIN_REPOSITORY_IDENTIFIERS = {\n  ROLE_REPOSITORY: Symbol.for('RoleRepository'),\n  USER_REPOSITORY: Symbol.for('UserRepository'),\n  COFFEE_REPOSITORY: Symbol.for('CoffeeRepository'),\n  REVIEW_REPOSITORY: Symbol.for('ReviewRepository'),\n};\n\nexport const DOMAIN_UNIT_OF_WORK_IDENTIFIERS = {\n  USER_UNIT_OF_WORK: Symbol.for('UserUnitOfWork'),\n  COFFEE_UNIT_OF_WORK: Symbol.for('CoffeeUnitOfWork'),\n};\n","export class FindRoleByNameRepositoryQuery {\n  constructor(public readonly name: string) {}\n}\n","export class AddUserRepositoryCommand {\n  constructor(\n    public readonly nickname: string,\n    public readonly email: string,\n    public readonly password: string,\n    public readonly roleId: string\n  ) {}\n}\n","export class CheckIfUserAlreadyExistsRepositoryQuery {\n  constructor(\n    public readonly nickname: string,\n    public readonly email: string\n  ) {}\n}\n","export class BaseError implements Error {\n  constructor(\n    public readonly code?: string,\n    public readonly message: string = '',\n    public readonly name: string = ''\n  ) {}\n}\n","export enum InfrastructureErrors {\n  USER_NOT_FOUND,\n  USER_ALREADY_EXIST,\n  ROLE_NOT_FOUND,\n  COFFEE_NOT_FOUND,\n  REVIEW_NOT_FOUND,\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAAmC;;;ACA5B,IAAM,yCAAyC;AAAA,EACpD,cAAc,OAAO,IAAI,aAAa;AAAA,EACtC,wBAAwB,OAAO,IAAI,uBAAuB;AAAA,EAC1D,gBAAgB,OAAO,IAAI,eAAe;AAAA,EAC1C,gBAAgB,OAAO,IAAI,eAAe;AAC5C;AAEO,IAAM,6BAA6B;AAAA,EACxC,aAAa,OAAO,IAAI,YAAY;AAAA,EACpC,aAAa,OAAO,IAAI,YAAY;AAAA,EACpC,eAAe,OAAO,IAAI,cAAc;AAAA,EACxC,eAAe,OAAO,IAAI,cAAc;AAC1C;AAEO,IAAM,gCAAgC;AAAA,EAC3C,iBAAiB,OAAO,IAAI,gBAAgB;AAAA,EAC5C,iBAAiB,OAAO,IAAI,gBAAgB;AAAA,EAC5C,mBAAmB,OAAO,IAAI,kBAAkB;AAAA,EAChD,mBAAmB,OAAO,IAAI,kBAAkB;AAClD;AAEO,IAAM,kCAAkC;AAAA,EAC7C,mBAAmB,OAAO,IAAI,gBAAgB;AAAA,EAC9C,qBAAqB,OAAO,IAAI,kBAAkB;AACpD;;;ACxBO,IAAM,gCAAN,MAAoC;AAAA,EACzC,YAA4B,MAAc;AAAd;AAAA,EAAe;AAC7C;AAFa;;;ACAN,IAAM,2BAAN,MAA+B;AAAA,EACpC,YACkB,UACA,OACA,UACA,QAChB;AAJgB;AACA;AACA;AACA;AAAA,EACf;AACL;AAPa;;;ACAN,IAAM,0CAAN,MAA8C;AAAA,EACnD,YACkB,UACA,OAChB;AAFgB;AACA;AAAA,EACf;AACL;AALa;;;ACAN,IAAM,YAAN,MAAiC;AAAA,EACtC,YACkB,MACA,UAAkB,IAClB,OAAe,IAC/B;AAHgB;AACA;AACA;AAAA,EACf;AACL;AANa;;;ACAN,IAAK,uBAAL,kBAAKA,0BAAL;AACL,EAAAA,4CAAA;AACA,EAAAA,4CAAA;AACA,EAAAA,4CAAA;AACA,EAAAA,4CAAA;AACA,EAAAA,4CAAA;AALU,SAAAA;AAAA,GAAA;;;ANkBL,IAAM,iBAAN,MAAgD;AAAA,EACrD,YAEmB,gBAEA,gBACjB;AAHiB;AAEA;AAAA,EAChB;AAAA,EAEH,MAAM,QAAQ;AAAA,IACZ;AAAA,IACA;AAAA,IACA;AAAA,EACF,GAAsD;AACpD,UAAM,mBAAmB,MAAM,KAAK,eAAe;AAAA,MACjD,IAAI,wCAAwC,UAAU,KAAK;AAAA,IAC7D;AAEA,QAAI,iBAAiB,SAAS,GAAG;AAC/B,YAAM,IAAI;AAAA,QACR,+CAA4D;AAAA,MAC9D;AAAA,IACF;AACA,UAAM,EAAE,GAAG,IAAI,MAAM,KAAK,eAAe;AAAA,MACvC,IAAI,iDAA6C;AAAA,IACnD;AACA,WAAO,KAAK,eAAe;AAAA,MACzB,IAAI,yBAAyB,UAAU,OAAO,UAAU,EAAE;AAAA,IAC5D;AAAA,EACF;AAAA,EAEA,WAAW,SAA+D;AACxE,WAAO,KAAK,eAAe,WAAW,OAAO;AAAA,EAC/C;AACF;AAjCa;AAAA,iBAAN;AAAA,MADN,6BAAW;AAAA,EAGR,uBAAC,yBAAO,8BAA8B,eAAe;AAAA,EAErD,uBAAC,yBAAO,8BAA8B,eAAe;AAAA,GAJ5C;","names":["InfrastructureErrors"]}