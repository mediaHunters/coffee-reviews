{"version":3,"sources":["../../../../../src/infrastructure/database/repository/Review/ReviewRepository.ts","../../../../../src/core/CoreModuleSymbols.ts","../../../../../src/infrastructure/database/entities/Review.ts","../../../../../src/infrastructure/database/entities/Base.ts","../../../../../src/infrastructure/database/repository/common/Repository.ts","../../../../../src/infrastructure/InfrastructureModuleSymbols.ts","../../../../../src/infrastructure/common/errors/InfrastructureErrors.ts","../../../../../src/core/common/errors/BaseError.ts"],"sourcesContent":["import { inject } from 'inversify';\n\nimport { UpdateResult } from 'typeorm';\n\nimport { DOMAIN_MAPPING_IDENTIFIERS } from 'core/CoreModuleSymbols';\nimport { Review } from 'core/domain/Review/Review';\nimport { IReviewRepository } from 'core/domainServices/Review/IReviewRepository';\nimport { AddReviewRepositoryCommand } from 'core/domainServices/Review/requests/command/AddReviewRepositoryCommand';\nimport { Review as ReviewEntity } from 'infrastructure/database/entities/Review';\nimport { DBMapper } from 'infrastructure/database/mappings/DBMapper';\nimport { Repository } from 'infrastructure/database/repository/common/Repository';\nimport {\n  INFRASTRUCTURE_IDENTIFIERS,\n  DATABASE_MAPPING_IDENTIFIERS,\n} from 'infrastructure/InfrastructureModuleSymbols';\nimport { GetReviewsRepositoryQuery } from 'core/domainServices/Review/requests/query/GetReviewsRepositoryQuery';\nimport { UpdateReviewRepositoryCommand } from 'core/domainServices/Review/requests/command/UpdateReviewRepositoryCommand';\nimport { DeleteReviewRepositoryCommand } from 'core/domainServices/Review/requests/command/DeleteReviewRepositoryCommand';\nimport { InfrastructureErrors } from 'infrastructure/common/errors/InfrastructureErrors';\nimport { BaseError } from 'core/common/errors/BaseError';\n\nexport class ReviewRepository\n  extends Repository<ReviewEntity>\n  implements IReviewRepository\n{\n  constructor(\n    @inject(INFRASTRUCTURE_IDENTIFIERS.DB_MAPPER)\n    private readonly dbMapper: DBMapper\n  ) {\n    super(ReviewEntity);\n  }\n\n  async getReviews({ userId }: GetReviewsRepositoryQuery): Promise<Review[]> {\n    const reviews = await this.custom()\n      .createQueryBuilder()\n      .where('Review.userId = :userId ', { userId })\n      .getMany();\n\n    return this.dbMapper.mapper.map<ReviewEntity[], Review[]>(\n      {\n        destination: DOMAIN_MAPPING_IDENTIFIERS.REVIEW_DOMAIN,\n        source: DATABASE_MAPPING_IDENTIFIERS.REVIEW_ENTITY,\n      },\n      reviews\n    );\n  }\n\n  async addReview({\n    rating,\n    look,\n    smell,\n    taste,\n    userId,\n    coffeeId,\n  }: AddReviewRepositoryCommand): Promise<Review> {\n    const review = new ReviewEntity();\n\n    review.userId = userId;\n    review.coffeeId = coffeeId;\n    review.look = look;\n    review.smell = smell;\n    review.taste = taste;\n    review.rating = rating;\n\n    const savedReview = await review.save();\n\n    return this.dbMapper.mapper.map<ReviewEntity, Review>(\n      {\n        destination: DOMAIN_MAPPING_IDENTIFIERS.REVIEW_DOMAIN,\n        source: DATABASE_MAPPING_IDENTIFIERS.REVIEW_ENTITY,\n      },\n      savedReview\n    );\n  }\n\n  async updateReview({\n    review,\n    reviewId,\n  }: UpdateReviewRepositoryCommand): Promise<UpdateResult> {\n    const updatedReview = await this.custom()\n      .createQueryBuilder()\n      .update(ReviewEntity)\n      .set({ ...review })\n      .where('id = :reviewId', { reviewId })\n      .execute();\n\n    return updatedReview;\n  }\n\n  async deleteReview({\n    reviewId,\n  }: DeleteReviewRepositoryCommand): Promise<Review> {\n    const result = await this.custom()\n      .createQueryBuilder()\n      .where('Review.id = :reviewsId ', { reviewId })\n      .getOne();\n\n    if (!result) {\n      throw new BaseError(\n        InfrastructureErrors[InfrastructureErrors.REVIEW_NOT_FOUND]\n      );\n    }\n\n    this.remove(result);\n\n    return this.dbMapper.mapper.map<ReviewEntity, Review>(\n      {\n        destination: DOMAIN_MAPPING_IDENTIFIERS.REVIEW_DOMAIN,\n        source: DATABASE_MAPPING_IDENTIFIERS.REVIEW_ENTITY,\n      },\n      result\n    );\n  }\n}\n","export const DOMAIN_APPLICATION_SERVICE_IDENTIFIERS = {\n  USER_SERVICE: Symbol.for('UserService'),\n  AUTHENTICATION_SERVICE: Symbol.for('AuthenticationService'),\n  COFFEE_SERVICE: Symbol.for('CoffeeService'),\n  REVIEW_SERVICE: Symbol.for('ReviewService'),\n};\n\nexport const DOMAIN_MAPPING_IDENTIFIERS = {\n  USER_DOMAIN: Symbol.for('UserDomain'),\n  ROLE_DOMAIN: Symbol.for('RoleDomain'),\n  COFFEE_DOMAIN: Symbol.for('CoffeeDomain'),\n  REVIEW_DOMAIN: Symbol.for('ReviewDomain'),\n};\n\nexport const DOMAIN_REPOSITORY_IDENTIFIERS = {\n  ROLE_REPOSITORY: Symbol.for('RoleRepository'),\n  USER_REPOSITORY: Symbol.for('UserRepository'),\n  COFFEE_REPOSITORY: Symbol.for('CoffeeRepository'),\n  REVIEW_REPOSITORY: Symbol.for('ReviewRepository'),\n};\n\nexport const DOMAIN_UNIT_OF_WORK_IDENTIFIERS = {\n  USER_UNIT_OF_WORK: Symbol.for('UserUnitOfWork'),\n  COFFEE_UNIT_OF_WORK: Symbol.for('CoffeeUnitOfWork'),\n};\n","import { Column, Entity, JoinColumn, ManyToOne } from 'typeorm';\n\nimport type { Coffee } from 'infrastructure/database/entities/Coffee';\nimport type { User } from 'infrastructure/database/entities/User';\nimport Model from 'infrastructure/database/entities/Base';\n\n@Entity()\nexport class Review extends Model {\n  @Column('decimal')\n  rating!: number;\n\n  @Column('decimal')\n  look!: number;\n\n  @Column('decimal')\n  smell!: number;\n\n  @Column('decimal')\n  taste!: number;\n\n  @Column('text')\n  coffeeId!: string;\n\n  @ManyToOne('Coffee', (Coffee: Coffee) => Coffee.reviews, {\n    onDelete: 'CASCADE',\n  })\n  @JoinColumn({ name: 'coffee', referencedColumnName: 'id' })\n  coffee!: Coffee;\n\n  @Column('text', { nullable: true })\n  userId!: string;\n\n  @ManyToOne('User', (user: User) => user.reviews)\n  @JoinColumn({ name: 'user', referencedColumnName: 'id' })\n  user!: User;\n}\n","import {\n  CreateDateColumn,\n  UpdateDateColumn,\n  PrimaryGeneratedColumn,\n  BaseEntity,\n} from 'typeorm';\n\nexport default abstract class Model extends BaseEntity {\n  @PrimaryGeneratedColumn('uuid')\n  id!: string;\n\n  @CreateDateColumn()\n  createdAt!: Date;\n\n  @UpdateDateColumn()\n  updatedAt!: Date;\n}\n","import { AbstractRepository, getRepository, ObjectLiteral } from 'typeorm';\nimport { injectable } from 'inversify';\n\nimport { ObjectType } from 'typeorm/common/ObjectType';\n\nimport { Repository as ORMRepository } from 'typeorm/repository/Repository';\n\nimport { IRepository } from 'infrastructure/database/repository/common/IRepository';\nimport { Query } from 'infrastructure/database/repository/common/Query';\nimport { UpdateQueryData } from 'infrastructure/database/repository/common/UpdateQueryData';\n\n@injectable()\nexport abstract class Repository<E extends ObjectLiteral>\n  extends AbstractRepository<E>\n  implements IRepository<E, ORMRepository<E>>\n{\n  constructor(protected readonly entity: ObjectType<E>) {\n    super();\n  }\n\n  public async find(id: string | number): Promise<E | undefined> {\n    return this.getDBRepository().findOne(id);\n  }\n\n  public findBy(condition: Query<E>): Promise<E[]> {\n    return this.getDBRepository().find(condition);\n  }\n\n  public async findMany(ids: string[] | number[]): Promise<E[]> {\n    return this.getDBRepository().findByIds(ids);\n  }\n\n  public async findAll(): Promise<E[]> {\n    return this.getDBRepository().find();\n  }\n\n  public async query(query: string, parameters?: any[]): Promise<E[]> {\n    return this.getDBRepository().query(query, parameters);\n  }\n\n  public async update(\n    condition: string | number,\n    data: UpdateQueryData<E>\n  ): Promise<boolean> {\n    return !!(await this.getDBRepository().update(condition, data));\n  }\n\n  public async updateAll(\n    condition: string[] | number[],\n    data: E\n  ): Promise<boolean> {\n    return !!(await this.getDBRepository().update(condition, data));\n  }\n\n  public async delete(condition: string | number): Promise<boolean> {\n    return !!(await this.getDBRepository().delete(condition));\n  }\n\n  public async deleteAll(condition: string[] | number[]): Promise<boolean> {\n    return !!(await this.getDBRepository().delete(condition));\n  }\n\n  public async remove(entity: E): Promise<E> {\n    return this.getDBRepository().remove(entity);\n  }\n\n  public async removeAll(entities: E[]): Promise<E[]> {\n    return this.getDBRepository().remove(entities);\n  }\n\n  public async save(entity: E): Promise<E> {\n    return this.getDBRepository().save(entity as any);\n  }\n\n  public async saveAll(entities: E[]): Promise<E[]> {\n    return this.getDBRepository().save(entities as any);\n  }\n\n  public custom(): ORMRepository<E> {\n    return this.getDBRepository();\n  }\n\n  protected getConnectionName(): string | undefined {\n    return process.env.ORM_CONNECTION;\n  }\n\n  private getDBRepository(): ORMRepository<E> {\n    return getRepository<E>(this.entity, this.getConnectionName());\n  }\n}\n","export const DATABASE_IDENTIFIERS = {\n  ORM: Symbol.for('Orm'),\n};\n\nexport const INFRASTRUCTURE_IDENTIFIERS = {\n  DB_MAPPER: Symbol.for('DBMapper'),\n};\n\nexport const DATABASE_MAPPING_IDENTIFIERS = {\n  USER_ENTITY: Symbol.for('UserEntity'),\n  ROLE_ENTITY: Symbol.for('RoleEntity'),\n  COFFEE_ENTITY: Symbol.for('CoffeeEntity'),\n  REVIEW_ENTITY: Symbol.for('ReviewEntity'),\n};\n","export enum InfrastructureErrors {\n  USER_NOT_FOUND,\n  USER_ALREADY_EXIST,\n  ROLE_NOT_FOUND,\n  COFFEE_NOT_FOUND,\n  REVIEW_NOT_FOUND,\n}\n","export class BaseError implements Error {\n  constructor(\n    public readonly code?: string,\n    public readonly message: string = '',\n    public readonly name: string = ''\n  ) {}\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAAA,oBAAuB;;;ACAhB,IAAM,yCAAyC;AAAA,EACpD,cAAc,OAAO,IAAI,aAAa;AAAA,EACtC,wBAAwB,OAAO,IAAI,uBAAuB;AAAA,EAC1D,gBAAgB,OAAO,IAAI,eAAe;AAAA,EAC1C,gBAAgB,OAAO,IAAI,eAAe;AAC5C;AAEO,IAAM,6BAA6B;AAAA,EACxC,aAAa,OAAO,IAAI,YAAY;AAAA,EACpC,aAAa,OAAO,IAAI,YAAY;AAAA,EACpC,eAAe,OAAO,IAAI,cAAc;AAAA,EACxC,eAAe,OAAO,IAAI,cAAc;AAC1C;AAEO,IAAM,gCAAgC;AAAA,EAC3C,iBAAiB,OAAO,IAAI,gBAAgB;AAAA,EAC5C,iBAAiB,OAAO,IAAI,gBAAgB;AAAA,EAC5C,mBAAmB,OAAO,IAAI,kBAAkB;AAAA,EAChD,mBAAmB,OAAO,IAAI,kBAAkB;AAClD;AAEO,IAAM,kCAAkC;AAAA,EAC7C,mBAAmB,OAAO,IAAI,gBAAgB;AAAA,EAC9C,qBAAqB,OAAO,IAAI,kBAAkB;AACpD;;;ACxBA,IAAAC,kBAAsD;;;ACAtD,qBAKO;AAEP,IAA8B,QAA9B,cAA4C,0BAAW;AASvD;AAPE;AAAA,MADC,uCAAuB,MAAM;AAAA,GADF,MAE5B;AAGA;AAAA,MADC,iCAAiB;AAAA,GAJU,MAK5B;AAGA;AAAA,MADC,iCAAiB;AAAA,GAPU,MAQ5B;;;ADRK,IAAM,SAAN,cAAqB,MAAM;AA4BlC;AA1BE;AAAA,MADC,wBAAO,SAAS;AAAA,GADN,OAEX;AAGA;AAAA,MADC,wBAAO,SAAS;AAAA,GAJN,OAKX;AAGA;AAAA,MADC,wBAAO,SAAS;AAAA,GAPN,OAQX;AAGA;AAAA,MADC,wBAAO,SAAS;AAAA,GAVN,OAWX;AAGA;AAAA,MADC,wBAAO,MAAM;AAAA,GAbH,OAcX;AAMA;AAAA,MAJC,2BAAU,UAAU,CAAC,WAAmB,OAAO,SAAS;AAAA,IACvD,UAAU;AAAA,EACZ,CAAC;AAAA,MACA,4BAAW,EAAE,MAAM,UAAU,sBAAsB,KAAK,CAAC;AAAA,GAnB/C,OAoBX;AAGA;AAAA,MADC,wBAAO,QAAQ,EAAE,UAAU,KAAK,CAAC;AAAA,GAtBvB,OAuBX;AAIA;AAAA,MAFC,2BAAU,QAAQ,CAAC,SAAe,KAAK,OAAO;AAAA,MAC9C,4BAAW,EAAE,MAAM,QAAQ,sBAAsB,KAAK,CAAC;AAAA,GA1B7C,OA2BX;AA3BW,SAAN;AAAA,MADN,wBAAO;AAAA,GACK;;;AEPb,IAAAC,kBAAiE;AACjE,uBAA2B;AAWpB,IAAe,aAAf,cACG,mCAEV;AAAA,EACE,YAA+B,QAAuB;AACpD,UAAM;AADuB;AAAA,EAE/B;AAAA,EAEA,MAAa,KAAK,IAA6C;AAC7D,WAAO,KAAK,gBAAgB,EAAE,QAAQ,EAAE;AAAA,EAC1C;AAAA,EAEO,OAAO,WAAmC;AAC/C,WAAO,KAAK,gBAAgB,EAAE,KAAK,SAAS;AAAA,EAC9C;AAAA,EAEA,MAAa,SAAS,KAAwC;AAC5D,WAAO,KAAK,gBAAgB,EAAE,UAAU,GAAG;AAAA,EAC7C;AAAA,EAEA,MAAa,UAAwB;AACnC,WAAO,KAAK,gBAAgB,EAAE,KAAK;AAAA,EACrC;AAAA,EAEA,MAAa,MAAM,OAAe,YAAkC;AAClE,WAAO,KAAK,gBAAgB,EAAE,MAAM,OAAO,UAAU;AAAA,EACvD;AAAA,EAEA,MAAa,OACX,WACA,MACkB;AAClB,WAAO,CAAC,CAAE,MAAM,KAAK,gBAAgB,EAAE,OAAO,WAAW,IAAI;AAAA,EAC/D;AAAA,EAEA,MAAa,UACX,WACA,MACkB;AAClB,WAAO,CAAC,CAAE,MAAM,KAAK,gBAAgB,EAAE,OAAO,WAAW,IAAI;AAAA,EAC/D;AAAA,EAEA,MAAa,OAAO,WAA8C;AAChE,WAAO,CAAC,CAAE,MAAM,KAAK,gBAAgB,EAAE,OAAO,SAAS;AAAA,EACzD;AAAA,EAEA,MAAa,UAAU,WAAkD;AACvE,WAAO,CAAC,CAAE,MAAM,KAAK,gBAAgB,EAAE,OAAO,SAAS;AAAA,EACzD;AAAA,EAEA,MAAa,OAAO,QAAuB;AACzC,WAAO,KAAK,gBAAgB,EAAE,OAAO,MAAM;AAAA,EAC7C;AAAA,EAEA,MAAa,UAAU,UAA6B;AAClD,WAAO,KAAK,gBAAgB,EAAE,OAAO,QAAQ;AAAA,EAC/C;AAAA,EAEA,MAAa,KAAK,QAAuB;AACvC,WAAO,KAAK,gBAAgB,EAAE,KAAK,MAAa;AAAA,EAClD;AAAA,EAEA,MAAa,QAAQ,UAA6B;AAChD,WAAO,KAAK,gBAAgB,EAAE,KAAK,QAAe;AAAA,EACpD;AAAA,EAEO,SAA2B;AAChC,WAAO,KAAK,gBAAgB;AAAA,EAC9B;AAAA,EAEU,oBAAwC;AAChD,WAAO,QAAQ,IAAI;AAAA,EACrB;AAAA,EAEQ,kBAAoC;AAC1C,eAAO,+BAAiB,KAAK,QAAQ,KAAK,kBAAkB,CAAC;AAAA,EAC/D;AACF;AA7EsB,aAAf;AAAA,MADN,6BAAW;AAAA,GACU;;;ACZf,IAAM,uBAAuB;AAAA,EAClC,KAAK,OAAO,IAAI,KAAK;AACvB;AAEO,IAAM,6BAA6B;AAAA,EACxC,WAAW,OAAO,IAAI,UAAU;AAClC;AAEO,IAAM,+BAA+B;AAAA,EAC1C,aAAa,OAAO,IAAI,YAAY;AAAA,EACpC,aAAa,OAAO,IAAI,YAAY;AAAA,EACpC,eAAe,OAAO,IAAI,cAAc;AAAA,EACxC,eAAe,OAAO,IAAI,cAAc;AAC1C;;;ACbO,IAAK,uBAAL,kBAAKC,0BAAL;AACL,EAAAA,4CAAA;AACA,EAAAA,4CAAA;AACA,EAAAA,4CAAA;AACA,EAAAA,4CAAA;AACA,EAAAA,4CAAA;AALU,SAAAA;AAAA,GAAA;;;ACAL,IAAM,YAAN,MAAiC;AAAA,EACtC,YACkB,MACA,UAAkB,IAClB,OAAe,IAC/B;AAHgB;AACA;AACA;AAAA,EACf;AACL;;;APeO,IAAM,mBAAN,cACG,WAEV;AAAA,EACE,YAEmB,UACjB;AACA,UAAM,MAAY;AAFD;AAAA,EAGnB;AAAA,EAEA,MAAM,WAAW,EAAE,OAAO,GAAiD;AACzE,UAAM,UAAU,MAAM,KAAK,OAAO,EAC/B,mBAAmB,EACnB,MAAM,4BAA4B,EAAE,OAAO,CAAC,EAC5C,QAAQ;AAEX,WAAO,KAAK,SAAS,OAAO;AAAA,MAC1B;AAAA,QACE,aAAa,2BAA2B;AAAA,QACxC,QAAQ,6BAA6B;AAAA,MACvC;AAAA,MACA;AAAA,IACF;AAAA,EACF;AAAA,EAEA,MAAM,UAAU;AAAA,IACd;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF,GAAgD;AAC9C,UAAM,SAAS,IAAI,OAAa;AAEhC,WAAO,SAAS;AAChB,WAAO,WAAW;AAClB,WAAO,OAAO;AACd,WAAO,QAAQ;AACf,WAAO,QAAQ;AACf,WAAO,SAAS;AAEhB,UAAM,cAAc,MAAM,OAAO,KAAK;AAEtC,WAAO,KAAK,SAAS,OAAO;AAAA,MAC1B;AAAA,QACE,aAAa,2BAA2B;AAAA,QACxC,QAAQ,6BAA6B;AAAA,MACvC;AAAA,MACA;AAAA,IACF;AAAA,EACF;AAAA,EAEA,MAAM,aAAa;AAAA,IACjB;AAAA,IACA;AAAA,EACF,GAAyD;AACvD,UAAM,gBAAgB,MAAM,KAAK,OAAO,EACrC,mBAAmB,EACnB,OAAO,MAAY,EACnB,IAAI,EAAE,GAAG,OAAO,CAAC,EACjB,MAAM,kBAAkB,EAAE,SAAS,CAAC,EACpC,QAAQ;AAEX,WAAO;AAAA,EACT;AAAA,EAEA,MAAM,aAAa;AAAA,IACjB;AAAA,EACF,GAAmD;AACjD,UAAM,SAAS,MAAM,KAAK,OAAO,EAC9B,mBAAmB,EACnB,MAAM,2BAA2B,EAAE,SAAS,CAAC,EAC7C,OAAO;AAEV,QAAI,CAAC,QAAQ;AACX,YAAM,IAAI;AAAA,QACR,6CAA0D;AAAA,MAC5D;AAAA,IACF;AAEA,SAAK,OAAO,MAAM;AAElB,WAAO,KAAK,SAAS,OAAO;AAAA,MAC1B;AAAA,QACE,aAAa,2BAA2B;AAAA,QACxC,QAAQ,6BAA6B;AAAA,MACvC;AAAA,MACA;AAAA,IACF;AAAA,EACF;AACF;AA5Fa,mBAAN;AAAA,EAKH,uBAAC,0BAAO,2BAA2B,SAAS;AAAA,GALnC;","names":["import_inversify","import_typeorm","import_typeorm","InfrastructureErrors"]}