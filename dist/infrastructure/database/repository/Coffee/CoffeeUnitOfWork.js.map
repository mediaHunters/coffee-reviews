{"version":3,"sources":["../../../../../src/infrastructure/database/repository/Coffee/CoffeeUnitOfWork.ts","../../../../../src/core/CoreModuleSymbols.ts","../../../../../src/core/domainServices/Coffee/requests/repository/command/DeleteCoffeeRepositoryCommand.ts","../../../../../src/core/domainServices/Coffee/requests/repository/command/CreateCoffeeRepositoryCommand.ts"],"sourcesContent":["import { inject, injectable } from 'inversify';\n\nimport { DOMAIN_REPOSITORY_IDENTIFIERS } from 'core/CoreModuleSymbols';\nimport { Coffee } from 'core/domain/Coffee/Coffee';\nimport { ICoffeeUnitOfWork } from 'core/domainServices/Coffee/ICoffeeUnitOfWork';\nimport { CreateCoffeeUnitOfWorkRepositoryCommand } from 'core/domainServices/Coffee/requests/UnitOfWork/command/AddCoffeeUnitOfWorkRepositoryCommand';\nimport { ICoffeeRepository } from 'core/domainServices/Coffee/ICoffeeRepository';\nimport { DeleteCoffeeRepositoryCommand } from 'core/domainServices/Coffee/requests/repository/command/DeleteCoffeeRepositoryCommand';\nimport { IUserRepository } from 'core/domainServices/User/IUserRepository';\nimport { CreateCoffeeRepositoryCommand } from 'core/domainServices/Coffee/requests/repository/command/CreateCoffeeRepositoryCommand';\n\n@injectable()\nexport class CoffeeUnitOfWork implements ICoffeeUnitOfWork {\n  constructor(\n    @inject(DOMAIN_REPOSITORY_IDENTIFIERS.COFFEE_REPOSITORY)\n    private readonly coffeeRepository: ICoffeeRepository,\n    @inject(DOMAIN_REPOSITORY_IDENTIFIERS.USER_REPOSITORY)\n    private readonly userRepository: IUserRepository\n  ) {}\n\n  create({\n    brand,\n    name,\n    type,\n    imgUrl,\n    description,\n    burntLvl,\n    reflink,\n    CoffeeStatus,\n  }: CreateCoffeeUnitOfWorkRepositoryCommand): Promise<Coffee> {\n    return this.coffeeRepository.createCoffee(\n      new CreateCoffeeRepositoryCommand(\n        brand,\n        name,\n        type,\n        imgUrl,\n        description,\n        burntLvl,\n        reflink,\n        CoffeeStatus\n      )\n    );\n  }\n\n  delete({ id }: DeleteCoffeeRepositoryCommand): Promise<Coffee> {\n    return this.coffeeRepository.deleteCoffee(\n      new DeleteCoffeeRepositoryCommand(id)\n    );\n  }\n\n  // @Transactional({\n  //   connectionName: () => process.env.ORM_CONNECTION,\n  // })\n  // async addCoffeeReview({\n  //   userId,\n  //   coffeeId,\n  //   look,\n  //   smell,\n  //   taste,\n  // }: AddReviewRepositoryCommand): Promise<Coffee> {\n\n  //   return this.coffeeRepository.addCoffeeReview(\n  //     new AddReviewRepositoryCommand(userId, coffeeId, look, smell, taste)\n  //   );\n  // }\n}\n","export const DOMAIN_APPLICATION_SERVICE_IDENTIFIERS = {\n  USER_SERVICE: Symbol.for('UserService'),\n  AUTHENTICATION_SERVICE: Symbol.for('AuthenticationService'),\n  COFFEE_SERVICE: Symbol.for('CoffeeService'),\n  REVIEW_SERVICE: Symbol.for('ReviewService'),\n};\n\nexport const DOMAIN_MAPPING_IDENTIFIERS = {\n  USER_DOMAIN: Symbol.for('UserDomain'),\n  ROLE_DOMAIN: Symbol.for('RoleDomain'),\n  COFFEE_DOMAIN: Symbol.for('CoffeeDomain'),\n  REVIEW_DOMAIN: Symbol.for('ReviewDomain'),\n};\n\nexport const DOMAIN_REPOSITORY_IDENTIFIERS = {\n  ROLE_REPOSITORY: Symbol.for('RoleRepository'),\n  USER_REPOSITORY: Symbol.for('UserRepository'),\n  COFFEE_REPOSITORY: Symbol.for('CoffeeRepository'),\n  REVIEW_REPOSITORY: Symbol.for('ReviewRepository'),\n};\n\nexport const DOMAIN_UNIT_OF_WORK_IDENTIFIERS = {\n  USER_UNIT_OF_WORK: Symbol.for('UserUnitOfWork'),\n  COFFEE_UNIT_OF_WORK: Symbol.for('CoffeeUnitOfWork'),\n};\n","export class DeleteCoffeeRepositoryCommand {\n  constructor(public readonly id: string) {}\n}\n","export class CreateCoffeeRepositoryCommand {\n  constructor(\n    public readonly brand: string,\n    public readonly name: string,\n    public readonly type: string,\n    public readonly imgUrl: string,\n    public readonly description: string,\n    public readonly burntLvl: string,\n    public readonly reflink: string,\n    public readonly CoffeeStatus: string\n  ) {}\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAAmC;;;ACA5B,IAAM,yCAAyC;AAAA,EACpD,cAAc,OAAO,IAAI,aAAa;AAAA,EACtC,wBAAwB,OAAO,IAAI,uBAAuB;AAAA,EAC1D,gBAAgB,OAAO,IAAI,eAAe;AAAA,EAC1C,gBAAgB,OAAO,IAAI,eAAe;AAC5C;AAEO,IAAM,6BAA6B;AAAA,EACxC,aAAa,OAAO,IAAI,YAAY;AAAA,EACpC,aAAa,OAAO,IAAI,YAAY;AAAA,EACpC,eAAe,OAAO,IAAI,cAAc;AAAA,EACxC,eAAe,OAAO,IAAI,cAAc;AAC1C;AAEO,IAAM,gCAAgC;AAAA,EAC3C,iBAAiB,OAAO,IAAI,gBAAgB;AAAA,EAC5C,iBAAiB,OAAO,IAAI,gBAAgB;AAAA,EAC5C,mBAAmB,OAAO,IAAI,kBAAkB;AAAA,EAChD,mBAAmB,OAAO,IAAI,kBAAkB;AAClD;AAEO,IAAM,kCAAkC;AAAA,EAC7C,mBAAmB,OAAO,IAAI,gBAAgB;AAAA,EAC9C,qBAAqB,OAAO,IAAI,kBAAkB;AACpD;;;ACxBO,IAAM,gCAAN,MAAoC;AAAA,EACzC,YAA4B,IAAY;AAAZ;AAAA,EAAa;AAC3C;;;ACFO,IAAM,gCAAN,MAAoC;AAAA,EACzC,YACkB,OACA,MACA,MACA,QACA,aACA,UACA,SACA,cAChB;AARgB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA,EACf;AACL;;;AHCO,IAAM,mBAAN,MAAoD;AAAA,EACzD,YAEmB,kBAEA,gBACjB;AAHiB;AAEA;AAAA,EAChB;AAAA,EAEH,OAAO;AAAA,IACL;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF,GAA6D;AAC3D,WAAO,KAAK,iBAAiB;AAAA,MAC3B,IAAI;AAAA,QACF;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA,EAEA,OAAO,EAAE,GAAG,GAAmD;AAC7D,WAAO,KAAK,iBAAiB;AAAA,MAC3B,IAAI,8BAA8B,EAAE;AAAA,IACtC;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiBF;AArDa,mBAAN;AAAA,MADN,6BAAW;AAAA,EAGR,uBAAC,yBAAO,8BAA8B,iBAAiB;AAAA,EAEvD,uBAAC,yBAAO,8BAA8B,eAAe;AAAA,GAJ5C;","names":[]}