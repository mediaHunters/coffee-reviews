{"version":3,"sources":["../../../../../src/infrastructure/database/repository/role/RoleRepository.ts","../../../../../src/core/CoreModuleSymbols.ts","../../../../../src/core/common/errors/BaseError.ts","../../../../../src/infrastructure/database/entities/Role.ts","../../../../../src/infrastructure/database/enum/UserRole.ts","../../../../../src/infrastructure/database/entities/Base.ts","../../../../../src/infrastructure/InfrastructureModuleSymbols.ts","../../../../../src/infrastructure/database/repository/common/Repository.ts","../../../../../src/infrastructure/common/errors/InfrastructureErrors.ts"],"sourcesContent":["import { inject, injectable } from 'inversify';\n\nimport { EntityRepository } from 'typeorm';\n\nimport { FindRoleRepositoryQuery } from 'core/domainServices/Role/requests/repository/query/FindRoleRepositoryQuery';\nimport { IRoleRepository } from 'core/domainServices/Role/IRoleRepository';\n\nimport { Role } from 'core/domain/Role/Role';\nimport { DOMAIN_MAPPING_IDENTIFIERS } from 'core/CoreModuleSymbols';\nimport { BaseError } from 'core/common/errors/BaseError';\n\nimport { Role as RoleEntity } from 'infrastructure/database/entities/Role';\nimport {\n  DATABASE_MAPPING_IDENTIFIERS,\n  INFRASTRUCTURE_IDENTIFIERS,\n} from 'infrastructure/InfrastructureModuleSymbols';\nimport { Repository } from 'infrastructure/database/repository/common/Repository';\nimport { InfrastructureErrors } from 'infrastructure/common/errors/InfrastructureErrors';\nimport { FindRoleByNameRepositoryQuery } from 'core/domainServices/Role/requests/repository/query/FindRoleByNameRepositoryQuery';\nimport { DBMapper } from 'infrastructure/database/mappings/DBMapper';\n\n@injectable()\n@EntityRepository(RoleEntity)\nexport class RoleRepository\n  extends Repository<RoleEntity>\n  implements IRoleRepository\n{\n  constructor(\n    @inject(INFRASTRUCTURE_IDENTIFIERS.DB_MAPPER)\n    private readonly dbMapper: DBMapper\n  ) {\n    super(RoleEntity);\n  }\n\n  async findRole({ id }: FindRoleRepositoryQuery): Promise<Role> {\n    const role = await this.find(id);\n\n    if (!role) {\n      throw new BaseError(\n        InfrastructureErrors[InfrastructureErrors.ROLE_NOT_FOUND]\n      );\n    }\n\n    return this.dbMapper.mapper.map<RoleEntity, Role>(\n      {\n        destination: DOMAIN_MAPPING_IDENTIFIERS.ROLE_DOMAIN,\n        source: DATABASE_MAPPING_IDENTIFIERS.ROLE_ENTITY,\n      },\n      role\n    );\n  }\n\n  async findRoleByName({ name }: FindRoleByNameRepositoryQuery): Promise<Role> {\n    const role = await this.custom()\n      .createQueryBuilder()\n      .where('\"Role\".\"name\" = :name', {\n        name,\n      })\n      .getOne();\n\n    if (!role) {\n      throw new BaseError(\n        InfrastructureErrors[InfrastructureErrors.ROLE_NOT_FOUND]\n      );\n    }\n\n    return this.dbMapper.mapper.map<RoleEntity, Role>(\n      {\n        destination: DOMAIN_MAPPING_IDENTIFIERS.ROLE_DOMAIN,\n        source: DATABASE_MAPPING_IDENTIFIERS.ROLE_ENTITY,\n      },\n      role\n    );\n  }\n}\n","export const DOMAIN_APPLICATION_SERVICE_IDENTIFIERS = {\n  USER_SERVICE: Symbol.for('UserService'),\n  AUTHENTICATION_SERVICE: Symbol.for('AuthenticationService'),\n  COFFEE_SERVICE: Symbol.for('CoffeeService'),\n  REVIEW_SERVICE: Symbol.for('ReviewService'),\n};\n\nexport const DOMAIN_MAPPING_IDENTIFIERS = {\n  USER_DOMAIN: Symbol.for('UserDomain'),\n  ROLE_DOMAIN: Symbol.for('RoleDomain'),\n  COFFEE_DOMAIN: Symbol.for('CoffeeDomain'),\n  REVIEW_DOMAIN: Symbol.for('ReviewDomain'),\n};\n\nexport const DOMAIN_REPOSITORY_IDENTIFIERS = {\n  ROLE_REPOSITORY: Symbol.for('RoleRepository'),\n  USER_REPOSITORY: Symbol.for('UserRepository'),\n  COFFEE_REPOSITORY: Symbol.for('CoffeeRepository'),\n  REVIEW_REPOSITORY: Symbol.for('ReviewRepository'),\n};\n\nexport const DOMAIN_UNIT_OF_WORK_IDENTIFIERS = {\n  USER_UNIT_OF_WORK: Symbol.for('UserUnitOfWork'),\n  COFFEE_UNIT_OF_WORK: Symbol.for('CoffeeUnitOfWork'),\n};\n","export class BaseError implements Error {\n  constructor(\n    public readonly code?: string,\n    public readonly message: string = '',\n    public readonly name: string = ''\n  ) {}\n}\n","import { Column, Entity, OneToMany } from 'typeorm';\n\nimport { USER_ROLE } from 'infrastructure/database/enum/UserRole';\nimport type { User } from 'infrastructure/database/entities/User';\nimport Model from 'infrastructure/database/entities/Base';\n\n@Entity()\nexport class Role extends Model {\n  @Column({\n    default: USER_ROLE.MEMBER,\n    enum: USER_ROLE,\n    nullable: false,\n    type: 'enum',\n  })\n  name!: string;\n\n  @OneToMany('User', (user: User) => user.role)\n  user!: User;\n}\n","export enum USER_ROLE {\n  ADMIN = 'ADMIN',\n  MEMBER = 'MEMBER',\n}\n","import {\n  CreateDateColumn,\n  UpdateDateColumn,\n  PrimaryGeneratedColumn,\n  BaseEntity,\n} from 'typeorm';\n\nexport default abstract class Model extends BaseEntity {\n  @PrimaryGeneratedColumn('uuid')\n  id!: string;\n\n  @CreateDateColumn()\n  createdAt!: Date;\n\n  @UpdateDateColumn()\n  updatedAt!: Date;\n}\n","export const DATABASE_IDENTIFIERS = {\n  ORM: Symbol.for('Orm'),\n};\n\nexport const INFRASTRUCTURE_IDENTIFIERS = {\n  DB_MAPPER: Symbol.for('DBMapper'),\n};\n\nexport const DATABASE_MAPPING_IDENTIFIERS = {\n  USER_ENTITY: Symbol.for('UserEntity'),\n  ROLE_ENTITY: Symbol.for('RoleEntity'),\n  COFFEE_ENTITY: Symbol.for('CoffeeEntity'),\n  REVIEW_ENTITY: Symbol.for('ReviewEntity'),\n};\n","import { AbstractRepository, getRepository, ObjectLiteral } from 'typeorm';\nimport { injectable } from 'inversify';\n\nimport { ObjectType } from 'typeorm/common/ObjectType';\n\nimport { Repository as ORMRepository } from 'typeorm/repository/Repository';\n\nimport { IRepository } from 'infrastructure/database/repository/common/IRepository';\nimport { Query } from 'infrastructure/database/repository/common/Query';\nimport { UpdateQueryData } from 'infrastructure/database/repository/common/UpdateQueryData';\n\n@injectable()\nexport abstract class Repository<E extends ObjectLiteral>\n  extends AbstractRepository<E>\n  implements IRepository<E, ORMRepository<E>>\n{\n  constructor(protected readonly entity: ObjectType<E>) {\n    super();\n  }\n\n  public async find(id: string | number): Promise<E | undefined> {\n    return this.getDBRepository().findOne(id);\n  }\n\n  public findBy(condition: Query<E>): Promise<E[]> {\n    return this.getDBRepository().find(condition);\n  }\n\n  public async findMany(ids: string[] | number[]): Promise<E[]> {\n    return this.getDBRepository().findByIds(ids);\n  }\n\n  public async findAll(): Promise<E[]> {\n    return this.getDBRepository().find();\n  }\n\n  public async query(query: string, parameters?: any[]): Promise<E[]> {\n    return this.getDBRepository().query(query, parameters);\n  }\n\n  public async update(\n    condition: string | number,\n    data: UpdateQueryData<E>\n  ): Promise<boolean> {\n    return !!(await this.getDBRepository().update(condition, data));\n  }\n\n  public async updateAll(\n    condition: string[] | number[],\n    data: E\n  ): Promise<boolean> {\n    return !!(await this.getDBRepository().update(condition, data));\n  }\n\n  public async delete(condition: string | number): Promise<boolean> {\n    return !!(await this.getDBRepository().delete(condition));\n  }\n\n  public async deleteAll(condition: string[] | number[]): Promise<boolean> {\n    return !!(await this.getDBRepository().delete(condition));\n  }\n\n  public async remove(entity: E): Promise<E> {\n    return this.getDBRepository().remove(entity);\n  }\n\n  public async removeAll(entities: E[]): Promise<E[]> {\n    return this.getDBRepository().remove(entities);\n  }\n\n  public async save(entity: E): Promise<E> {\n    return this.getDBRepository().save(entity as any);\n  }\n\n  public async saveAll(entities: E[]): Promise<E[]> {\n    return this.getDBRepository().save(entities as any);\n  }\n\n  public custom(): ORMRepository<E> {\n    return this.getDBRepository();\n  }\n\n  protected getConnectionName(): string | undefined {\n    return process.env.ORM_CONNECTION;\n  }\n\n  private getDBRepository(): ORMRepository<E> {\n    return getRepository<E>(this.entity, this.getConnectionName());\n  }\n}\n","export enum InfrastructureErrors {\n  USER_NOT_FOUND,\n  USER_ALREADY_EXIST,\n  ROLE_NOT_FOUND,\n  COFFEE_NOT_FOUND,\n  REVIEW_NOT_FOUND,\n}\n"],"mappings":"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","names":["import_inversify","import_typeorm","import_typeorm","USER_ROLE","import_typeorm","InfrastructureErrors"]}