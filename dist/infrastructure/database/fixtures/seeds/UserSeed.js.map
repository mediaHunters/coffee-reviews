{"version":3,"sources":["../../../../../src/infrastructure/database/fixtures/seeds/UserSeed.ts","../../../../../src/infrastructure/database/entities/User.ts","../../../../../src/infrastructure/database/entities/Base.ts","../../../../../src/infrastructure/database/entities/Role.ts","../../../../../src/infrastructure/database/enum/UserRole.ts"],"sourcesContent":["import { Factory, Seeder } from 'typeorm-seeding';\n\nimport { User } from 'infrastructure/database/entities/User';\nimport { Role } from 'infrastructure/database/entities/Role';\n\nimport { USER_ROLE } from 'infrastructure/database/enum/UserRole';\n\nexport class UserSeed implements Seeder {\n  async run(factory: Factory): Promise<void> {\n    await this.prepareAdminUserSeeds(factory);\n    await this.prepareMemberUserSeeds(factory);\n  }\n\n  private async prepareAdminUserSeeds(factory: Factory): Promise<void> {\n    const adminRole = await factory(Role)().create({\n      name: USER_ROLE.ADMIN,\n    });\n\n    await factory(User)().create({\n      email: 'admin@example.com',\n      role: adminRole,\n      nickname: 'nick admin',\n    });\n  }\n\n  private async prepareMemberUserSeeds(factory: Factory): Promise<void> {\n    const memberRole = await factory(Role)().create({\n      name: USER_ROLE.MEMBER,\n    });\n\n    await factory(User)().create({\n      email: 'user@example.com',\n      role: memberRole,\n      nickname: 'sample_nick',\n    });\n  }\n}\n","import { Entity, Column, ManyToOne, OneToMany } from 'typeorm';\n\nimport type { Role } from 'infrastructure/database/entities/Role';\nimport type { Review } from 'infrastructure/database/entities/Review';\nimport Model from 'infrastructure/database/entities/Base';\n\n@Entity()\nexport class User extends Model {\n  @Column('text', {\n    nullable: true,\n  })\n  firstName?: string;\n\n  @Column('text', {\n    nullable: true,\n  })\n  lastName?: string;\n\n  @Column('text', { unique: true })\n  nickname!: string;\n\n  @Column('text')\n  email!: string;\n\n  @Column('text')\n  password!: string;\n\n  @ManyToOne('Role', (role: Role) => role.user)\n  role!: Role;\n\n  @OneToMany('Review', (review: Review) => review.user)\n  reviews!: Review[];\n\n  toJson(): any {\n    return {\n      ...this,\n      password: undefined,\n    };\n  }\n}\n","import {\n  CreateDateColumn,\n  UpdateDateColumn,\n  PrimaryGeneratedColumn,\n  BaseEntity,\n} from 'typeorm';\n\nexport default abstract class Model extends BaseEntity {\n  @PrimaryGeneratedColumn('uuid')\n  id!: string;\n\n  @CreateDateColumn()\n  createdAt!: Date;\n\n  @UpdateDateColumn()\n  updatedAt!: Date;\n}\n","import { Column, Entity, OneToMany } from 'typeorm';\n\nimport { USER_ROLE } from 'infrastructure/database/enum/UserRole';\nimport type { User } from 'infrastructure/database/entities/User';\nimport Model from 'infrastructure/database/entities/Base';\n\n@Entity()\nexport class Role extends Model {\n  @Column({\n    default: USER_ROLE.MEMBER,\n    enum: USER_ROLE,\n    nullable: false,\n    type: 'enum',\n  })\n  name!: string;\n\n  @OneToMany('User', (user: User) => user.role)\n  user!: User;\n}\n","export enum USER_ROLE {\n  ADMIN = 'ADMIN',\n  MEMBER = 'MEMBER',\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAA,IAAAA,kBAAqD;;;ACArD,qBAKO;AAEP,IAA8B,QAA9B,cAA4C,0BAAW;AASvD;AAPE;AAAA,MADC,uCAAuB,MAAM;AAAA,GADF,MAE5B;AAGA;AAAA,MADC,iCAAiB;AAAA,GAJU,MAK5B;AAGA;AAAA,MADC,iCAAiB;AAAA,GAPU,MAQ5B;;;ADRK,IAAM,OAAN,cAAmB,MAAM;AAAA,EA0B9B,SAAc;AACZ,WAAO;AAAA,MACL,GAAG;AAAA,MACH,UAAU;AAAA,IACZ;AAAA,EACF;AACF;AA5BE;AAAA,MAHC,wBAAO,QAAQ;AAAA,IACd,UAAU;AAAA,EACZ,CAAC;AAAA,GAHU,KAIX;AAKA;AAAA,MAHC,wBAAO,QAAQ;AAAA,IACd,UAAU;AAAA,EACZ,CAAC;AAAA,GARU,KASX;AAGA;AAAA,MADC,wBAAO,QAAQ,EAAE,QAAQ,KAAK,CAAC;AAAA,GAXrB,KAYX;AAGA;AAAA,MADC,wBAAO,MAAM;AAAA,GAdH,KAeX;AAGA;AAAA,MADC,wBAAO,MAAM;AAAA,GAjBH,KAkBX;AAGA;AAAA,MADC,2BAAU,QAAQ,CAAC,SAAe,KAAK,IAAI;AAAA,GApBjC,KAqBX;AAGA;AAAA,MADC,2BAAU,UAAU,CAAC,WAAmB,OAAO,IAAI;AAAA,GAvBzC,KAwBX;AAxBW,OAAN;AAAA,MADN,wBAAO;AAAA,GACK;;;AEPb,IAAAC,kBAA0C;;;ACAnC,IAAK,YAAL,kBAAKC,eAAL;AACL,EAAAA,WAAA,WAAQ;AACR,EAAAA,WAAA,YAAS;AAFC,SAAAA;AAAA,GAAA;;;ADOL,IAAM,OAAN,cAAmB,MAAM;AAWhC;AAJE;AAAA,MANC,wBAAO;AAAA,IACN;AAAA,IACA,MAAM;AAAA,IACN,UAAU;AAAA,IACV,MAAM;AAAA,EACR,CAAC;AAAA,GANU,KAOX;AAGA;AAAA,MADC,2BAAU,QAAQ,CAAC,SAAe,KAAK,IAAI;AAAA,GATjC,KAUX;AAVW,OAAN;AAAA,MADN,wBAAO;AAAA,GACK;;;AHAN,IAAM,WAAN,MAAiC;AAAA,EACtC,MAAM,IAAI,SAAiC;AACzC,UAAM,KAAK,sBAAsB,OAAO;AACxC,UAAM,KAAK,uBAAuB,OAAO;AAAA,EAC3C;AAAA,EAEA,MAAc,sBAAsB,SAAiC;AACnE,UAAM,YAAY,MAAM,QAAQ,IAAI,EAAE,EAAE,OAAO;AAAA,MAC7C;AAAA,IACF,CAAC;AAED,UAAM,QAAQ,IAAI,EAAE,EAAE,OAAO;AAAA,MAC3B,OAAO;AAAA,MACP,MAAM;AAAA,MACN,UAAU;AAAA,IACZ,CAAC;AAAA,EACH;AAAA,EAEA,MAAc,uBAAuB,SAAiC;AACpE,UAAM,aAAa,MAAM,QAAQ,IAAI,EAAE,EAAE,OAAO;AAAA,MAC9C;AAAA,IACF,CAAC;AAED,UAAM,QAAQ,IAAI,EAAE,EAAE,OAAO;AAAA,MAC3B,OAAO;AAAA,MACP,MAAM;AAAA,MACN,UAAU;AAAA,IACZ,CAAC;AAAA,EACH;AACF;","names":["import_typeorm","import_typeorm","USER_ROLE"]}